declare const AccountShow: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Account details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly account: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly billing_address: {
                            readonly type: "object";
                            readonly description: "Address object for Addresses API";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Address ID";
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly enum: readonly ["active", "inactive"];
                                    readonly description: "Status of the address\n\n`active` `inactive`";
                                };
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                                readonly default_for: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                                    readonly properties: {
                                        readonly billing: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default billing address";
                                        };
                                        readonly sender: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default sender address";
                                        };
                                        readonly pickup: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default pickup address";
                                        };
                                        readonly return: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default return address";
                                        };
                                    };
                                };
                                readonly hk_district: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly description: "Details of the district for an address in Hong Kong. Display only applicable for addresses in Hong Kong.";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                        };
                                        readonly area: {
                                            readonly type: "string";
                                        };
                                        readonly district: {
                                            readonly type: "string";
                                        };
                                        readonly zone: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly validation: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                            readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                        };
                                        readonly detail: {
                                            readonly type: "string";
                                            readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                        };
                                        readonly comparison: {
                                            readonly type: "object";
                                            readonly additionalProperties: false;
                                            readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                            readonly properties: {
                                                readonly pre: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                    readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                };
                                                readonly post: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                    readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                };
                                                readonly changes: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                                    readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                                };
                                            };
                                        };
                                        readonly address: {
                                            readonly type: "object";
                                            readonly description: "The validated address as sourced from validation service";
                                            readonly properties: {
                                                readonly line_1: {
                                                    readonly type: "string";
                                                    readonly description: "First line of the street address";
                                                };
                                                readonly line_2: {
                                                    readonly type: "string";
                                                    readonly description: "Second line of the street address";
                                                };
                                                readonly line_3: {
                                                    readonly type: "string";
                                                    readonly description: "Third line of the street address";
                                                    readonly maximum: 35;
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                    readonly description: "City or Suburb";
                                                };
                                                readonly postal_code: {
                                                    readonly type: "string";
                                                    readonly description: "Postal code.";
                                                };
                                                readonly country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                };
                                                readonly company_name: {
                                                    readonly type: "string";
                                                    readonly description: "The company or organization at the address";
                                                };
                                                readonly contact_name: {
                                                    readonly type: "string";
                                                    readonly description: "The full name of a person at the address";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Company name of current account";
                        };
                        readonly easyship_company_id: {
                            readonly type: "string";
                            readonly description: "Easyship company ID";
                        };
                        readonly credit: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly balance: {
                                    readonly type: "number";
                                    readonly description: "Total amount in the account without considering holds or pending transactions.";
                                };
                                readonly available_balance: {
                                    readonly type: "number";
                                    readonly description: "Funds accessible for use, accounting for holds and pending transactions.";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                    readonly examples: readonly ["USD"];
                                };
                            };
                        };
                        readonly payment_sources: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Payment source id in Easyship";
                                    };
                                    readonly third_party_source_id: {
                                        readonly type: "string";
                                        readonly description: "Third party payment source id";
                                    };
                                    readonly payment_method_type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["card", "bank_account"];
                                        readonly description: "`card` `bank_account`";
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly bank_name: {
                                                readonly type: "string";
                                                readonly description: "Bank name";
                                            };
                                            readonly holder_name: {
                                                readonly type: "string";
                                                readonly description: "Account holder name";
                                            };
                                            readonly last_four_digits: {
                                                readonly type: "string";
                                                readonly description: "Last four digits of bank account number";
                                            };
                                            readonly routing_number: {
                                                readonly type: "string";
                                                readonly description: "Routing number";
                                            };
                                            readonly is_verified: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the bank account is verified by Stripe";
                                            };
                                        };
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly brand: {
                                                readonly type: "string";
                                                readonly description: "Credit card brand";
                                                readonly examples: readonly ["visa"];
                                            };
                                            readonly expiration_year: {
                                                readonly type: "string";
                                                readonly description: "The expiration year of the card";
                                                readonly examples: readonly ["2023"];
                                            };
                                            readonly expiration_month: {
                                                readonly type: "string";
                                                readonly description: "The expiration month of the card";
                                                readonly examples: readonly ["01"];
                                            };
                                            readonly last_four_digits: {
                                                readonly type: "string";
                                                readonly description: "Last four digits of credit card";
                                            };
                                            readonly holder_name: {
                                                readonly type: "string";
                                                readonly description: "Card holder name";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressActivateCreate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "address ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressDeactivateCreate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "address ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressesCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["city", "company_name", "contact_email", "contact_name", "contact_phone", "country_alpha2", "line_1"];
        readonly properties: {
            readonly line_1: {
                readonly type: "string";
                readonly description: "First line of the street address";
                readonly maximum: 35;
            };
            readonly line_2: {
                readonly type: "string";
                readonly description: "Second line of the street address";
                readonly maximum: 35;
            };
            readonly state: {
                readonly type: "string";
                readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                readonly maximum: 200;
            };
            readonly city: {
                readonly type: "string";
                readonly description: "City or Suburb";
                readonly maximum: 200;
            };
            readonly postal_code: {
                readonly type: "string";
                readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
            };
            readonly country_alpha2: {
                readonly type: "string";
                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
            };
            readonly company_name: {
                readonly type: "string";
                readonly description: "The company or organization at the address";
                readonly maximum: 27;
            };
            readonly contact_name: {
                readonly type: "string";
                readonly description: "The full name of a person at the address";
                readonly maximum: 22;
            };
            readonly contact_phone: {
                readonly type: "string";
                readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                readonly maximum: 20;
            };
            readonly contact_email: {
                readonly type: "string";
                readonly format: "email";
                readonly description: "Email address used to reach the person in `contact_name\"";
                readonly maximum: 50;
            };
            readonly default_for: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                readonly properties: {
                    readonly pickup: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                    readonly billing: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                    readonly sender: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                    readonly return: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Address details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly address: {
                    readonly type: "object";
                    readonly description: "Address object for Addresses API";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Address ID";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["active", "inactive"];
                            readonly description: "Status of the address\n\n`active` `inactive`";
                        };
                        readonly line_1: {
                            readonly type: "string";
                            readonly description: "First line of the street address";
                            readonly maximum: 35;
                        };
                        readonly line_2: {
                            readonly type: "string";
                            readonly description: "Second line of the street address";
                            readonly maximum: 35;
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                            readonly maximum: 200;
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly description: "City or Suburb";
                            readonly maximum: 200;
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                        };
                        readonly country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly company_name: {
                            readonly type: "string";
                            readonly description: "The company or organization at the address";
                            readonly maximum: 27;
                        };
                        readonly contact_name: {
                            readonly type: "string";
                            readonly description: "The full name of a person at the address";
                            readonly maximum: 22;
                        };
                        readonly contact_phone: {
                            readonly type: "string";
                            readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                            readonly maximum: 20;
                        };
                        readonly contact_email: {
                            readonly type: "string";
                            readonly format: "email";
                            readonly description: "Email address used to reach the person in `contact_name\"";
                            readonly maximum: 50;
                        };
                        readonly default_for: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                            readonly properties: {
                                readonly billing: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default billing address";
                                };
                                readonly sender: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default sender address";
                                };
                                readonly pickup: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default pickup address";
                                };
                                readonly return: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default return address";
                                };
                            };
                        };
                        readonly hk_district: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "Details of the district for an address in Hong Kong. Display only applicable for addresses in Hong Kong.";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                };
                                readonly area: {
                                    readonly type: "string";
                                };
                                readonly district: {
                                    readonly type: "string";
                                };
                                readonly zone: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly validation: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                    readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                };
                                readonly detail: {
                                    readonly type: "string";
                                    readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                };
                                readonly comparison: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                    readonly properties: {
                                        readonly pre: {
                                            readonly type: "string";
                                            readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                            readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                        };
                                        readonly post: {
                                            readonly type: "string";
                                            readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                            readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                        };
                                        readonly changes: {
                                            readonly type: "string";
                                            readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                            readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                        };
                                    };
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "The validated address as sourced from validation service";
                                    readonly properties: {
                                        readonly line_1: {
                                            readonly type: "string";
                                            readonly description: "First line of the street address";
                                        };
                                        readonly line_2: {
                                            readonly type: "string";
                                            readonly description: "Second line of the street address";
                                        };
                                        readonly line_3: {
                                            readonly type: "string";
                                            readonly description: "Third line of the street address";
                                            readonly maximum: 35;
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "City or Suburb";
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly description: "Postal code.";
                                        };
                                        readonly country_alpha2: {
                                            readonly type: "string";
                                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                        };
                                        readonly company_name: {
                                            readonly type: "string";
                                            readonly description: "The company or organization at the address";
                                        };
                                        readonly contact_name: {
                                            readonly type: "string";
                                            readonly description: "The full name of a person at the address";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly status: {
                    readonly type: "string";
                    readonly default: "active";
                    readonly enum: readonly ["active", "inactive"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by address status";
                };
                readonly default_addresses: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Select default addresses or not";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Addresses";
            readonly additionalProperties: false;
            readonly properties: {
                readonly addresses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Address object for Addresses API";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Address ID";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["active", "inactive"];
                                readonly description: "Status of the address\n\n`active` `inactive`";
                            };
                            readonly line_1: {
                                readonly type: "string";
                                readonly description: "First line of the street address";
                                readonly maximum: 35;
                            };
                            readonly line_2: {
                                readonly type: "string";
                                readonly description: "Second line of the street address";
                                readonly maximum: 35;
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                readonly maximum: 200;
                            };
                            readonly city: {
                                readonly type: "string";
                                readonly description: "City or Suburb";
                                readonly maximum: 200;
                            };
                            readonly postal_code: {
                                readonly type: "string";
                                readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                            };
                            readonly country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly company_name: {
                                readonly type: "string";
                                readonly description: "The company or organization at the address";
                                readonly maximum: 27;
                            };
                            readonly contact_name: {
                                readonly type: "string";
                                readonly description: "The full name of a person at the address";
                                readonly maximum: 22;
                            };
                            readonly contact_phone: {
                                readonly type: "string";
                                readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                readonly maximum: 20;
                            };
                            readonly contact_email: {
                                readonly type: "string";
                                readonly format: "email";
                                readonly description: "Email address used to reach the person in `contact_name\"";
                                readonly maximum: 50;
                            };
                            readonly default_for: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                                readonly properties: {
                                    readonly billing: {
                                        readonly type: "boolean";
                                        readonly description: "Whether this is the default billing address";
                                    };
                                    readonly sender: {
                                        readonly type: "boolean";
                                        readonly description: "Whether this is the default sender address";
                                    };
                                    readonly pickup: {
                                        readonly type: "boolean";
                                        readonly description: "Whether this is the default pickup address";
                                    };
                                    readonly return: {
                                        readonly type: "boolean";
                                        readonly description: "Whether this is the default return address";
                                    };
                                };
                            };
                            readonly hk_district: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly description: "Details of the district for an address in Hong Kong. Display only applicable for addresses in Hong Kong.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                    };
                                    readonly area: {
                                        readonly type: "string";
                                    };
                                    readonly district: {
                                        readonly type: "string";
                                    };
                                    readonly zone: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly validation: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                        readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                    };
                                    readonly detail: {
                                        readonly type: "string";
                                        readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                    };
                                    readonly comparison: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                        readonly properties: {
                                            readonly pre: {
                                                readonly type: "string";
                                                readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                            };
                                            readonly post: {
                                                readonly type: "string";
                                                readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                            };
                                            readonly changes: {
                                                readonly type: "string";
                                                readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                                readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                            };
                                        };
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "The validated address as sourced from validation service";
                                        readonly properties: {
                                            readonly line_1: {
                                                readonly type: "string";
                                                readonly description: "First line of the street address";
                                            };
                                            readonly line_2: {
                                                readonly type: "string";
                                                readonly description: "Second line of the street address";
                                            };
                                            readonly line_3: {
                                                readonly type: "string";
                                                readonly description: "Third line of the street address";
                                                readonly maximum: 35;
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "City or Suburb";
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly description: "Postal code.";
                                            };
                                            readonly country_alpha2: {
                                                readonly type: "string";
                                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                            };
                                            readonly company_name: {
                                                readonly type: "string";
                                                readonly description: "The company or organization at the address";
                                            };
                                            readonly contact_name: {
                                                readonly type: "string";
                                                readonly description: "The full name of a person at the address";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressesUpdate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["city", "company_name", "contact_email", "contact_name", "contact_phone", "country_alpha2", "line_1"];
        readonly properties: {
            readonly line_1: {
                readonly type: "string";
                readonly description: "First line of the street address";
                readonly maximum: 35;
                readonly examples: readonly ["Jalan Jawa"];
            };
            readonly line_2: {
                readonly type: "string";
                readonly description: "Second line of the street address";
                readonly maximum: 35;
            };
            readonly state: {
                readonly type: "string";
                readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                readonly maximum: 200;
            };
            readonly city: {
                readonly type: "string";
                readonly description: "City or Suburb";
                readonly maximum: 200;
            };
            readonly postal_code: {
                readonly type: "string";
                readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
            };
            readonly country_alpha2: {
                readonly type: "string";
                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
            };
            readonly company_name: {
                readonly type: "string";
                readonly description: "The company or organization at the address";
                readonly maximum: 27;
            };
            readonly contact_name: {
                readonly type: "string";
                readonly description: "The full name of a person at the address";
                readonly maximum: 22;
            };
            readonly contact_phone: {
                readonly type: "string";
                readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                readonly maximum: 20;
            };
            readonly contact_email: {
                readonly type: "string";
                readonly format: "email";
                readonly description: "Email address used to reach the person in `contact_name\"";
                readonly maximum: 50;
            };
            readonly default_for: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                readonly properties: {
                    readonly pickup: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                    readonly billing: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                    readonly sender: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                    readonly return: {
                        readonly type: "boolean";
                        readonly enum: readonly [true];
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly address_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Address ID";
                };
            };
            readonly required: readonly ["address_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Address details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly address: {
                    readonly type: "object";
                    readonly description: "Address object for Addresses API";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Address ID";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["active", "inactive"];
                            readonly description: "Status of the address\n\n`active` `inactive`";
                        };
                        readonly line_1: {
                            readonly type: "string";
                            readonly description: "First line of the street address";
                            readonly maximum: 35;
                        };
                        readonly line_2: {
                            readonly type: "string";
                            readonly description: "Second line of the street address";
                            readonly maximum: 35;
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                            readonly maximum: 200;
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly description: "City or Suburb";
                            readonly maximum: 200;
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                        };
                        readonly country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly company_name: {
                            readonly type: "string";
                            readonly description: "The company or organization at the address";
                            readonly maximum: 27;
                        };
                        readonly contact_name: {
                            readonly type: "string";
                            readonly description: "The full name of a person at the address";
                            readonly maximum: 22;
                        };
                        readonly contact_phone: {
                            readonly type: "string";
                            readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                            readonly maximum: 20;
                        };
                        readonly contact_email: {
                            readonly type: "string";
                            readonly format: "email";
                            readonly description: "Email address used to reach the person in `contact_name\"";
                            readonly maximum: 50;
                        };
                        readonly default_for: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                            readonly properties: {
                                readonly billing: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default billing address";
                                };
                                readonly sender: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default sender address";
                                };
                                readonly pickup: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default pickup address";
                                };
                                readonly return: {
                                    readonly type: "boolean";
                                    readonly description: "Whether this is the default return address";
                                };
                            };
                        };
                        readonly hk_district: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "Details of the district for an address in Hong Kong. Display only applicable for addresses in Hong Kong.";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                };
                                readonly area: {
                                    readonly type: "string";
                                };
                                readonly district: {
                                    readonly type: "string";
                                };
                                readonly zone: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly validation: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                    readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                };
                                readonly detail: {
                                    readonly type: "string";
                                    readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                };
                                readonly comparison: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                    readonly properties: {
                                        readonly pre: {
                                            readonly type: "string";
                                            readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                            readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                        };
                                        readonly post: {
                                            readonly type: "string";
                                            readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                            readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                        };
                                        readonly changes: {
                                            readonly type: "string";
                                            readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                            readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                        };
                                    };
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "The validated address as sourced from validation service";
                                    readonly properties: {
                                        readonly line_1: {
                                            readonly type: "string";
                                            readonly description: "First line of the street address";
                                        };
                                        readonly line_2: {
                                            readonly type: "string";
                                            readonly description: "Second line of the street address";
                                        };
                                        readonly line_3: {
                                            readonly type: "string";
                                            readonly description: "Third line of the street address";
                                            readonly maximum: 35;
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "City or Suburb";
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly description: "Postal code.";
                                        };
                                        readonly country_alpha2: {
                                            readonly type: "string";
                                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                        };
                                        readonly company_name: {
                                            readonly type: "string";
                                            readonly description: "The company or organization at the address";
                                        };
                                        readonly contact_name: {
                                            readonly type: "string";
                                            readonly description: "The full name of a person at the address";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressesValidation: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["line_1", "city", "country_alpha2"];
        readonly properties: {
            readonly company_name: {
                readonly type: "string";
                readonly description: "The company or organization at the address";
                readonly maximum: 27;
                readonly examples: readonly ["Guava Technology"];
            };
            readonly line_1: {
                readonly type: "string";
                readonly description: "First line of the street address";
                readonly maximum: 35;
            };
            readonly line_2: {
                readonly type: "string";
                readonly description: "Second line of the street address";
                readonly maximum: 35;
            };
            readonly state: {
                readonly type: "string";
                readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                readonly maximum: 200;
            };
            readonly city: {
                readonly type: "string";
                readonly description: "City or Suburb";
                readonly maximum: 200;
            };
            readonly postal_code: {
                readonly type: "string";
                readonly description: "Postal code.";
            };
            readonly country_alpha2: {
                readonly type: "string";
                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
            };
            readonly replace_with_validation_result: {
                readonly type: "boolean";
                readonly default: false;
                readonly description: "Override user's address with the address validation results";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Address validation details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly address: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly company_name: {
                            readonly type: "string";
                            readonly description: "The company or organization at the address";
                            readonly maximum: 27;
                        };
                        readonly line_1: {
                            readonly type: "string";
                            readonly description: "First line of the street address";
                            readonly maximum: 35;
                        };
                        readonly line_2: {
                            readonly type: "string";
                            readonly description: "Second line of the street address";
                            readonly maximum: 35;
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                            readonly maximum: 200;
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly description: "City or Suburb";
                            readonly maximum: 200;
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly description: "Postal code.";
                        };
                        readonly country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly validation: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                    readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                };
                                readonly detail: {
                                    readonly type: "string";
                                    readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                };
                                readonly comparison: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                    readonly properties: {
                                        readonly pre: {
                                            readonly type: "string";
                                            readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                            readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                        };
                                        readonly post: {
                                            readonly type: "string";
                                            readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                            readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                        };
                                        readonly changes: {
                                            readonly type: "string";
                                            readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                            readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                        };
                                    };
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "The validated address as sourced from validation service";
                                    readonly properties: {
                                        readonly line_1: {
                                            readonly type: "string";
                                            readonly description: "First line of the street address";
                                        };
                                        readonly line_2: {
                                            readonly type: "string";
                                            readonly description: "Second line of the street address";
                                        };
                                        readonly line_3: {
                                            readonly type: "string";
                                            readonly description: "Third line of the street address";
                                            readonly maximum: 35;
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "City or Suburb";
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly description: "Postal code.";
                                        };
                                        readonly country_alpha2: {
                                            readonly type: "string";
                                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                        };
                                        readonly company_name: {
                                            readonly type: "string";
                                            readonly description: "The company or organization at the address";
                                        };
                                        readonly contact_name: {
                                            readonly type: "string";
                                            readonly description: "The full name of a person at the address";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AnalyticsSaleChannelsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly from_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
            };
            readonly required: readonly ["from_date", "to_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Summary Analytics Sale Channels Data";
            readonly additionalProperties: false;
            readonly properties: {
                readonly analytics_sale_channels: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly from_date: {
                            readonly type: "string";
                            readonly description: "Start date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-01-01T00:00:00.000Z"];
                        };
                        readonly to_date: {
                            readonly type: "string";
                            readonly description: "End date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-02-28T23:59:59.999Z"];
                        };
                        readonly total_shipments_count: {
                            readonly type: "integer";
                        };
                        readonly channels: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Channel name";
                                    };
                                    readonly shipments_count: {
                                        readonly type: "integer";
                                        readonly description: "Number of shipments for a specific channel";
                                    };
                                    readonly percentage: {
                                        readonly type: "number";
                                        readonly description: "Percentage of shipments for a specific channel";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AnalyticsShipmentShippedIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly from_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
            };
            readonly required: readonly ["from_date", "to_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Summary Analytics Shipment Has Ever Shipped Data";
            readonly additionalProperties: false;
            readonly properties: {
                readonly analytics_shipments_shipped: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly required: readonly ["from_date", "to_date"];
                    readonly properties: {
                        readonly from_date: {
                            readonly type: "string";
                            readonly description: "Start date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-01-01T00:00:00.000Z"];
                        };
                        readonly to_date: {
                            readonly type: "string";
                            readonly description: "End date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-02-28T23:59:59.999Z"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly has_ever_shipped: {
                            readonly type: "boolean";
                            readonly description: "Whether the company has ever shipped";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AnalyticsShipmentStatusIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly from_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
            };
            readonly required: readonly ["from_date", "to_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Summary Analytics Shipment Status Data";
            readonly additionalProperties: false;
            readonly properties: {
                readonly analytics_shipment_status: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly from_date: {
                            readonly type: "string";
                            readonly description: "Start date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-01-01T00:00:00.000Z"];
                        };
                        readonly to_date: {
                            readonly type: "string";
                            readonly description: "End date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-02-28T23:59:59.999Z"];
                        };
                        readonly in_progress_shipments_count: {
                            readonly type: "integer";
                            readonly description: "Total number of `in progress` shipments during report period";
                        };
                        readonly completed_shipments_count: {
                            readonly type: "integer";
                            readonly description: "Total number of completed shipments during report period";
                        };
                        readonly in_progress_shipments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                        readonly description: "Shipment status";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly description: "Number of shipments with a specific status";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AnalyticsShipmentsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly from_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
            };
            readonly required: readonly ["from_date", "to_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Summary Analytics Shipments";
            readonly additionalProperties: false;
            readonly properties: {
                readonly analytics_shipments: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly required: readonly ["from_date", "to_date"];
                    readonly properties: {
                        readonly from_date: {
                            readonly type: "string";
                            readonly description: "Start date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-01-01T00:00:00.000Z"];
                        };
                        readonly to_date: {
                            readonly type: "string";
                            readonly description: "End date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-02-28T23:59:59.999Z"];
                        };
                        readonly total_shipments_count: {
                            readonly type: "integer";
                        };
                        readonly shipments_count_by_date: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly max: {
                                    readonly type: "integer";
                                    readonly minimum: 1;
                                    readonly maximum: 99999;
                                };
                                readonly data: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly key: {
                                            readonly type: "string";
                                        };
                                        readonly values: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly series: {
                                                        readonly type: "integer";
                                                    };
                                                    readonly datetime_int: {
                                                        readonly type: "integer";
                                                        readonly description: "Time in epoch format";
                                                    };
                                                    readonly total: {
                                                        readonly type: "integer";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AnalyticsTopCouriersIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly from_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
            };
            readonly required: readonly ["from_date", "to_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Summary Analytics Top Courier Data";
            readonly additionalProperties: false;
            readonly properties: {
                readonly analytics_top_couriers: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly from_date: {
                            readonly type: "string";
                            readonly description: "Start date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-01-01T00:00:00.000Z"];
                        };
                        readonly to_date: {
                            readonly type: "string";
                            readonly description: "End date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-02-28T23:59:59.999Z"];
                        };
                        readonly total_shipments_count: {
                            readonly type: "integer";
                        };
                        readonly couriers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Courier name";
                                    };
                                    readonly shipments_count: {
                                        readonly type: "integer";
                                        readonly description: "Number of shipments for a specific courier";
                                    };
                                    readonly percentage: {
                                        readonly type: "number";
                                        readonly description: "Percentage of shipments for a specific courier";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AnalyticsTopShipmentsDestinationsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly from_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
            };
            readonly required: readonly ["from_date", "to_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Summary Analytics Shipments Top Destinations";
            readonly additionalProperties: false;
            readonly properties: {
                readonly analytics_top_shipments_destinations: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly from_date: {
                            readonly type: "string";
                            readonly description: "Start date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-01-01T00:00:00.000Z"];
                        };
                        readonly to_date: {
                            readonly type: "string";
                            readonly description: "End date of the report period";
                            readonly format: "date-time";
                            readonly examples: readonly ["2023-02-28T23:59:59.999Z"];
                        };
                        readonly total_shipments_count: {
                            readonly type: "integer";
                        };
                        readonly shipments_count_by_zone: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Zone name";
                                    };
                                    readonly shipments_count: {
                                        readonly type: "integer";
                                        readonly description: "Shipments count";
                                    };
                                };
                            };
                        };
                        readonly shipments_count_by_country: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Country name";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly shipments_count: {
                                        readonly type: "integer";
                                        readonly description: "Shipments count";
                                    };
                                    readonly percentage: {
                                        readonly type: "number";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AppAccessCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["app_name"];
        readonly properties: {
            readonly app_name: {
                readonly type: "string";
                readonly enum: readonly ["lyoc"];
                readonly examples: readonly ["lyoc"];
            };
            readonly redirect_back_url: {
                readonly type: "string";
                readonly format: "uri";
                readonly description: "Specifies the URL to which the user should be redirected when the connection needs to be completed in the courier's portal (for example, Canada Post or AU Post MyPost Business). This ensures the user can return to the app seamlessly after the external interaction.";
                readonly examples: readonly ["https://example.com"];
            };
            readonly target: {
                readonly type: "string";
                readonly description: "Certain apps allow their own target paths\n\nApp Name: lyoc\nAvailable Targets:\n  \n  - couriers: /couriers\n  \n";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "App access";
            readonly additionalProperties: false;
            readonly properties: {
                readonly app_access: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "App Access redirect URL with one time token";
                        };
                        readonly expires_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Expiry time for URI";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssetActivateCreate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Asset ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssetDeactivateCreate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Asset ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssetsCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["type", "file"];
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["logo", "tracking_page_ad", "tracking_email_ad"];
                readonly description: "Asset type";
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Asset name";
                readonly maxLength: 50;
            };
            readonly file: {
                readonly type: "string";
                readonly format: "binary";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "List all assets";
            readonly additionalProperties: false;
            readonly properties: {
                readonly assets: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["logo", "tracking_page_ad", "tracking_email_ad"];
                                readonly description: "Asset type\n\n`logo` `tracking_page_ad` `tracking_email_ad`";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Asset name";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly format: "uri";
                                readonly description: "Asset link";
                                readonly examples: readonly ["https://s3.amazonaws.com/test/assets/0001/logo/6c8e/main.png?1645532460"];
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssetsDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Asset ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssetsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly sort_by: {
                    readonly type: "string";
                    readonly enum: readonly ["type", "created_at"];
                    readonly examples: readonly ["created_at"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort records by listed columns. Default: `created_at`";
                };
                readonly sort_direction: {
                    readonly type: "string";
                    readonly enum: readonly ["ASC", "DESC"];
                    readonly examples: readonly ["ASC"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Set the sort direction. Default: `DESC`";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["logo", "tracking_email_ad", "tracking_page_ad"];
                    readonly examples: readonly ["logo"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by asset type";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List all assets";
            readonly additionalProperties: false;
            readonly properties: {
                readonly assets: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["logo", "tracking_page_ad", "tracking_email_ad"];
                                readonly description: "Asset type\n\n`logo` `tracking_page_ad` `tracking_email_ad`";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Asset name";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly format: "uri";
                                readonly description: "Asset link";
                                readonly examples: readonly ["https://s3.amazonaws.com/test/assets/0001/logo/6c8e/main.png?1645532460"];
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssetsUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Asset name";
                readonly maxLength: 50;
                readonly examples: readonly ["Asset name"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Asset ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Asset details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly asset: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["logo", "tracking_page_ad", "tracking_email_ad"];
                            readonly description: "Asset type\n\n`logo` `tracking_page_ad` `tracking_email_ad`";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Asset name";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "Asset link";
                            readonly examples: readonly ["https://s3.amazonaws.com/test/assets/0001/logo/6c8e/main.png?1645532460"];
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BatchAddressesCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Batch Addresses Create";
        readonly additionalProperties: false;
        readonly required: readonly ["addresses"];
        readonly properties: {
            readonly defaults: {
                readonly type: "object";
                readonly description: "Default settings for each address (can be override on the individual address)";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                    };
                    readonly validate: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "Whether the company validates the address they want to create";
                    };
                    readonly replace_with_validation_result: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "Override user's address with the address validation results";
                    };
                };
            };
            readonly addresses: {
                readonly type: "array";
                readonly minItems: 1;
                readonly maxItems: 1000;
                readonly items: {
                    readonly type: "object";
                    readonly description: "Address";
                    readonly additionalProperties: false;
                    readonly required: readonly ["city", "contact_name", "contact_phone", "line_1", "postal_code", "state"];
                    readonly properties: {
                        readonly city: {
                            readonly type: "string";
                            readonly description: "City or Suburb";
                            readonly maximum: 200;
                        };
                        readonly company_name: {
                            readonly type: "string";
                            readonly description: "The company or organization at the address";
                            readonly maximum: 27;
                        };
                        readonly contact_email: {
                            readonly type: "string";
                            readonly format: "email";
                            readonly description: "Email address used to reach the person in `contact_name\"";
                            readonly maximum: 50;
                        };
                        readonly contact_name: {
                            readonly type: "string";
                            readonly description: "The full name of a person at the address";
                            readonly maximum: 22;
                        };
                        readonly contact_phone: {
                            readonly type: "string";
                            readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                            readonly maximum: 20;
                        };
                        readonly country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly line_1: {
                            readonly type: "string";
                            readonly description: "First line of the street address";
                            readonly maximum: 35;
                        };
                        readonly line_2: {
                            readonly type: "string";
                            readonly description: "Second line of the street address";
                            readonly maximum: 35;
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                        };
                        readonly reference_id: {
                            readonly type: "string";
                            readonly description: "Reference ID";
                            readonly maximum: 36;
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                            readonly maximum: 200;
                        };
                        readonly validate: {
                            readonly type: "boolean";
                            readonly description: "Whether the company validates the address they want to create";
                        };
                        readonly replace_with_validation_result: {
                            readonly type: "boolean";
                            readonly default: false;
                            readonly description: "Override user's address with the address validation results";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "202": {
            readonly type: "object";
            readonly description: "Batch";
            readonly additionalProperties: false;
            readonly properties: {
                readonly batch: {
                    readonly type: "object";
                    readonly description: "Batch Detail";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Batch ID";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Batch state\n\n`created` `processing` `processed` `failed`";
                            readonly enum: readonly ["created", "processing", "processed", "failed"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Batch type\n\n`shipment_batch` `address_batch` `label_batch`";
                            readonly enum: readonly ["shipment_batch", "address_batch", "label_batch"];
                        };
                        readonly started_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly finished_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly total_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items total count";
                        };
                        readonly failed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items failed count";
                        };
                        readonly processed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processed count";
                        };
                        readonly processing_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processing count";
                        };
                        readonly created_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items created count";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BatchItemsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly batch_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Batch ID";
                };
            };
            readonly required: readonly ["batch_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Batches";
            readonly additionalProperties: false;
            readonly properties: {
                readonly batch_items: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Batch Item";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Batch Item ID";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Batch Item type\n\n`address_batch_item` `shipment_batch_item` `label_batch_item`";
                                readonly enum: readonly ["address_batch_item", "shipment_batch_item", "label_batch_item"];
                            };
                            readonly reference_id: {
                                readonly type: "string";
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Batch state\n\n`created` `processing` `processed` `failed`";
                                readonly enum: readonly ["created", "processing", "processed", "failed"];
                            };
                            readonly record_type: {
                                readonly type: "string";
                            };
                            readonly record_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                            readonly processing_errors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly finished_at: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BatchLabelsCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Batch Labels Create";
        readonly additionalProperties: false;
        readonly required: readonly ["shipments"];
        readonly properties: {
            readonly shipments: {
                readonly type: "array";
                readonly minItems: 1;
                readonly maxItems: 1000;
                readonly items: {
                    readonly type: "object";
                    readonly description: "Shipment";
                    readonly additionalProperties: false;
                    readonly required: readonly ["easyship_shipment_id"];
                    readonly properties: {
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly courier_service_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Courier service ID in case you need to overwrite the one suggested by default";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "202": {
            readonly type: "object";
            readonly description: "Batch";
            readonly additionalProperties: false;
            readonly properties: {
                readonly batch: {
                    readonly type: "object";
                    readonly description: "Batch Detail";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Batch ID";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Batch state\n\n`created` `processing` `processed` `failed`";
                            readonly enum: readonly ["created", "processing", "processed", "failed"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Batch type\n\n`shipment_batch` `address_batch` `label_batch`";
                            readonly enum: readonly ["shipment_batch", "address_batch", "label_batch"];
                        };
                        readonly started_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly finished_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly total_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items total count";
                        };
                        readonly failed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items failed count";
                        };
                        readonly processed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processed count";
                        };
                        readonly processing_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processing count";
                        };
                        readonly created_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items created count";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BatchShipmentsCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Batch Shipments Create";
        readonly additionalProperties: false;
        readonly properties: {
            readonly defaults: {
                readonly type: "object";
                readonly description: "Default settings for each shipment (can be override on the individual shipment)";
                readonly additionalProperties: false;
                readonly required: readonly ["origin_address_id", "sender_address_id", "return_address_id"];
                readonly properties: {
                    readonly origin_address_id: {
                        readonly type: "string";
                        readonly format: "uuid";
                    };
                    readonly sender_address_id: {
                        readonly type: "string";
                        readonly format: "uuid";
                    };
                    readonly return_address_id: {
                        readonly type: "string";
                        readonly format: "uuid";
                    };
                    readonly incoterms: {
                        readonly description: "Terms of Sale";
                        readonly type: "string";
                        readonly enum: readonly ["DDU", "DDP", any];
                        readonly default: "DDU";
                    };
                    readonly regulatory_identifiers: {
                        readonly type: "object";
                        readonly description: "Seller's identifiers for various tax, import and export regulations.";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly eori: {
                                readonly type: "string";
                                readonly description: "Economic Operators Registration and Identification (EORI) number.";
                            };
                            readonly ioss: {
                                readonly type: "string";
                                readonly description: "Import One Stop Shop (IOSS) number.";
                            };
                            readonly vat_number: {
                                readonly type: "string";
                                readonly description: "Value-Added Tax (VAT) number.";
                            };
                        };
                    };
                    readonly buyer_regulatory_identifiers: {
                        readonly type: "object";
                        readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly ein: {
                                readonly type: "string";
                                readonly description: "Employer Identification Number (EIN) number.";
                            };
                            readonly vat_number: {
                                readonly type: "string";
                                readonly description: "Value-Added Tax (VAT) number.";
                            };
                            readonly ssn: {
                                readonly type: "string";
                                readonly description: "Social Security Number (SSN) number.";
                            };
                        };
                    };
                    readonly courier_settings: {
                        readonly type: "object";
                        readonly properties: {
                            readonly courier_service_id: {
                                readonly type: "string";
                                readonly description: "Select a specific courier service to create the shipment with (applies if you integrate with the Rates API).";
                            };
                            readonly allow_fallback: {
                                readonly type: "boolean";
                                readonly default: false;
                                readonly description: "If `courier_service_id` is provided but the courier can’t be selected, allow the shipment to be created and the next best rate to be selected. Default: `false`. When false and rates for the `courier_service_id` can't be found, an error will be raised and the shipment won’t be created.";
                            };
                            readonly apply_shipping_rules: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Apply any [shipping rules](https://support.easyship.com/hc/en-us/articles/115003580152-Automate-Shipping-Process-Shipping-Rules) created on the Easyship dashboard (Default: `true`)";
                            };
                            readonly list_unavailable_services: {
                                readonly type: "boolean";
                                readonly description: "Setting this option will return detailed information with reasons for each courier in the response.";
                            };
                        };
                    };
                    readonly shipping_settings: {
                        readonly type: "object";
                        readonly properties: {
                            readonly additional_services: {
                                readonly type: "object";
                                readonly description: "Configuration for additional services";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly delivery_confirmation: {
                                        readonly description: "Currently officially supported only for selected customers. **Subject to change.**";
                                        readonly type: "string";
                                        readonly enum: readonly ["ups_delivery_confirmation_adult_signature_required", "ups_delivery_confirmation_signature_required"];
                                    };
                                    readonly qr_code: {
                                        readonly type: "string";
                                        readonly description: "Generate QR code when generating label. If a courier does not support it, label will be generated without the QR code. Currently officially supported only for USPS courier. **Subject to change.**";
                                        readonly default: "none";
                                        readonly enum: readonly ["qr_code", "qr_code_with_label", "none"];
                                    };
                                };
                            };
                            readonly units: {
                                readonly type: "object";
                                readonly description: "Units";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly weight: {
                                        readonly type: "string";
                                        readonly description: "Unit of weight values provided. Options: `kg` / `g` / `lb` / `oz` (Default: `kg`). Unit of values in the response will be in `kg`.";
                                        readonly default: "kg";
                                        readonly enum: readonly ["kg", "g", "lb", "oz"];
                                    };
                                    readonly dimensions: {
                                        readonly type: "string";
                                        readonly description: "Unit of dimension values provided. Options: `cm` / `in` (Default: `cm`) Unit of values in the response will be in `cm`.";
                                        readonly default: "cm";
                                        readonly enum: readonly ["cm", "in"];
                                    };
                                };
                            };
                            readonly buy_label: {
                                readonly type: "boolean";
                                readonly default: false;
                                readonly description: "Create a shipment and buy the label in a single API call instead of two. Default: `false`.";
                            };
                            readonly b13a_filing: {
                                readonly type: "object";
                                readonly description: "B13A filing (currently available only for FedEx)";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly option: {
                                        readonly type: "string";
                                        readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                    };
                                    readonly option_export_compliance_statement: {
                                        readonly type: "string";
                                        readonly description: "Export compliance statement";
                                    };
                                    readonly permit_number: {
                                        readonly type: "string";
                                        readonly description: "Permit number";
                                    };
                                };
                            };
                            readonly printing_options: {
                                readonly type: "object";
                                readonly description: "Specify the format and page sizes of the shipping documents. This will only be taken into account if buy_label_synchronous is `true`.";
                                readonly properties: {
                                    readonly format: {
                                        readonly type: "string";
                                        readonly description: "Options: `png`, `pdf`, `url`, `zpl` (Default: `png`)";
                                        readonly default: "png";
                                        readonly enum: readonly ["png", "pdf", "url", "zpl"];
                                    };
                                    readonly label: {
                                        readonly type: "string";
                                        readonly description: "Label page size. Options: `4x6` / `A4` / `A5` (Default: `4x6`)";
                                        readonly default: "4x6";
                                        readonly enum: readonly ["4x6", "A4", "A5"];
                                    };
                                    readonly commercial_invoice: {
                                        readonly type: "string";
                                        readonly description: "Commercial invoice page size. Options: `4x6` / `A4` (Default: `A4`)";
                                        readonly default: "A4";
                                        readonly enum: readonly ["4x6", "A4"];
                                    };
                                    readonly packing_slip: {
                                        readonly type: "string";
                                        readonly description: "Packing slip page size. Options: `4x6` / `A4` (Default: `4x6`)";
                                        readonly default: "4x6";
                                        readonly enum: readonly ["4x6", "A4", "none"];
                                    };
                                    readonly remarks: {
                                        readonly type: "string";
                                        readonly maxLength: 70;
                                        readonly description: "Customized commercial invoice remarks for current shipment. It has higher priority than remarks from company settings.";
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly shipments: {
                readonly type: "array";
                readonly minItems: 1;
                readonly maxItems: 1000;
                readonly items: {
                    readonly type: "object";
                    readonly description: "Shipment";
                    readonly additionalProperties: false;
                    readonly required: readonly ["destination_address", "parcels"];
                    readonly properties: {
                        readonly origin_address_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly sender_address_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly return_address_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly destination_address: {
                            readonly required: readonly ["line_1", "state", "city", "postal_code", "contact_name", "contact_email"];
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly maximum: 200;
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name`";
                                    readonly maximum: 50;
                                };
                                readonly delivery_instructions: {
                                    readonly type: "string";
                                    readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                    readonly maximum: 200;
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                            readonly additionalProperties: true;
                        };
                        readonly set_as_residential: {
                            readonly type: "boolean";
                            readonly description: "This is automatically validated for US addresses. If specified, validation is bypassed.";
                        };
                        readonly consignee_tax_id: {
                            readonly type: "string";
                            readonly description: "The consignee's tax identification number or EIN. This is required for customs clearance when shipping to certain countries, such as China and Brazil.";
                        };
                        readonly eei_reference: {
                            readonly type: "string";
                            readonly description: "The Electronic Export Identifier (EEI). This is required when shipping goods over USD2500 in value (Applies to US-outbound shipments only).";
                        };
                        readonly regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Seller's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly eori: {
                                    readonly type: "string";
                                    readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                };
                                readonly ioss: {
                                    readonly type: "string";
                                    readonly description: "Import One Stop Shop (IOSS) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                            };
                        };
                        readonly buyer_regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly ein: {
                                    readonly type: "string";
                                    readonly description: "Employer Identification Number (EIN) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                                readonly ssn: {
                                    readonly type: "string";
                                    readonly description: "Social Security Number (SSN) number.";
                                };
                            };
                        };
                        readonly incoterms: {
                            readonly description: "Terms of Sale";
                            readonly type: "string";
                            readonly enum: readonly ["DDU", "DDP", any];
                            readonly default: "DDU";
                        };
                        readonly insurance: {
                            readonly type: "object";
                            readonly description: "Insurance";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly is_insured: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                    readonly default: false;
                                };
                                readonly insured_amount: {
                                    readonly type: "number";
                                    readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                };
                                readonly insured_currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                    readonly examples: readonly ["USD"];
                                };
                            };
                        };
                        readonly order_data: {
                            readonly type: "object";
                            readonly description: "Free-form data related to the eCommerce platform";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly platform_name: {
                                    readonly type: "string";
                                    readonly description: "A display-ready sales channel or platform name";
                                    readonly maximum: 200;
                                };
                                readonly platform_order_number: {
                                    readonly type: "string";
                                    readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                    readonly maximum: 200;
                                };
                                readonly order_created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                };
                                readonly order_tag_list: {
                                    readonly type: "array";
                                    readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly maxItems: 500;
                                };
                                readonly seller_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                };
                                readonly buyer_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                };
                                readonly buyer_selected_courier_name: {
                                    readonly type: "string";
                                    readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                };
                            };
                        };
                        readonly courier_settings: {
                            readonly type: "object";
                            readonly properties: {
                                readonly courier_service_id: {
                                    readonly type: "string";
                                    readonly description: "Select a specific courier service to create the shipment with (applies if you integrate with the Rates API).";
                                };
                                readonly allow_fallback: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                    readonly description: "If `courier_service_id` is provided but the courier can’t be selected, allow the shipment to be created and the next best rate to be selected. Default: `false`. When false and rates for the `courier_service_id` can't be found, an error will be raised and the shipment won’t be created.";
                                };
                                readonly apply_shipping_rules: {
                                    readonly type: "boolean";
                                    readonly default: true;
                                    readonly description: "Apply any [shipping rules](https://support.easyship.com/hc/en-us/articles/115003580152-Automate-Shipping-Process-Shipping-Rules) created on the Easyship dashboard (Default: `true`)";
                                };
                                readonly list_unavailable_services: {
                                    readonly type: "boolean";
                                    readonly description: "Setting this option will return detailed information with reasons for each courier in the response.";
                                };
                            };
                        };
                        readonly shipping_settings: {
                            readonly type: "object";
                            readonly properties: {
                                readonly additional_services: {
                                    readonly type: "object";
                                    readonly description: "Configuration for additional services";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly delivery_confirmation: {
                                            readonly description: "Currently officially supported only for selected customers. **Subject to change.**";
                                            readonly type: "string";
                                            readonly enum: readonly ["ups_delivery_confirmation_adult_signature_required", "ups_delivery_confirmation_signature_required"];
                                        };
                                        readonly qr_code: {
                                            readonly type: "string";
                                            readonly description: "Generate QR code when generating label. If a courier does not support it, label will be generated without the QR code. Currently officially supported only for USPS courier. **Subject to change.**";
                                            readonly default: "none";
                                            readonly enum: readonly ["qr_code", "qr_code_with_label", "none"];
                                        };
                                    };
                                };
                                readonly units: {
                                    readonly type: "object";
                                    readonly description: "Units";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly weight: {
                                            readonly type: "string";
                                            readonly description: "Unit of weight values provided. Options: `kg` / `g` / `lb` / `oz` (Default: `kg`). Unit of values in the response will be in `kg`.";
                                            readonly default: "kg";
                                            readonly enum: readonly ["kg", "g", "lb", "oz"];
                                        };
                                        readonly dimensions: {
                                            readonly type: "string";
                                            readonly description: "Unit of dimension values provided. Options: `cm` / `in` (Default: `cm`) Unit of values in the response will be in `cm`.";
                                            readonly default: "cm";
                                            readonly enum: readonly ["cm", "in"];
                                        };
                                    };
                                };
                                readonly buy_label: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                    readonly description: "Create a shipment and buy the label in a single API call instead of two. Default: `false`.";
                                };
                                readonly b13a_filing: {
                                    readonly type: "object";
                                    readonly description: "B13A filing (currently available only for FedEx)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly option: {
                                            readonly type: "string";
                                            readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                        };
                                        readonly option_export_compliance_statement: {
                                            readonly type: "string";
                                            readonly description: "Export compliance statement";
                                        };
                                        readonly permit_number: {
                                            readonly type: "string";
                                            readonly description: "Permit number";
                                        };
                                    };
                                };
                                readonly printing_options: {
                                    readonly type: "object";
                                    readonly description: "Specify the format and page sizes of the shipping documents. This will only be taken into account if buy_label_synchronous is `true`.";
                                    readonly properties: {
                                        readonly format: {
                                            readonly type: "string";
                                            readonly description: "Options: `png`, `pdf`, `url`, `zpl` (Default: `png`)";
                                            readonly default: "png";
                                            readonly enum: readonly ["png", "pdf", "url", "zpl"];
                                        };
                                        readonly label: {
                                            readonly type: "string";
                                            readonly description: "Label page size. Options: `4x6` / `A4` / `A5` (Default: `4x6`)";
                                            readonly default: "4x6";
                                            readonly enum: readonly ["4x6", "A4", "A5"];
                                        };
                                        readonly commercial_invoice: {
                                            readonly type: "string";
                                            readonly description: "Commercial invoice page size. Options: `4x6` / `A4` (Default: `A4`)";
                                            readonly default: "A4";
                                            readonly enum: readonly ["4x6", "A4"];
                                        };
                                        readonly packing_slip: {
                                            readonly type: "string";
                                            readonly description: "Packing slip page size. Options: `4x6` / `A4` (Default: `4x6`)";
                                            readonly default: "4x6";
                                            readonly enum: readonly ["4x6", "A4", "none"];
                                        };
                                        readonly remarks: {
                                            readonly type: "string";
                                            readonly maxLength: 70;
                                            readonly description: "Customized commercial invoice remarks for current shipment. It has higher priority than remarks from company settings.";
                                        };
                                    };
                                };
                            };
                        };
                        readonly parcels: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Parcel";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                    };
                                    readonly box: {
                                        readonly type: "object";
                                        readonly description: "The box dimensions for the shipment. If the box dimensions are provided, then dimensions for items are optional.";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly slug: {
                                                readonly type: "string";
                                                readonly description: "Courier or Custom Box Slug. Use the [Boxes API](https://developers.easyship.com/reference/boxes_index) to retrieve a list of available boxes.";
                                            };
                                            readonly length: {
                                                readonly type: "number";
                                                readonly description: "Length of the box";
                                            };
                                            readonly width: {
                                                readonly type: "number";
                                                readonly description: "Width of the box";
                                            };
                                            readonly height: {
                                                readonly type: "number";
                                                readonly description: "Height of the box";
                                            };
                                        };
                                    };
                                    readonly items: {
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly maxItems: 200;
                                        readonly description: "Array of all shipment items";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Shipment Item based on Product";
                                            readonly additionalProperties: false;
                                            readonly required: readonly ["product"];
                                            readonly properties: {
                                                readonly product: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly description: "Product ID. Required if the `sku` is not provided.";
                                                        };
                                                        readonly sku: {
                                                            readonly type: "string";
                                                            readonly description: "Product SKU. Required if the `id` is not provided.";
                                                        };
                                                    };
                                                };
                                                readonly quantity: {
                                                    readonly type: "integer";
                                                    readonly description: "Item quantity";
                                                    readonly default: 1;
                                                };
                                                readonly declared_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly declared_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "202": {
            readonly type: "object";
            readonly description: "Batch";
            readonly additionalProperties: false;
            readonly properties: {
                readonly batch: {
                    readonly type: "object";
                    readonly description: "Batch Detail";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Batch ID";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Batch state\n\n`created` `processing` `processed` `failed`";
                            readonly enum: readonly ["created", "processing", "processed", "failed"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Batch type\n\n`shipment_batch` `address_batch` `label_batch`";
                            readonly enum: readonly ["shipment_batch", "address_batch", "label_batch"];
                        };
                        readonly started_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly finished_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly total_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items total count";
                        };
                        readonly failed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items failed count";
                        };
                        readonly processed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processed count";
                        };
                        readonly processing_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processing count";
                        };
                        readonly created_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items created count";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BatchesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly state: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "processing", "processed", "failed"];
                    readonly examples: readonly ["created"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by state.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["shipment_batch", "address_batch", "label_batch"];
                    readonly examples: readonly ["shipment"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by batch type.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Batches";
            readonly additionalProperties: false;
            readonly properties: {
                readonly batches: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Batch";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Batch ID";
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Batch state\n\n`created` `processing` `processed` `failed`";
                                readonly enum: readonly ["created", "processing", "processed", "failed"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Batch type\n\n`shipment_batch` `address_batch` `label_batch`";
                                readonly enum: readonly ["shipment_batch", "address_batch", "label_batch"];
                            };
                            readonly started_at: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                            readonly finished_at: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BatchesShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly batch_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Batch ID";
                };
            };
            readonly required: readonly ["batch_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Batch";
            readonly additionalProperties: false;
            readonly properties: {
                readonly batch: {
                    readonly type: "object";
                    readonly description: "Batch Detail";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Batch ID";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Batch state\n\n`created` `processing` `processed` `failed`";
                            readonly enum: readonly ["created", "processing", "processed", "failed"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Batch type\n\n`shipment_batch` `address_batch` `label_batch`";
                            readonly enum: readonly ["shipment_batch", "address_batch", "label_batch"];
                        };
                        readonly started_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly finished_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly total_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items total count";
                        };
                        readonly failed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items failed count";
                        };
                        readonly processed_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processed count";
                        };
                        readonly processing_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items processing count";
                        };
                        readonly created_count: {
                            readonly type: "integer";
                            readonly description: "Batch Items created count";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BillingDocumentsDownload: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Billing document ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "404": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BillingDocumentsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly from_date: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["CNUS202400013"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Billing document ID";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["receipt", "invoice", "credit_note", "subscription"];
                    readonly examples: readonly ["invoice"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Document type";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Billing Documents";
            readonly additionalProperties: false;
            readonly properties: {
                readonly billing_documents: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Billing Document";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Billing document ID";
                                readonly examples: readonly ["REUS202400333"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Document type\n\n`receipt` `invoice` `credit_note` `subscription`";
                                readonly enum: readonly ["receipt", "invoice", "credit_note", "subscription"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                            readonly total: {
                                readonly type: "number";
                                readonly description: "Total amount";
                            };
                            readonly date_from: {
                                readonly type: "string";
                                readonly description: "Document generated date range (from). Date format in `YYYY-MM-DD`.";
                            };
                            readonly date_to: {
                                readonly type: "string";
                                readonly description: "Document generated date range (to). Date format in `YYYY-MM-DD`.";
                            };
                            readonly generated_at: {
                                readonly type: "string";
                                readonly description: "Date and time the invoice was created";
                                readonly format: "date-time";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BillingDocumentsTransactionsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Billing document ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly from_date: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly description: "List of Transaction Records";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly transaction_records: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "Transaction Record";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly adjustment_type: {
                                    readonly type: "string";
                                    readonly description: "Type of adjustment\n\n`Refund after Cancellation` `Remote Area Surcharge (ODA Reconciliation)` `Declared Value Revaluation (Tax Reconciliation)` `Adjustment based on Weight (Weight Reconciliation)` `Payment of Tax & Duty on behalf of Consignee` `Return Fees` `Declared Value Revaluation` `Address Correction Fee` `Refund (100%)` `Residential Area Surcharge` `Charge After Refund` `Warehouse Handling Fee` `Refund for Fixed Shipment` `Charge for Fixed Shipment` `Refund (50%)` `Oversized Surcharge` `Refund - Damaged` `Refund - Lost` `Pay On Scan` `Account Consolidation` `Others`";
                                    readonly enum: readonly ["Refund after Cancellation", "Remote Area Surcharge (ODA Reconciliation)", "Declared Value Revaluation (Tax Reconciliation)", "Adjustment based on Weight (Weight Reconciliation)", "Payment of Tax & Duty on behalf of Consignee", "Return Fees", "Declared Value Revaluation", "Address Correction Fee", "Refund (100%)", "Residential Area Surcharge", "Charge After Refund", "Warehouse Handling Fee", "Refund for Fixed Shipment", "Charge for Fixed Shipment", "Refund (50%)", "Oversized Surcharge", "Refund - Damaged", "Refund - Lost", "Pay On Scan", "Account Consolidation", "Others"];
                                };
                                readonly amount: {
                                    readonly type: "number";
                                    readonly description: "Amount of adjustment";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "Description of adjustment";
                                };
                                readonly payment_recipient: {
                                    readonly type: "string";
                                    readonly description: "Recipient of payment";
                                };
                                readonly settled_at: {
                                    readonly type: "string";
                                    readonly description: "Date and time of settlement";
                                    readonly format: "date-time";
                                };
                                readonly easyship_shipment_id: {
                                    readonly type: "string";
                                    readonly pattern: "^ES\\w{2}\\d{7,}$";
                                    readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                                };
                            };
                        };
                    };
                    readonly meta: {
                        readonly type: "object";
                        readonly properties: {
                            readonly pagination: {
                                readonly type: "object";
                                readonly description: "Pagination";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly next: {
                                        readonly type: "integer";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                    };
                                    readonly page: {
                                        readonly type: "integer";
                                        readonly description: "Current page";
                                    };
                                };
                            };
                            readonly request_id: {
                                readonly type: "string";
                                readonly description: "An unique ID represent the request.";
                            };
                        };
                    };
                };
            }, {
                readonly type: "string";
                readonly description: "Transaction Records in CSV format";
            }];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BoxesCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "User-defined details of a box used for shipments";
        readonly additionalProperties: false;
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name";
                readonly examples: readonly ["Wood Box"];
            };
            readonly outer_length: {
                readonly description: "Box length in centimeters. Metric system by default. Enable imperial system via dashboard for inches.";
                readonly type: "number";
            };
            readonly outer_width: {
                readonly description: "Box width in centimeters. Metric system by default. Enable imperial system via dashboard for inches.";
                readonly type: "number";
            };
            readonly outer_height: {
                readonly description: "Box height in centimeters. Metric system by default. Enable imperial system via dashboard for inches.";
                readonly type: "number";
            };
            readonly weight: {
                readonly type: "number";
                readonly description: "The weight of the box (excluding items inside) in kilograms. Metric system by default. Enable imperial system via dashboard for pounds.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Box details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly box: {
                    readonly type: "object";
                    readonly description: "User-defined details of a box used for shipments";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "ID";
                        };
                        readonly courier: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                            };
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name";
                        };
                        readonly slug: {
                            readonly type: "string";
                            readonly description: "Slug";
                        };
                        readonly outer_dimensions: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "A measure of the space taken by the box itself, in cm.";
                            readonly properties: {
                                readonly length: {
                                    readonly type: "number";
                                };
                                readonly width: {
                                    readonly type: "number";
                                };
                                readonly height: {
                                    readonly type: "number";
                                };
                            };
                        };
                        readonly weight: {
                            readonly type: "number";
                            readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Box type.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BoxesDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly box_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Box ID";
                };
            };
            readonly required: readonly ["box_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BoxesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly courier_country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["GB"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by courier country alpha 2";
                };
                readonly courier_umbrella_name: {
                    readonly type: "string";
                    readonly enum: readonly ["Australia Post MyPost Business", "Fastway", "Aramex", "FedEx", "USPS", "UPS"];
                    readonly examples: readonly ["UPS"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by courier umbrella name";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of boxes";
            readonly additionalProperties: false;
            readonly properties: {
                readonly boxes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "User-defined details of a box used for shipments";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "ID";
                            };
                            readonly courier: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly umbrella_name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                };
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name";
                            };
                            readonly slug: {
                                readonly type: "string";
                                readonly description: "Slug";
                            };
                            readonly outer_dimensions: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly description: "A measure of the space taken by the box itself, in cm.";
                                readonly properties: {
                                    readonly length: {
                                        readonly type: "number";
                                    };
                                    readonly width: {
                                        readonly type: "number";
                                    };
                                    readonly height: {
                                        readonly type: "number";
                                    };
                                };
                            };
                            readonly weight: {
                                readonly type: "number";
                                readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Box type.";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BoxesUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly is_active: {
                readonly type: "boolean";
                readonly description: "Box state.";
            };
            readonly auto_selected: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly box_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Box ID";
                };
            };
            readonly required: readonly ["box_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Box details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly box: {
                    readonly type: "object";
                    readonly description: "User-defined details of a box used for shipments";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "ID";
                        };
                        readonly courier: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                            };
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name";
                        };
                        readonly slug: {
                            readonly type: "string";
                            readonly description: "Slug";
                        };
                        readonly outer_dimensions: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly description: "A measure of the space taken by the box itself, in cm.";
                            readonly properties: {
                                readonly length: {
                                    readonly type: "number";
                                };
                                readonly width: {
                                    readonly type: "number";
                                };
                                readonly height: {
                                    readonly type: "number";
                                };
                            };
                        };
                        readonly weight: {
                            readonly type: "number";
                            readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Box type.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CountriesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly continent: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["Africa", "Asia", "Europe", "North America", "Oceania", "Others", "South America"];
                    };
                    readonly examples: readonly ["Asia", "Europe"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by continents.";
                };
                readonly alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["CA", "UK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by country code: Alpha-2 format (ISO 3166-1).";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of countries";
            readonly additionalProperties: false;
            readonly properties: {
                readonly countries: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Country";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "Country ID";
                                readonly examples: readonly [1];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Country name";
                                readonly examples: readonly ["Canada"];
                            };
                            readonly alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CourierCourierServicesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly courier_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Courier ID";
                };
            };
            readonly required: readonly ["courier_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly sort_by: {
                    readonly type: "string";
                    readonly enum: readonly ["origin_country_id", "courier_name", "created_at"];
                    readonly examples: readonly ["created_at"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort records by listed columns. Default: `created_at`";
                };
                readonly sort_direction: {
                    readonly type: "string";
                    readonly enum: readonly ["ASC", "DESC"];
                    readonly examples: readonly ["ASC"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Set the sort direction. Default: `DESC`";
                };
                readonly country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly examples: readonly ["US", "HK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly umbrella_name: {
                    readonly type: "string";
                    readonly examples: readonly ["DHL"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by courier umbrella name";
                };
                readonly customer_reference_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "An identifier for a customer (available only for selected customers)";
                };
                readonly accepts: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["outbounds", "prepaid_returns", "pay_on_scan_returns", "pi965_batteries", "pi966_batteries", "pi967_batteries", "liquids", "documents", "parcels", "specific_dangerous_goods"];
                    };
                    readonly examples: readonly ["pi965_batteries", "parcels"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by acceptance criteria";
                };
                readonly prohibit_dangerous_goods: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records if the courier does not accept dangerous goods";
                };
                readonly supported_incoterms: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["DDU", "DDP"];
                    };
                    readonly examples: readonly ["DDU"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records if the courier supports DDUs, DDPs or both";
                };
                readonly international: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records if the courier is an international service";
                };
                readonly domestic: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records if the courier is an domestic service";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of couriers service";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier_services: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Courier service";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "ID";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Human-readable name of the courier.";
                            };
                            readonly umbrella_name: {
                                readonly type: "string";
                                readonly description: "Human-readable name for the courier company that offers this service.";
                            };
                            readonly logo_url: {
                                readonly type: "string";
                                readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                readonly deprecated: true;
                            };
                            readonly country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly service_name: {
                                readonly type: "string";
                                readonly description: "Human-readable name of the courier service.";
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Whether the courier is active or not.";
                            };
                            readonly restricted_to_origin_states: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "List of origin states that the service is available for (US only).";
                            };
                            readonly restricted_to_destination_states: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "List of destination states that the service is available for (US only).";
                            };
                            readonly supported_incoterms: {
                                readonly type: "array";
                                readonly items: {
                                    readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                    readonly type: "string";
                                    readonly enum: readonly ["DDU", "DDP", any];
                                    readonly default: "DDU";
                                };
                            };
                            readonly ioss_support: {
                                readonly type: "string";
                                readonly enum: readonly ["supported_mandatory", "supported_optional", "not_supported", any];
                                readonly description: "`supported_mandatory` `supported_optional` `not_supported`";
                            };
                            readonly customer_reference_id: {
                                readonly type: "string";
                                readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                            };
                            readonly accepts_outbounds: {
                                readonly deprecated: true;
                                readonly type: "boolean";
                                readonly description: "Whether the courier can be used to generate outbound labels.";
                            };
                            readonly accepts_prepaid_returns: {
                                readonly deprecated: true;
                                readonly type: "boolean";
                                readonly description: "Returns `true` if returns are billed upon label generation.";
                            };
                            readonly accepts_pay_on_scan_returns: {
                                readonly deprecated: true;
                                readonly type: "boolean";
                                readonly description: "Returns `true` if returns are billed upon label scan.";
                            };
                            readonly domestic: {
                                readonly type: "boolean";
                                readonly description: "Returns `true` if the courier service is a domestic service. Both `domestic` and `international` can be `true` at the same time.";
                            };
                            readonly international: {
                                readonly type: "boolean";
                                readonly description: "Returns `true` if the courier service is an international service. Both `domestic` and `international` can be `true` at the same time.";
                            };
                            readonly courier_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "The Courier ID is associated with this service.";
                            };
                            readonly courier_logo_url: {
                                readonly type: "string";
                                readonly description: "The URL of the Courier logo.";
                            };
                            readonly easyship_courier_service: {
                                readonly type: "boolean";
                                readonly description: "Whether the Courier Service belongs to Easyship or not.";
                            };
                            readonly accepts: {
                                readonly type: "object";
                                readonly description: "Acceptance criteria for the courier.";
                                readonly properties: {
                                    readonly outbounds: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the courier can be used to generate outbound labels.";
                                    };
                                    readonly prepaid_returns: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if returns are billed upon label generation.";
                                    };
                                    readonly pay_on_scan_returns: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if returns are billed upon label scan.";
                                    };
                                    readonly pi965_batteries: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts battery (pi965).";
                                    };
                                    readonly pi966_batteries: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts battery (pi966).";
                                    };
                                    readonly pi967_batteries: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts battery (pi967).";
                                    };
                                    readonly liquids: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts liquids.";
                                    };
                                    readonly specific_dangerous_goods: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts other dangerous goods that are not batteries (pi966, pi967, or pi968).";
                                    };
                                    readonly documents: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts documents.";
                                    };
                                    readonly parcels: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts parcels.";
                                    };
                                };
                            };
                            readonly available_handover_options: {
                                readonly type: "array";
                                readonly description: "Available handover options.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["dropoff", "free_pickup", "paid_pickup"];
                                    readonly description: "`dropoff` `free_pickup` `paid_pickup`";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CourierLyocIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["CA"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly country_id: {
                    readonly type: "string";
                    readonly examples: readonly ["103"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by country ID.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of LYOCs";
            readonly additionalProperties: false;
            readonly properties: {
                readonly couriers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "LYOC";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                                readonly description: "The key of the LYOC.";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly logo_url: {
                                readonly type: "string";
                                readonly description: "URL of the Courier logo.";
                            };
                            readonly supported_countries: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "number";
                                        };
                                        readonly alpha2: {
                                            readonly type: "string";
                                        };
                                        readonly creation: {
                                            readonly type: "object";
                                            readonly additionalProperties: false;
                                            readonly description: "How the courier can be created for the country.";
                                            readonly properties: {
                                                readonly contact: {
                                                    readonly type: "boolean";
                                                    readonly description: "Contacting Easyship sales representative.";
                                                };
                                                readonly ui: {
                                                    readonly type: "boolean";
                                                    readonly description: "Easyship UI (Dashboard or LYOC application).";
                                                };
                                                readonly api: {
                                                    readonly type: "boolean";
                                                    readonly description: "Easyship Public API.";
                                                };
                                            };
                                        };
                                        readonly courier_id: {
                                            readonly type: "string";
                                            readonly description: "Existing Courier for the country.";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CourierServiceEstimatedDeliveryDatesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly courier_service_id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Courier Service ID based on Courier API. Specify a courier service in AU,CA,GB,HK,NL,SG,US.";
                };
            };
            readonly required: readonly ["courier_service_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly origin_country_alpha2: {
                    readonly type: "string";
                    readonly enum: readonly ["AU", "CA", "GB", "HK", "NL", "SG", "US"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                };
                readonly destination_country_alpha2: {
                    readonly type: "string";
                    readonly description: "Filter destination by country code";
                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["origin_country_alpha2"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Estimated delivery dates for specific courier";
            readonly additionalProperties: false;
            readonly properties: {
                readonly estimated_delivery_dates: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly destination_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly fiftieth_centile: {
                                readonly type: "integer";
                                readonly description: "Number of days to deliver 50% of shipments in the 12 months";
                            };
                            readonly eighty_fifth_centile: {
                                readonly type: "integer";
                                readonly description: "Number of days to deliver 85% of shipments in the 12 months";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CourierServicesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly sort_by: {
                    readonly type: "string";
                    readonly enum: readonly ["origin_country_id", "courier_name", "created_at"];
                    readonly examples: readonly ["created_at"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort records by listed columns. Default: `created_at`";
                };
                readonly sort_direction: {
                    readonly type: "string";
                    readonly enum: readonly ["ASC", "DESC"];
                    readonly examples: readonly ["ASC"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Set the sort direction. Default: `DESC`";
                };
                readonly country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly examples: readonly ["US", "HK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly umbrella_name: {
                    readonly type: "string";
                    readonly examples: readonly ["DHL"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by courier umbrella name";
                };
                readonly customer_reference_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "An identifier for a customer (available only for selected customers)";
                };
                readonly accepts: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["outbounds", "prepaid_returns", "pay_on_scan_returns", "pi965_batteries", "pi966_batteries", "pi967_batteries", "liquids", "documents", "parcels", "specific_dangerous_goods"];
                    };
                    readonly examples: readonly ["pi965_batteries", "parcels"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by acceptance criteria";
                };
                readonly supported_incoterms: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["DDU", "DDP"];
                    };
                    readonly examples: readonly ["DDU"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records if the courier supports DDUs, DDPs or both";
                };
                readonly international: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records if the courier is an international service";
                };
                readonly domestic: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records if the courier is an domestic service";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of couriers service";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier_services: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Courier service";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "ID";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Human-readable name of the courier.";
                            };
                            readonly umbrella_name: {
                                readonly type: "string";
                                readonly description: "Human-readable name for the courier company that offers this service.";
                            };
                            readonly logo_url: {
                                readonly type: "string";
                                readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                readonly deprecated: true;
                            };
                            readonly country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly service_name: {
                                readonly type: "string";
                                readonly description: "Human-readable name of the courier service.";
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Whether the courier is active or not.";
                            };
                            readonly restricted_to_origin_states: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "List of origin states that the service is available for (US only).";
                            };
                            readonly restricted_to_destination_states: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "List of destination states that the service is available for (US only).";
                            };
                            readonly supported_incoterms: {
                                readonly type: "array";
                                readonly items: {
                                    readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                    readonly type: "string";
                                    readonly enum: readonly ["DDU", "DDP", any];
                                    readonly default: "DDU";
                                };
                            };
                            readonly ioss_support: {
                                readonly type: "string";
                                readonly enum: readonly ["supported_mandatory", "supported_optional", "not_supported", any];
                                readonly description: "`supported_mandatory` `supported_optional` `not_supported`";
                            };
                            readonly customer_reference_id: {
                                readonly type: "string";
                                readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                            };
                            readonly accepts_outbounds: {
                                readonly deprecated: true;
                                readonly type: "boolean";
                                readonly description: "Whether the courier can be used to generate outbound labels.";
                            };
                            readonly accepts_prepaid_returns: {
                                readonly deprecated: true;
                                readonly type: "boolean";
                                readonly description: "Returns `true` if returns are billed upon label generation.";
                            };
                            readonly accepts_pay_on_scan_returns: {
                                readonly deprecated: true;
                                readonly type: "boolean";
                                readonly description: "Returns `true` if returns are billed upon label scan.";
                            };
                            readonly domestic: {
                                readonly type: "boolean";
                                readonly description: "Returns `true` if the courier service is a domestic service. Both `domestic` and `international` can be `true` at the same time.";
                            };
                            readonly international: {
                                readonly type: "boolean";
                                readonly description: "Returns `true` if the courier service is an international service. Both `domestic` and `international` can be `true` at the same time.";
                            };
                            readonly courier_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "The Courier ID is associated with this service.";
                            };
                            readonly courier_logo_url: {
                                readonly type: "string";
                                readonly description: "The URL of the Courier logo.";
                            };
                            readonly easyship_courier_service: {
                                readonly type: "boolean";
                                readonly description: "Whether the Courier Service belongs to Easyship or not.";
                            };
                            readonly accepts: {
                                readonly type: "object";
                                readonly description: "Acceptance criteria for the courier.";
                                readonly properties: {
                                    readonly outbounds: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the courier can be used to generate outbound labels.";
                                    };
                                    readonly prepaid_returns: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if returns are billed upon label generation.";
                                    };
                                    readonly pay_on_scan_returns: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if returns are billed upon label scan.";
                                    };
                                    readonly pi965_batteries: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts battery (pi965).";
                                    };
                                    readonly pi966_batteries: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts battery (pi966).";
                                    };
                                    readonly pi967_batteries: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts battery (pi967).";
                                    };
                                    readonly liquids: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts liquids.";
                                    };
                                    readonly specific_dangerous_goods: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts other dangerous goods that are not batteries (pi966, pi967, or pi968).";
                                    };
                                    readonly documents: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts documents.";
                                    };
                                    readonly parcels: {
                                        readonly type: "boolean";
                                        readonly description: "Returns `true` if courier accepts parcels.";
                                    };
                                };
                            };
                            readonly available_handover_options: {
                                readonly type: "array";
                                readonly description: "Available handover options.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["dropoff", "free_pickup", "paid_pickup"];
                                    readonly description: "`dropoff` `free_pickup` `paid_pickup`";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CourierServicesPickupSlotsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly courier_service_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Courier Service ID";
                };
            };
            readonly required: readonly ["courier_service_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly origin_address_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Origin Address ID";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Pickup Slots";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier_service_handover_option: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly provider_name: {
                            readonly type: "string";
                        };
                        readonly pickup_slots: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Pickup slot";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly date: {
                                        readonly type: "string";
                                        readonly format: "date";
                                    };
                                    readonly time_slots: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Time slot";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly time_slot_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                };
                                                readonly from_time: {
                                                    readonly type: "string";
                                                };
                                                readonly to_time: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouriersCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly additionalProperties: false;
            readonly description: "Create Australia Post eParcel Courier";
            readonly required: readonly ["origin_country_alpha2", "courier_umbrella_name", "nickname", "account_details"];
            readonly properties: {
                readonly courier_umbrella_name: {
                    readonly type: "string";
                    readonly enum: readonly ["Australia Post eParcel", "Australia Post"];
                    readonly description: "- `Australia Post eParcel`: Australia Post eParcel\n- `Australia Post`: Deprecated. Umbrella name will be converted automatically to Australia Post eParcel when it is provided.\n";
                    readonly examples: readonly ["Australia Post eParcel"];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                    readonly minimum: 3;
                    readonly maximum: 15;
                    readonly examples: readonly ["Dev DHL"];
                };
                readonly customer_reference_id: {
                    readonly type: "string";
                    readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                    readonly examples: readonly ["reference id"];
                };
                readonly ddp_handling_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                    readonly examples: readonly [10];
                };
                readonly pickup_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                };
                readonly origin_country_alpha2: {
                    readonly type: "string";
                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                    readonly enum: readonly ["AU"];
                };
                readonly account_details: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly required: readonly ["account_number", "password", "api_key"];
                    readonly properties: {
                        readonly account_number: {
                            readonly type: "string";
                            readonly description: "Australia Post eParcel account number";
                        };
                        readonly password: {
                            readonly type: "string";
                            readonly description: "Australia Post eParcel password";
                        };
                        readonly api_key: {
                            readonly type: "string";
                            readonly description: "Australia Post eParcel API key";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly description: "Create DHL Courier";
            readonly required: readonly ["courier_umbrella_name", "nickname", "account_details"];
            readonly properties: {
                readonly courier_umbrella_name: {
                    readonly type: "string";
                    readonly enum: readonly ["DHL"];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                    readonly minimum: 3;
                    readonly maximum: 15;
                };
                readonly customer_reference_id: {
                    readonly type: "string";
                    readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                };
                readonly origin_country_alpha2: {
                    readonly type: "string";
                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                };
                readonly ddp_handling_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                };
                readonly pickup_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                };
                readonly account_details: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly required: readonly ["account_number", "api_key", "api_secret"];
                    readonly properties: {
                        readonly account_number: {
                            readonly type: "string";
                            readonly description: "DHL account number";
                        };
                        readonly api_key: {
                            readonly type: "string";
                            readonly description: "DHL API key";
                        };
                        readonly api_secret: {
                            readonly type: "string";
                            readonly description: "DHL API secret";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly description: "Create Royal Mail Courier";
            readonly properties: {
                readonly courier_umbrella_name: {
                    readonly type: "string";
                    readonly enum: readonly ["Royal Mail"];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                    readonly minimum: 3;
                    readonly maximum: 15;
                };
                readonly customer_reference_id: {
                    readonly type: "string";
                    readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                };
                readonly ddp_handling_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                };
                readonly pickup_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                };
                readonly account_details: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly account_number: {
                            readonly type: "string";
                            readonly description: "Royal Mail account number";
                        };
                        readonly customer_name: {
                            readonly type: "string";
                            readonly description: "Customer Name associated with the customer's Royal Mail Online Business Account (OBA). Prior to linking an account, the user will need to register for an OBA with Royal Mail. More details about this process can be found [here](https://support.easyship.com/hc/en-us/articles/360046578311-Link-Your-Royal-Mail-Account).";
                        };
                        readonly oba_email_address: {
                            readonly type: "string";
                            readonly format: "email";
                            readonly description: "Email address associated with the customer's OBA";
                        };
                        readonly posting_location: {
                            readonly type: "string";
                            readonly description: "Posting Location (Must be 10 digits, starting with 9)";
                        };
                        readonly address_line_1: {
                            readonly type: "string";
                            readonly description: "First line of the street address";
                            readonly maximum: 35;
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly description: "City or Suburb";
                            readonly maximum: 200;
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly description: "Postal Code. This will be used to determine the customer's receiving hub.";
                        };
                        readonly contact_phone: {
                            readonly type: "string";
                            readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                            readonly maximum: 20;
                        };
                        readonly contact_email: {
                            readonly type: "string";
                            readonly format: "email";
                            readonly description: "Email address used to reach the person in `contact_name\"";
                            readonly maximum: 50;
                        };
                    };
                    readonly required: readonly ["account_number", "customer_name", "oba_email_address", "posting_location", "address_line_1", "city", "postal_code", "contact_phone", "contact_email"];
                };
            };
            readonly required: readonly ["courier_umbrella_name", "nickname", "account_details"];
        }, {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly description: "Create Sendle Courier";
            readonly required: readonly ["courier_umbrella_name", "nickname", "account_details"];
            readonly properties: {
                readonly courier_umbrella_name: {
                    readonly type: "string";
                    readonly enum: readonly ["Sendle"];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                    readonly minimum: 3;
                    readonly maximum: 15;
                };
                readonly customer_reference_id: {
                    readonly type: "string";
                    readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                };
                readonly origin_country_alpha2: {
                    readonly type: "string";
                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                };
                readonly ddp_handling_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                };
                readonly pickup_fee: {
                    readonly type: "number";
                    readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                };
                readonly account_details: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly required: readonly ["id", "api_key"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Sendle ID. Read https://support.easyship.com/hc/en-us/articles/360035365152/ on how to get the ID.";
                        };
                        readonly api_key: {
                            readonly description: "Sendle API Key. Read https://support.easyship.com/hc/en-us/articles/360035365152/ on how to get the API key.";
                        };
                    };
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "courier_umbrella_name";
            readonly mapping: {
                readonly "Australia Post eParcel": "#/components/schemas/CourierAustraliaPostEParcelCreate";
                readonly DHL: "#/components/schemas/CourierDHLCreate";
                readonly "Royal Mail": "#/components/schemas/CourierRoyalMailCreate";
                readonly Sendle: "#/components/schemas/CourierSendleCreate";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Single courier with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier: {
                    readonly type: "object";
                    readonly description: "Courier";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly customer_reference_id: {
                            readonly type: "string";
                            readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                        };
                        readonly easyship_courier: {
                            readonly type: "boolean";
                            readonly description: "Whether the courier belongs to Easyship or not.";
                        };
                        readonly nickname: {
                            readonly type: "string";
                            readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                            readonly minimum: 3;
                            readonly maximum: 15;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Courier State for LYOC only. For Royal Mail, a newly-created account will be set to `pending` until the account details are verified. Once verified, the account will be set to `active` and the associated courier services will available for Rates and Labels.\n\n`pending` `pending_upgrade` `active` `inactive`";
                            readonly enum: readonly ["pending", "pending_upgrade", "active", "inactive"];
                        };
                        readonly auth: {
                            readonly type: "object";
                            readonly description: "Courier authentication state for LYOC accounts.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "Authentication State for LYOC only. For Royal Mail, a newly-created account will be set to `partially_verified` until the account details have been `verified`. If there are issues with the account details, this will be set to `failed`.\n\n`unverified` `partially_verified` `verified` `failed`";
                                    readonly enum: readonly ["unverified", "partially_verified", "verified", "failed"];
                                };
                                readonly errors: {
                                    readonly type: "array";
                                    readonly description: "Authentication errors for LYOC only. If the authentication state of the account is `failed`, this will contain a list of error messages concerning the failure.";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly ddp_handling_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                        };
                        readonly pickup_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                        };
                        readonly umbrella_name: {
                            readonly type: "string";
                            readonly description: "Umbrella Name of the Courier";
                        };
                        readonly filtered_account_details: {
                            readonly type: "object";
                            readonly description: "Account details are available only for LYOC couriers. The content is different per courier.";
                            readonly additionalProperties: true;
                        };
                        readonly logo_url: {
                            readonly type: "string";
                            readonly description: "URL of the Courier logo.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly description: "Courier Metadata";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly messages: {
                            readonly type: "array";
                            readonly description: "Messages from courier service when the Courier creation is a partial success (status code `202`).";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "Single courier with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier: {
                    readonly type: "object";
                    readonly description: "Courier";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly customer_reference_id: {
                            readonly type: "string";
                            readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                        };
                        readonly easyship_courier: {
                            readonly type: "boolean";
                            readonly description: "Whether the courier belongs to Easyship or not.";
                        };
                        readonly nickname: {
                            readonly type: "string";
                            readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                            readonly minimum: 3;
                            readonly maximum: 15;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Courier State for LYOC only. For Royal Mail, a newly-created account will be set to `pending` until the account details are verified. Once verified, the account will be set to `active` and the associated courier services will available for Rates and Labels.\n\n`pending` `pending_upgrade` `active` `inactive`";
                            readonly enum: readonly ["pending", "pending_upgrade", "active", "inactive"];
                        };
                        readonly auth: {
                            readonly type: "object";
                            readonly description: "Courier authentication state for LYOC accounts.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "Authentication State for LYOC only. For Royal Mail, a newly-created account will be set to `partially_verified` until the account details have been `verified`. If there are issues with the account details, this will be set to `failed`.\n\n`unverified` `partially_verified` `verified` `failed`";
                                    readonly enum: readonly ["unverified", "partially_verified", "verified", "failed"];
                                };
                                readonly errors: {
                                    readonly type: "array";
                                    readonly description: "Authentication errors for LYOC only. If the authentication state of the account is `failed`, this will contain a list of error messages concerning the failure.";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly ddp_handling_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                        };
                        readonly pickup_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                        };
                        readonly umbrella_name: {
                            readonly type: "string";
                            readonly description: "Umbrella Name of the Courier";
                        };
                        readonly filtered_account_details: {
                            readonly type: "object";
                            readonly description: "Account details are available only for LYOC couriers. The content is different per courier.";
                            readonly additionalProperties: true;
                        };
                        readonly logo_url: {
                            readonly type: "string";
                            readonly description: "URL of the Courier logo.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly description: "Courier Metadata";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly messages: {
                            readonly type: "array";
                            readonly description: "Messages from courier service when the Courier creation is a partial success (status code `202`).";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouriersDeactivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly courier_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Courier ID";
                };
            };
            readonly required: readonly ["courier_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Single courier with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier: {
                    readonly type: "object";
                    readonly description: "Courier";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly customer_reference_id: {
                            readonly type: "string";
                            readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                        };
                        readonly easyship_courier: {
                            readonly type: "boolean";
                            readonly description: "Whether the courier belongs to Easyship or not.";
                        };
                        readonly nickname: {
                            readonly type: "string";
                            readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                            readonly minimum: 3;
                            readonly maximum: 15;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Courier State for LYOC only. For Royal Mail, a newly-created account will be set to `pending` until the account details are verified. Once verified, the account will be set to `active` and the associated courier services will available for Rates and Labels.\n\n`pending` `pending_upgrade` `active` `inactive`";
                            readonly enum: readonly ["pending", "pending_upgrade", "active", "inactive"];
                        };
                        readonly auth: {
                            readonly type: "object";
                            readonly description: "Courier authentication state for LYOC accounts.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "Authentication State for LYOC only. For Royal Mail, a newly-created account will be set to `partially_verified` until the account details have been `verified`. If there are issues with the account details, this will be set to `failed`.\n\n`unverified` `partially_verified` `verified` `failed`";
                                    readonly enum: readonly ["unverified", "partially_verified", "verified", "failed"];
                                };
                                readonly errors: {
                                    readonly type: "array";
                                    readonly description: "Authentication errors for LYOC only. If the authentication state of the account is `failed`, this will contain a list of error messages concerning the failure.";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly ddp_handling_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                        };
                        readonly pickup_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                        };
                        readonly umbrella_name: {
                            readonly type: "string";
                            readonly description: "Umbrella Name of the Courier";
                        };
                        readonly filtered_account_details: {
                            readonly type: "object";
                            readonly description: "Account details are available only for LYOC couriers. The content is different per courier.";
                            readonly additionalProperties: true;
                        };
                        readonly logo_url: {
                            readonly type: "string";
                            readonly description: "URL of the Courier logo.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly description: "Courier Metadata";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly messages: {
                            readonly type: "array";
                            readonly description: "Messages from courier service when the Courier creation is a partial success (status code `202`).";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouriersDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly courier_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Courier ID";
                };
            };
            readonly required: readonly ["courier_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouriersIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly sort_by: {
                    readonly type: "string";
                    readonly enum: readonly ["customer_reference_id", "umbrella_name", "country_alpha2", "created_at"];
                    readonly examples: readonly ["created_at"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort records by listed columns. Default: `created_at`";
                };
                readonly sort_direction: {
                    readonly type: "string";
                    readonly enum: readonly ["ASC", "DESC"];
                    readonly examples: readonly ["ASC"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Set the sort direction. Default: `DESC`";
                };
                readonly country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly examples: readonly ["US", "HK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly customer_reference_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "An identifier for a customer (available only for selected customers)";
                };
                readonly auth_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["unverified", "verified", "partially_verified", "failed"];
                    };
                    readonly examples: readonly ["failed"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by auth state.";
                };
                readonly state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "pending_upgrade", "active", "inactive"];
                    };
                    readonly examples: readonly ["pending", "active"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by courier state.";
                };
                readonly umbrella_name: {
                    readonly type: "string";
                    readonly examples: readonly ["Royal Mail"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by umbrella name.";
                };
                readonly active_courier_services: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records to only those with available courier services.";
                };
                readonly easyship_courier: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Whether the courier belongs to Easyship or not.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Couriers";
            readonly additionalProperties: false;
            readonly properties: {
                readonly couriers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Courier";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                            readonly customer_reference_id: {
                                readonly type: "string";
                                readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                            };
                            readonly easyship_courier: {
                                readonly type: "boolean";
                                readonly description: "Whether the courier belongs to Easyship or not.";
                            };
                            readonly nickname: {
                                readonly type: "string";
                                readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                                readonly minimum: 3;
                                readonly maximum: 15;
                            };
                            readonly origin_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Courier State for LYOC only. For Royal Mail, a newly-created account will be set to `pending` until the account details are verified. Once verified, the account will be set to `active` and the associated courier services will available for Rates and Labels.\n\n`pending` `pending_upgrade` `active` `inactive`";
                                readonly enum: readonly ["pending", "pending_upgrade", "active", "inactive"];
                            };
                            readonly auth: {
                                readonly type: "object";
                                readonly description: "Courier authentication state for LYOC accounts.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "Authentication State for LYOC only. For Royal Mail, a newly-created account will be set to `partially_verified` until the account details have been `verified`. If there are issues with the account details, this will be set to `failed`.\n\n`unverified` `partially_verified` `verified` `failed`";
                                        readonly enum: readonly ["unverified", "partially_verified", "verified", "failed"];
                                    };
                                    readonly errors: {
                                        readonly type: "array";
                                        readonly description: "Authentication errors for LYOC only. If the authentication state of the account is `failed`, this will contain a list of error messages concerning the failure.";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly ddp_handling_fee: {
                                readonly type: "number";
                                readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                            };
                            readonly pickup_fee: {
                                readonly type: "number";
                                readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                            };
                            readonly umbrella_name: {
                                readonly type: "string";
                                readonly description: "Umbrella Name of the Courier";
                            };
                            readonly filtered_account_details: {
                                readonly type: "object";
                                readonly description: "Account details are available only for LYOC couriers. The content is different per courier.";
                                readonly additionalProperties: true;
                            };
                            readonly logo_url: {
                                readonly type: "string";
                                readonly description: "URL of the Courier logo.";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouriersShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly courier_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Courier account ID";
                };
            };
            readonly required: readonly ["courier_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Single courier with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier: {
                    readonly type: "object";
                    readonly description: "Courier";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly customer_reference_id: {
                            readonly type: "string";
                            readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                        };
                        readonly easyship_courier: {
                            readonly type: "boolean";
                            readonly description: "Whether the courier belongs to Easyship or not.";
                        };
                        readonly nickname: {
                            readonly type: "string";
                            readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                            readonly minimum: 3;
                            readonly maximum: 15;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Courier State for LYOC only. For Royal Mail, a newly-created account will be set to `pending` until the account details are verified. Once verified, the account will be set to `active` and the associated courier services will available for Rates and Labels.\n\n`pending` `pending_upgrade` `active` `inactive`";
                            readonly enum: readonly ["pending", "pending_upgrade", "active", "inactive"];
                        };
                        readonly auth: {
                            readonly type: "object";
                            readonly description: "Courier authentication state for LYOC accounts.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "Authentication State for LYOC only. For Royal Mail, a newly-created account will be set to `partially_verified` until the account details have been `verified`. If there are issues with the account details, this will be set to `failed`.\n\n`unverified` `partially_verified` `verified` `failed`";
                                    readonly enum: readonly ["unverified", "partially_verified", "verified", "failed"];
                                };
                                readonly errors: {
                                    readonly type: "array";
                                    readonly description: "Authentication errors for LYOC only. If the authentication state of the account is `failed`, this will contain a list of error messages concerning the failure.";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly ddp_handling_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                        };
                        readonly pickup_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                        };
                        readonly umbrella_name: {
                            readonly type: "string";
                            readonly description: "Umbrella Name of the Courier";
                        };
                        readonly filtered_account_details: {
                            readonly type: "object";
                            readonly description: "Account details are available only for LYOC couriers. The content is different per courier.";
                            readonly additionalProperties: true;
                        };
                        readonly logo_url: {
                            readonly type: "string";
                            readonly description: "URL of the Courier logo.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly description: "Courier Metadata";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly messages: {
                            readonly type: "array";
                            readonly description: "Messages from courier service when the Courier creation is a partial success (status code `202`).";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouriersUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly nickname: {
                readonly type: "string";
                readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                readonly minimum: 3;
                readonly maximum: 15;
                readonly examples: readonly ["My Royal Mail"];
            };
            readonly ddp_handling_fee: {
                readonly type: "number";
                readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
            };
            readonly pickup_fee: {
                readonly type: "number";
                readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly courier_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Courier ID";
                };
            };
            readonly required: readonly ["courier_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Single courier with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier: {
                    readonly type: "object";
                    readonly description: "Courier";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly customer_reference_id: {
                            readonly type: "string";
                            readonly description: "An identifier for the customer who owns the account. Available only for selected customers.";
                        };
                        readonly easyship_courier: {
                            readonly type: "boolean";
                            readonly description: "Whether the courier belongs to Easyship or not.";
                        };
                        readonly nickname: {
                            readonly type: "string";
                            readonly description: "For LYOC. Unique nickname used to identify the linked account.";
                            readonly minimum: 3;
                            readonly maximum: 15;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "Courier State for LYOC only. For Royal Mail, a newly-created account will be set to `pending` until the account details are verified. Once verified, the account will be set to `active` and the associated courier services will available for Rates and Labels.\n\n`pending` `pending_upgrade` `active` `inactive`";
                            readonly enum: readonly ["pending", "pending_upgrade", "active", "inactive"];
                        };
                        readonly auth: {
                            readonly type: "object";
                            readonly description: "Courier authentication state for LYOC accounts.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "Authentication State for LYOC only. For Royal Mail, a newly-created account will be set to `partially_verified` until the account details have been `verified`. If there are issues with the account details, this will be set to `failed`.\n\n`unverified` `partially_verified` `verified` `failed`";
                                    readonly enum: readonly ["unverified", "partially_verified", "verified", "failed"];
                                };
                                readonly errors: {
                                    readonly type: "array";
                                    readonly description: "Authentication errors for LYOC only. If the authentication state of the account is `failed`, this will contain a list of error messages concerning the failure.";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly ddp_handling_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. DDP handling fee applied by the courier when DDP is requested.";
                        };
                        readonly pickup_fee: {
                            readonly type: "number";
                            readonly description: "For LYOC only. Additional pickup fee to apply to all shipments. This fee will be added to your quoted rates.";
                        };
                        readonly umbrella_name: {
                            readonly type: "string";
                            readonly description: "Umbrella Name of the Courier";
                        };
                        readonly filtered_account_details: {
                            readonly type: "object";
                            readonly description: "Account details are available only for LYOC couriers. The content is different per courier.";
                            readonly additionalProperties: true;
                        };
                        readonly logo_url: {
                            readonly type: "string";
                            readonly description: "URL of the Courier logo.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly description: "Courier Metadata";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly messages: {
                            readonly type: "array";
                            readonly description: "Messages from courier service when the Courier creation is a partial success (status code `202`).";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreditAutoRechargeShow: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Auto recharge setting details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly auto_recharge: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly enabled: {
                            readonly type: "boolean";
                            readonly description: "Indicates if Auto Recharge is enabled.";
                        };
                        readonly threshold_amount: {
                            readonly type: "number";
                            readonly description: "Amount of threshold to process auto recharge to the account balance.";
                        };
                        readonly amount: {
                            readonly type: "number";
                            readonly description: "Amount to recharge.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreditAutoRechargeUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly enabled: {
                readonly type: "boolean";
                readonly description: "Indicates if Auto Recharge is enabled.";
            };
            readonly threshold_amount: {
                readonly type: "number";
                readonly description: "Amount of threshold to process auto recharge to the account balance.";
            };
            readonly amount: {
                readonly type: "number";
                readonly description: "Amount to recharge. Amount of recharge should be over the threshold amount.\nThese are amount that allowed by countries.\n\n|Country|Minimum Amount|Maximum amount|\n|---|---|---|\n      |United Arab Emirates|100|4000|\n      |Albania|50000|2000000|\n      |Austria|50|2000|\n      |Australia|50|2000|\n      |Bosnia and Herzegovina|100|4000|\n      |Belgium|50|2000|\n      |Bulgaria|100|4000|\n      |Canada|50|2000|\n      |Switzerland|50|2000|\n      |China|500|20000|\n      |Cyprus|50|2000|\n      |Czech Republic|1000|40000|\n      |Germany|50|2000|\n      |Denmark|500|20000|\n      |Estonia|50|2000|\n      |Spain|50|2000|\n      |Finland|50|2000|\n      |France|50|2000|\n      |United Kingdom|50|2000|\n      |Greece|50|2000|\n      |Hong Kong|500|20000|\n      |Croatia|50|2000|\n      |Hungary|10000|400000|\n      |Indonesia|100000|4000000|\n      |Ireland|50|2000|\n      |Israel|100|4000|\n      |India|5000|200000|\n      |Iceland|5000|200000|\n      |Italy|50|2000|\n      |Japan|10000|400000|\n      |Korea, Republic of|100000|4000000|\n      |Lithuania|50|2000|\n      |Luxembourg|50|2000|\n      |Latvia|50|2000|\n      |Malta|50|2000|\n      |Mexico|1000|40000|\n      |Malaysia|500|20000|\n      |Netherlands|50|2000|\n      |Norway|500|20000|\n      |New Zealand|100|4000|\n      |Philippines|5000|200000|\n      |Poland|100|4000|\n      |Portugal|50|2000|\n      |Romania|100|4000|\n      |Serbia|5000|200000|\n      |Sweden|500|20000|\n      |Singapore|50|2000|\n      |Slovenia|50|2000|\n      |Slovakia|50|2000|\n      |Thailand|1000|40000|\n      |Turkey|1000|40000|\n      |Taiwan, Republic Of China|1000|40000|\n      |Ukraine|1000|40000|\n      |United States|50|2000|\n      |Vietnam|1000000|40000000|\n";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Auto recharge setting details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly auto_recharge: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly enabled: {
                            readonly type: "boolean";
                            readonly description: "Indicates if Auto Recharge is enabled.";
                        };
                        readonly threshold_amount: {
                            readonly type: "number";
                            readonly description: "Amount of threshold to process auto recharge to the account balance.";
                        };
                        readonly amount: {
                            readonly type: "number";
                            readonly description: "Amount to recharge.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreditConfrim3DsCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["intent_id"];
        readonly properties: {
            readonly intent_id: {
                readonly type: "string";
                readonly description: "Reference ID to confirm the credit. If your credit card requires 3DS validation, it could be found in the response of `POST /2023-01/account/credit`.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly credit: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly balance: {
                            readonly type: "number";
                            readonly description: "Total amount in the account without considering holds or pending transactions.";
                        };
                        readonly available_balance: {
                            readonly type: "number";
                            readonly description: "Funds accessible for use, accounting for holds and pending transactions.";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "Require action";
            readonly additionalProperties: false;
            readonly properties: {
                readonly action_required: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_3ds_validation`";
                                readonly enum: readonly ["require_3ds_validation"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after 3DS validation";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for the 3DS validation flow";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_micro_deposit_verification`";
                                readonly enum: readonly ["require_micro_deposit_verification"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID of the bank account setup intent";
                                    };
                                    readonly verification_url: {
                                        readonly type: "string";
                                        readonly description: "Link to Stripe micro deposit verification page";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for customizing verification page";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_bank_account_info`";
                                readonly enum: readonly ["require_bank_account_info"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after collecting bank account information";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for collection bank account information";
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "code";
                        readonly mapping: {
                            readonly require_3ds_validation: "#/components/schemas/3DSValidation";
                            readonly require_micro_deposit_verification: "#/components/schemas/RequireMicroDepositVerification";
                            readonly require_bank_account_info: "#/components/schemas/RequireBankAccountInfo";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreditRefundCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly amount: {
                readonly type: "number";
                readonly description: "Amount of credits to be refunded from a current account. **Refunds your entire balance if this value is not provided.**";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "List of credit refunds";
            readonly additionalProperties: false;
            readonly properties: {
                readonly refunds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly payment_source_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Payment Source ID for refunded payment";
                            };
                            readonly amount: {
                                readonly type: "number";
                                readonly description: "Total amount refunded";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly total_refunded: {
                            readonly type: "number";
                            readonly description: "Amount of credit successfully refunded";
                        };
                        readonly total_non_refunded: {
                            readonly type: "number";
                            readonly description: "Amount of credit unsuccessfully refunded";
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreditsCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["payment_source_id", "amount"];
        readonly properties: {
            readonly payment_source_id: {
                readonly type: "string";
                readonly description: "Source ID based on Payment Source API. Your payment source should have the `card` accept type. Use default card if this property is not provided.";
                readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
            };
            readonly amount: {
                readonly type: "number";
                readonly description: "Amount of credits to be added to a current account.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly credit: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly balance: {
                            readonly type: "number";
                            readonly description: "Total amount in the account without considering holds or pending transactions.";
                        };
                        readonly available_balance: {
                            readonly type: "number";
                            readonly description: "Funds accessible for use, accounting for holds and pending transactions.";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "Require action";
            readonly additionalProperties: false;
            readonly properties: {
                readonly action_required: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_3ds_validation`";
                                readonly enum: readonly ["require_3ds_validation"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after 3DS validation";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for the 3DS validation flow";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_micro_deposit_verification`";
                                readonly enum: readonly ["require_micro_deposit_verification"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID of the bank account setup intent";
                                    };
                                    readonly verification_url: {
                                        readonly type: "string";
                                        readonly description: "Link to Stripe micro deposit verification page";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for customizing verification page";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_bank_account_info`";
                                readonly enum: readonly ["require_bank_account_info"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after collecting bank account information";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for collection bank account information";
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "code";
                        readonly mapping: {
                            readonly require_3ds_validation: "#/components/schemas/3DSValidation";
                            readonly require_micro_deposit_verification: "#/components/schemas/RequireMicroDepositVerification";
                            readonly require_bank_account_info: "#/components/schemas/RequireBankAccountInfo";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreditsShow: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly credit: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly balance: {
                            readonly type: "number";
                            readonly description: "Total amount in the account without considering holds or pending transactions.";
                        };
                        readonly available_balance: {
                            readonly type: "number";
                            readonly description: "Funds accessible for use, accounting for holds and pending transactions.";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const EfulfillmentTrackingUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["easyship_shipment_id"];
        readonly properties: {
            readonly easyship_shipment_id: {
                readonly type: "string";
                readonly pattern: "^ES\\w{2}\\d{7,}$";
                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                readonly examples: readonly ["ESSG10006001"];
            };
            readonly tracking_number: {
                readonly type: "string";
                readonly description: "Tracking number";
            };
            readonly events: {
                readonly type: "array";
                readonly description: "Events";
                readonly items: {
                    readonly type: "object";
                    readonly description: "Event";
                    readonly additionalProperties: false;
                    readonly required: readonly ["primary_status"];
                    readonly properties: {
                        readonly primary_status: {
                            readonly type: "string";
                            readonly description: "Primary status";
                            readonly enum: readonly ["InTransit", "OutForDelivery", "AttemptFail", "Delivered", "Exception"];
                        };
                        readonly location: {
                            readonly type: "string";
                            readonly description: "Location";
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly description: "City or Suburb";
                            readonly maximum: 200;
                        };
                        readonly country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                            readonly maximum: 200;
                        };
                        readonly zip: {
                            readonly type: "string";
                            readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                        };
                        readonly handler: {
                            readonly type: "string";
                            readonly description: "Handler";
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "Message";
                        };
                        readonly event_time: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Event time";
                        };
                        readonly event_time_zone: {
                            readonly type: "string";
                            readonly description: "Event time zone";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const EfulfillmentWarehouseStateUpdate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Data for updating shipments warehouse state";
        readonly additionalProperties: false;
        readonly properties: {
            readonly shipments: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly warehouse_state: {
                            readonly type: "string";
                            readonly description: "Warehouse state";
                            readonly enum: readonly ["created", "failed", "packed", "shipped", "cancelled", "cancelled_no_stock", "backorder_no_stock", "returned"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "An message can be added if the status is `creation_failed` to explain the reason for rejection.";
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format.";
                            readonly additionalProperties: true;
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of shipment warehouse states";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                };
                readonly shipments: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Shipment warehouse state response";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly errors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "List of shipment warehouse states";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                };
                readonly shipments: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Shipment warehouse state response";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly errors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const HsCodeIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly code: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by HS code";
                };
                readonly description: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by description";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of HS codes";
            readonly additionalProperties: false;
            readonly properties: {
                readonly hs_codes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly required: readonly ["description", "code"];
                        readonly properties: {
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Description of the HS code";
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "HS code";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InsurancesPoliciesCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Tracking Create params";
        readonly required: readonly ["insurance", "tracking_number"];
        readonly properties: {
            readonly tracking_number: {
                readonly type: "string";
                readonly examples: readonly ["123456"];
            };
            readonly courier_service_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "unique identifier for a courier service";
                readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
            };
            readonly courier_service_name: {
                readonly type: "string";
                readonly description: "Name of the courier service. Required if `courier_service_id` is not provided.\nFor courier services that Easyship doesn't support label generation, please retrieve the name using `GET /trackings/external_courier_services`\n";
            };
            readonly platform_order_number: {
                readonly type: "string";
                readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                readonly maximum: 200;
            };
            readonly origin_address_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "ID of origin address. Required if the `origin_address` object is not provided.";
            };
            readonly origin_address: {
                readonly type: "object";
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly destination_address: {
                readonly type: "object";
                readonly required: readonly ["line_1", "state", "city", "postal_code", "contact_name", "contact_email", "contact_phone"];
                readonly additionalProperties: false;
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly maximum: 200;
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name`";
                        readonly maximum: 50;
                    };
                    readonly delivery_instructions: {
                        readonly type: "string";
                        readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                        readonly maximum: 200;
                    };
                };
            };
            readonly items: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["description"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly quantity: {
                            readonly type: "number";
                            readonly description: "Quantity of the item. It will be set to 1 if not provided.";
                        };
                    };
                };
            };
            readonly insurance: {
                readonly type: "object";
                readonly required: readonly ["currency", "insured_value"];
                readonly properties: {
                    readonly currency: {
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                        readonly examples: readonly ["USD"];
                    };
                    readonly insured_value: {
                        readonly type: "number";
                        readonly format: "float";
                        readonly minimum: 0;
                        readonly description: "The value of the shipment that is being insured. Limitation is 10000 USD.";
                        readonly maximum: 3.402823669209385e+38;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Insurance details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly insurance_policy: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_insurance_id: {
                            readonly type: "string";
                            readonly description: "Easyship insurance ID";
                        };
                        readonly insurance_fee: {
                            readonly type: "number";
                            readonly description: "Insurance fee";
                        };
                        readonly total_insured_value: {
                            readonly type: "number";
                            readonly description: "Amount to insure with Easyship's insurance provider.";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly tracking_number: {
                            readonly type: "string";
                        };
                        readonly recipient: {
                            readonly type: "string";
                            readonly description: "Recipient type\n\n`buyer` `merchant`";
                            readonly enum: readonly ["buyer", "merchant"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["pending_request", "confirmed", "failed", "pending_void", "voided"];
                            readonly description: "`pending_request` `confirmed` `failed` `pending_void` `voided`";
                        };
                        readonly claim_state: {
                            readonly type: "string";
                            readonly description: "Claim state of the insurance\n\n`not_filed` `filed_by_client` `filed_to_courier_damaged` `filed_to_courier_lost` `rejected_damaged` `rejected_lost` `accepted_damaged` `accepted_lost` `voided`";
                            readonly enum: readonly ["not_filed", "filed_by_client", "filed_to_courier_damaged", "filed_to_courier_lost", "rejected_damaged", "rejected_lost", "accepted_damaged", "accepted_lost", "voided"];
                        };
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly tracking_id: {
                            readonly type: "string";
                            readonly description: "Tracking ID";
                            readonly format: "uuid";
                        };
                        readonly source: {
                            readonly type: "string";
                            readonly description: "Source of the insured shipment\n\n`cloud` `efulfilment` `external`";
                            readonly enum: readonly ["cloud", "efulfilment", "external"];
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InsurancesPoliciesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by Easyship shipment ID";
                };
                readonly state: {
                    readonly type: "string";
                    readonly enum: readonly ["pending_request", "confirmed", "failed", "pending_void", "voided"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by insurance state";
                };
                readonly recipient: {
                    readonly type: "string";
                    readonly enum: readonly ["buyer", "merchant"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by recipient";
                };
                readonly source: {
                    readonly type: "string";
                    readonly enum: readonly ["cloud", "efulfilment", "external"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by source type. External: shipment label is not generated by Easyship. Cloud: shipment label is generated by Easyship. Efulfilment: Special contract with Easyship.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of insurances";
            readonly additionalProperties: false;
            readonly properties: {
                readonly insurance_policies: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly easyship_insurance_id: {
                                readonly type: "string";
                                readonly description: "Easyship insurance ID";
                            };
                            readonly insurance_fee: {
                                readonly type: "number";
                                readonly description: "Insurance fee";
                            };
                            readonly total_insured_value: {
                                readonly type: "number";
                                readonly description: "Amount to insure with Easyship's insurance provider.";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                            readonly tracking_number: {
                                readonly type: "string";
                            };
                            readonly recipient: {
                                readonly type: "string";
                                readonly description: "Recipient type\n\n`buyer` `merchant`";
                                readonly enum: readonly ["buyer", "merchant"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly enum: readonly ["pending_request", "confirmed", "failed", "pending_void", "voided"];
                                readonly description: "`pending_request` `confirmed` `failed` `pending_void` `voided`";
                            };
                            readonly claim_state: {
                                readonly type: "string";
                                readonly description: "Claim state of the insurance\n\n`not_filed` `filed_by_client` `filed_to_courier_damaged` `filed_to_courier_lost` `rejected_damaged` `rejected_lost` `accepted_damaged` `accepted_lost` `voided`";
                                readonly enum: readonly ["not_filed", "filed_by_client", "filed_to_courier_damaged", "filed_to_courier_lost", "rejected_damaged", "rejected_lost", "accepted_damaged", "accepted_lost", "voided"];
                            };
                            readonly easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly tracking_id: {
                                readonly type: "string";
                                readonly description: "Tracking ID";
                                readonly format: "uuid";
                            };
                            readonly source: {
                                readonly type: "string";
                                readonly description: "Source of the insured shipment\n\n`cloud` `efulfilment` `external`";
                                readonly enum: readonly ["cloud", "efulfilment", "external"];
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ItemCategoriesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of item categories";
            readonly additionalProperties: false;
            readonly properties: {
                readonly item_categories: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Item Category";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "Item Category ID";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly hs_code: {
                                readonly type: "string";
                                readonly description: "HS Code of the item";
                            };
                            readonly slug: {
                                readonly type: "string";
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Item Category state";
                            };
                            readonly includes_battery: {
                                readonly type: "boolean";
                                readonly description: "Whether the item includes batteries.";
                            };
                            readonly contains_liquids: {
                                readonly type: "boolean";
                                readonly description: "Whether the item contains liquids.";
                            };
                            readonly contains_battery_pi966: {
                                readonly type: "boolean";
                                readonly description: "Whether the item contains a PI966 battery.";
                            };
                            readonly contains_battery_pi967: {
                                readonly type: "boolean";
                                readonly description: "Whether the item contains a PI967 battery.";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const LocationsFedexIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly line_1: {
                    readonly type: "string";
                    readonly maximum: 100;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The first line of the address.";
                };
                readonly line_2: {
                    readonly type: "string";
                    readonly maximum: 64;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The second line of the address.";
                };
                readonly city: {
                    readonly type: "string";
                    readonly maximum: 50;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "City or town";
                };
                readonly state: {
                    readonly type: "string";
                    readonly maximum: 50;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "State or province";
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly maximum: 10;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "A unique location code used by postal services to sort and deliver mail.";
                };
                readonly distance_unit: {
                    readonly type: "string";
                    readonly enum: readonly ["MI", "KM"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Indicates the unit of measure for the distance.";
                };
                readonly distance_value: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Specifies the distance value.";
                };
            };
            readonly required: readonly ["country_alpha2", "city", "postal_code"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of FedEx locations";
            readonly additionalProperties: false;
            readonly properties: {
                readonly locations: {
                    readonly type: "array";
                    readonly items: {
                        readonly description: "Location";
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name of the location";
                            };
                            readonly phone_number: {
                                readonly type: "string";
                                readonly description: "The phone number associated with the location";
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "The address of the location";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly longitude: {
                                        readonly description: "The longitude of the location";
                                        readonly type: "string";
                                    };
                                    readonly latitude: {
                                        readonly description: "The latitude of the location";
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly opening_hours: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly day: {
                                            readonly type: "string";
                                            readonly description: "The day of the week";
                                        };
                                        readonly open_time: {
                                            readonly type: "string";
                                            readonly description: "The opening time for the specified day";
                                        };
                                        readonly close_time: {
                                            readonly type: "string";
                                            readonly description: "The closing time for the specified day";
                                        };
                                    };
                                };
                            };
                            readonly location_type: {
                                readonly type: "string";
                                readonly description: "Type of the location (only available for FedEx).\n\n`FEDEX_AUTHORIZED_SHIP_CENTER` `FEDEX_OFFICE` `FEDEX_SELF_SERVICE_LOCATION` `FEDEX_EXPRESS_STATION` `FEDEX_STAFFED` `FEDEX_GROUND_TERMINAL` `FEDEX_HOME_DELIVERY_STATION` `FEDEX_ONSITE` `FEDEX_SHIPSITE` `FEDEX_FACILITY` `FEDEX_FREIGHT_SERVICE_CENTER` `FEDEX_SMART_POST_HUB`";
                                readonly enum: readonly ["FEDEX_AUTHORIZED_SHIP_CENTER", "FEDEX_OFFICE", "FEDEX_SELF_SERVICE_LOCATION", "FEDEX_EXPRESS_STATION", "FEDEX_STAFFED", "FEDEX_GROUND_TERMINAL", "FEDEX_HOME_DELIVERY_STATION", "FEDEX_ONSITE", "FEDEX_SHIPSITE", "FEDEX_FACILITY", "FEDEX_FREIGHT_SERVICE_CENTER", "FEDEX_SMART_POST_HUB"];
                            };
                            readonly service_types: {
                                readonly type: "array";
                                readonly description: "Supported types for the location";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["EXPRESS_FREIGHT", "EXPRESS_PARCEL", "GROUND_HOME_DELIVERY"];
                                    readonly description: "`EXPRESS_FREIGHT` `EXPRESS_PARCEL` `GROUND_HOME_DELIVERY`";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const LocationsUpsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly line_1: {
                    readonly type: "string";
                    readonly maximum: 100;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The first line of the address.";
                };
                readonly line_2: {
                    readonly type: "string";
                    readonly maximum: 64;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The second line of the address.";
                };
                readonly city: {
                    readonly type: "string";
                    readonly maximum: 50;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "City or town";
                };
                readonly state: {
                    readonly type: "string";
                    readonly maximum: 50;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "State or province";
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly maximum: 10;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "A unique location code used by postal services to sort and deliver mail.";
                };
            };
            readonly required: readonly ["country_alpha2", "line_1", "city", "state", "postal_code"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of UPS locations";
            readonly additionalProperties: false;
            readonly properties: {
                readonly locations: {
                    readonly type: "array";
                    readonly items: {
                        readonly description: "Location";
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name of the location";
                            };
                            readonly phone_number: {
                                readonly type: "string";
                                readonly description: "The phone number associated with the location";
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "The address of the location";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly longitude: {
                                        readonly description: "The longitude of the location";
                                        readonly type: "string";
                                    };
                                    readonly latitude: {
                                        readonly description: "The latitude of the location";
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly opening_hours: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly day: {
                                            readonly type: "string";
                                            readonly description: "The day of the week";
                                        };
                                        readonly open_time: {
                                            readonly type: "string";
                                            readonly description: "The opening time for the specified day";
                                        };
                                        readonly close_time: {
                                            readonly type: "string";
                                            readonly description: "The closing time for the specified day";
                                        };
                                    };
                                };
                            };
                            readonly service_types: {
                                readonly type: "array";
                                readonly description: "Service code and details";
                                readonly minItems: 1;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["001-Direct To Retail", "002-Not In One ADL", "003-Click and Collect", "004-Retail to Retail", "005-Pickup 006-Drop Off", "007-PUDO", "008-Early Pickup Delivery Time", "009-Accept prepaid drop offs", "010-DCO DCR intercept accepted", "011-Accepts Payments", "012-Pay At Store", "013-Accepts Restricted Articles", "015-Accepts Mobile Barcodes"];
                                    readonly description: "`001-Direct To Retail` `002-Not In One ADL` `003-Click and Collect` `004-Retail to Retail` `005-Pickup 006-Drop Off` `007-PUDO` `008-Early Pickup Delivery Time` `009-Accept prepaid drop offs` `010-DCO DCR intercept accepted` `011-Accepts Payments` `012-Pay At Store` `013-Accepts Restricted Articles` `015-Accepts Mobile Barcodes`";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const LocationsUspsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "A unique location code used by postal services to sort and deliver mail.";
                };
            };
            readonly required: readonly ["country_alpha2"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of USPS locations";
            readonly additionalProperties: false;
            readonly properties: {
                readonly locations: {
                    readonly type: "array";
                    readonly items: {
                        readonly description: "Location";
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name of the location";
                            };
                            readonly phone_number: {
                                readonly type: "string";
                                readonly description: "The phone number associated with the location";
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "The address of the location";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly longitude: {
                                        readonly description: "The longitude of the location";
                                        readonly type: "string";
                                    };
                                    readonly latitude: {
                                        readonly description: "The latitude of the location";
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly opening_hours: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly day: {
                                            readonly type: "string";
                                            readonly description: "The day of the week";
                                        };
                                        readonly open_time: {
                                            readonly type: "string";
                                            readonly description: "The opening time for the specified day";
                                        };
                                        readonly close_time: {
                                            readonly type: "string";
                                            readonly description: "The closing time for the specified day";
                                        };
                                    };
                                };
                            };
                            readonly service_types: {
                                readonly type: "array";
                                readonly description: "Supported types for the location";
                                readonly minItems: 1;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["parcel_select", "parcel_select_lightweight", "usps_connect_local", "usps_connect_mail", "usps_connect_regional", "library_mail", "media_mail", "bound_printed_matter"];
                                    readonly description: "`parcel_select` `parcel_select_lightweight` `usps_connect_local` `usps_connect_mail` `usps_connect_regional` `library_mail` `media_mail` `bound_printed_matter`";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ManifestsCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Manifest creation.";
        readonly additionalProperties: false;
        readonly required: readonly ["courier_id"];
        readonly properties: {
            readonly courier_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Courier ID. Specify a courier supporting manifest creation (see [Supported Couriers and Conditions](https://support.easyship.com/hc/en-us/articles/4414489808525-What-Is-a-Manifest-in-Shipping) for details).";
                readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
            };
            readonly shipment_ids: {
                readonly type: "array";
                readonly description: "Shipment IDs based on Shipment API (see [Supported Couriers and Conditions](https://support.easyship.com/hc/en-us/articles/4414489808525-What-Is-a-Manifest-in-Shipping) for details).";
                readonly items: {
                    readonly type: "string";
                    readonly pattern: "^ES\\w{2}\\d{7,}$";
                    readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Manifest details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly manifest: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Manifest ID";
                        };
                        readonly courier: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Courier ID";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                            };
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Manifest creation date";
                        };
                        readonly ref_number: {
                            readonly type: "string";
                            readonly description: "Manifest reference number";
                        };
                        readonly shipments_count: {
                            readonly type: "number";
                            readonly description: "Number of shipments in manifest";
                        };
                        readonly document: {
                            readonly type: "object";
                            readonly description: "Manifest document";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly format: {
                                    readonly type: "string";
                                    readonly description: "Manifest document format\n\n`url`";
                                    readonly enum: readonly ["url"];
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "Manifest document URL";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ManifestsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly courier_umbrella_name: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by courier umbrella name";
                };
                readonly courier_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by courier id";
                };
                readonly ref_number: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by reference number provided when creating the manifest.";
                };
                readonly created_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Display only manifests created after this date (ISO8601 date format)";
                };
                readonly created_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Display only manifests created before this date (ISO8601 date format)";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of manifests";
            readonly additionalProperties: false;
            readonly properties: {
                readonly manifests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Manifest ID";
                            };
                            readonly courier: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Courier ID";
                                    };
                                    readonly umbrella_name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier company that offers this service.";
                                    };
                                };
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Manifest creation date";
                            };
                            readonly ref_number: {
                                readonly type: "string";
                                readonly description: "Manifest reference number";
                            };
                            readonly shipments_count: {
                                readonly type: "number";
                                readonly description: "Number of shipments in manifest";
                            };
                            readonly document: {
                                readonly type: "object";
                                readonly description: "Manifest document";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly format: {
                                        readonly type: "string";
                                        readonly description: "Manifest document format\n\n`url`";
                                        readonly enum: readonly ["url"];
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Manifest document URL";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ManifestsShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly manifest_id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Manifest ID";
                };
            };
            readonly required: readonly ["manifest_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Manifest details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly manifest: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Manifest ID";
                        };
                        readonly courier: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Courier ID";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                            };
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Manifest creation date";
                        };
                        readonly ref_number: {
                            readonly type: "string";
                            readonly description: "Manifest reference number";
                        };
                        readonly shipments_count: {
                            readonly type: "number";
                            readonly description: "Number of shipments in manifest";
                        };
                        readonly document: {
                            readonly type: "object";
                            readonly description: "Manifest document";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly format: {
                                    readonly type: "string";
                                    readonly description: "Manifest document format\n\n`url`";
                                    readonly enum: readonly ["url"];
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "Manifest document URL";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentSourcesConfrim3DsCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["intent_id"];
        readonly properties: {
            readonly intent_id: {
                readonly type: "string";
                readonly description: "Reference ID to confirm the payment source. It could be found in the response of `POST /2024-09/payment_sources`.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Payment source details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly payment_source: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Payment source id in Easyship";
                        };
                        readonly third_party_source_id: {
                            readonly type: "string";
                            readonly description: "Third party payment source id";
                        };
                        readonly payment_method_type: {
                            readonly type: "string";
                            readonly enum: readonly ["card", "bank_account"];
                            readonly description: "`card` `bank_account`";
                        };
                        readonly bank_account: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly bank_name: {
                                    readonly type: "string";
                                    readonly description: "Bank name";
                                };
                                readonly holder_name: {
                                    readonly type: "string";
                                    readonly description: "Account holder name";
                                };
                                readonly last_four_digits: {
                                    readonly type: "string";
                                    readonly description: "Last four digits of bank account number";
                                };
                                readonly routing_number: {
                                    readonly type: "string";
                                    readonly description: "Routing number";
                                };
                                readonly is_verified: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the bank account is verified by Stripe";
                                };
                            };
                        };
                        readonly card: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly brand: {
                                    readonly type: "string";
                                    readonly description: "Credit card brand";
                                    readonly examples: readonly ["visa"];
                                };
                                readonly expiration_year: {
                                    readonly type: "string";
                                    readonly description: "The expiration year of the card";
                                    readonly examples: readonly ["2023"];
                                };
                                readonly expiration_month: {
                                    readonly type: "string";
                                    readonly description: "The expiration month of the card";
                                    readonly examples: readonly ["01"];
                                };
                                readonly last_four_digits: {
                                    readonly type: "string";
                                    readonly description: "Last four digits of credit card";
                                };
                                readonly holder_name: {
                                    readonly type: "string";
                                    readonly description: "Card holder name";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "Require action";
            readonly additionalProperties: false;
            readonly properties: {
                readonly action_required: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_3ds_validation`";
                                readonly enum: readonly ["require_3ds_validation"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after 3DS validation";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for the 3DS validation flow";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_micro_deposit_verification`";
                                readonly enum: readonly ["require_micro_deposit_verification"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID of the bank account setup intent";
                                    };
                                    readonly verification_url: {
                                        readonly type: "string";
                                        readonly description: "Link to Stripe micro deposit verification page";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for customizing verification page";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_bank_account_info`";
                                readonly enum: readonly ["require_bank_account_info"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after collecting bank account information";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for collection bank account information";
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "code";
                        readonly mapping: {
                            readonly require_3ds_validation: "#/components/schemas/3DSValidation";
                            readonly require_micro_deposit_verification: "#/components/schemas/RequireMicroDepositVerification";
                            readonly require_bank_account_info: "#/components/schemas/RequireBankAccountInfo";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentSourcesCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly additionalProperties: false;
            readonly required: readonly ["stripe_token", "type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the payment source";
                    readonly enum: readonly ["card"];
                    readonly examples: readonly ["card"];
                };
                readonly verify_3ds: {
                    readonly type: "boolean";
                    readonly description: "Force 3DS validation. If 3DS is required, a Stripe Client Secret will be provided for confirmation. The confirmation must be handled with [Stripe JS](https://docs.stripe.com/js/setup_intents/handle_next_action). This behavior will be enforced in the upcoming API version.";
                    readonly default: false;
                };
                readonly stripe_token: {
                    readonly type: "string";
                    readonly description: "Token generated via stripe js.";
                };
                readonly holder: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Card holder's name. This will only be applicable if the name was not assigned during token generation.";
                            readonly maxLength: 24;
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly required: readonly ["type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the payment source";
                    readonly enum: readonly ["bank_account"];
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly card: "#/components/schemas/PaymentSourceCreateCard";
                readonly bank_account: "#/components/schemas/PaymentSourceCreateBankAccount";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Payment source details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly payment_source: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Payment source id in Easyship";
                        };
                        readonly third_party_source_id: {
                            readonly type: "string";
                            readonly description: "Third party payment source id";
                        };
                        readonly payment_method_type: {
                            readonly type: "string";
                            readonly enum: readonly ["card", "bank_account"];
                            readonly description: "`card` `bank_account`";
                        };
                        readonly bank_account: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly bank_name: {
                                    readonly type: "string";
                                    readonly description: "Bank name";
                                };
                                readonly holder_name: {
                                    readonly type: "string";
                                    readonly description: "Account holder name";
                                };
                                readonly last_four_digits: {
                                    readonly type: "string";
                                    readonly description: "Last four digits of bank account number";
                                };
                                readonly routing_number: {
                                    readonly type: "string";
                                    readonly description: "Routing number";
                                };
                                readonly is_verified: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the bank account is verified by Stripe";
                                };
                            };
                        };
                        readonly card: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly brand: {
                                    readonly type: "string";
                                    readonly description: "Credit card brand";
                                    readonly examples: readonly ["visa"];
                                };
                                readonly expiration_year: {
                                    readonly type: "string";
                                    readonly description: "The expiration year of the card";
                                    readonly examples: readonly ["2023"];
                                };
                                readonly expiration_month: {
                                    readonly type: "string";
                                    readonly description: "The expiration month of the card";
                                    readonly examples: readonly ["01"];
                                };
                                readonly last_four_digits: {
                                    readonly type: "string";
                                    readonly description: "Last four digits of credit card";
                                };
                                readonly holder_name: {
                                    readonly type: "string";
                                    readonly description: "Card holder name";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "Require action";
            readonly additionalProperties: false;
            readonly properties: {
                readonly action_required: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_3ds_validation`";
                                readonly enum: readonly ["require_3ds_validation"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after 3DS validation";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for the 3DS validation flow";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_micro_deposit_verification`";
                                readonly enum: readonly ["require_micro_deposit_verification"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID of the bank account setup intent";
                                    };
                                    readonly verification_url: {
                                        readonly type: "string";
                                        readonly description: "Link to Stripe micro deposit verification page";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for customizing verification page";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "Action code\n\n`require_bank_account_info`";
                                readonly enum: readonly ["require_bank_account_info"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly intent_id: {
                                        readonly type: "string";
                                        readonly description: "Reference ID to confirm intent after collecting bank account information";
                                    };
                                    readonly client_secret: {
                                        readonly type: "string";
                                        readonly description: "Client secret for collection bank account information";
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "code";
                        readonly mapping: {
                            readonly require_3ds_validation: "#/components/schemas/3DSValidation";
                            readonly require_micro_deposit_verification: "#/components/schemas/RequireMicroDepositVerification";
                            readonly require_bank_account_info: "#/components/schemas/RequireBankAccountInfo";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentSourcesDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly payment_source_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment source ID provided when creating";
                };
            };
            readonly required: readonly ["payment_source_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentSourcesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly payment_sources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Payment source id in Easyship";
                            };
                            readonly third_party_source_id: {
                                readonly type: "string";
                                readonly description: "Third party payment source id";
                            };
                            readonly payment_method_type: {
                                readonly type: "string";
                                readonly enum: readonly ["card", "bank_account"];
                                readonly description: "`card` `bank_account`";
                            };
                            readonly bank_account: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly bank_name: {
                                        readonly type: "string";
                                        readonly description: "Bank name";
                                    };
                                    readonly holder_name: {
                                        readonly type: "string";
                                        readonly description: "Account holder name";
                                    };
                                    readonly last_four_digits: {
                                        readonly type: "string";
                                        readonly description: "Last four digits of bank account number";
                                    };
                                    readonly routing_number: {
                                        readonly type: "string";
                                        readonly description: "Routing number";
                                    };
                                    readonly is_verified: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the bank account is verified by Stripe";
                                    };
                                };
                            };
                            readonly card: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly brand: {
                                        readonly type: "string";
                                        readonly description: "Credit card brand";
                                        readonly examples: readonly ["visa"];
                                    };
                                    readonly expiration_year: {
                                        readonly type: "string";
                                        readonly description: "The expiration year of the card";
                                        readonly examples: readonly ["2023"];
                                    };
                                    readonly expiration_month: {
                                        readonly type: "string";
                                        readonly description: "The expiration month of the card";
                                        readonly examples: readonly ["01"];
                                    };
                                    readonly last_four_digits: {
                                        readonly type: "string";
                                        readonly description: "Last four digits of credit card";
                                    };
                                    readonly holder_name: {
                                        readonly type: "string";
                                        readonly description: "Card holder name";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentSourcesUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["set_default_for"];
        readonly properties: {
            readonly set_default_for: {
                readonly type: "string";
                readonly description: "Set current payment source as the default for selected property";
                readonly enum: readonly ["shipment"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly payment_source_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment source ID provided when creating";
                };
            };
            readonly required: readonly ["payment_source_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Payment source details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly payment_source: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Payment source id in Easyship";
                        };
                        readonly third_party_source_id: {
                            readonly type: "string";
                            readonly description: "Third party payment source id";
                        };
                        readonly payment_method_type: {
                            readonly type: "string";
                            readonly enum: readonly ["card", "bank_account"];
                            readonly description: "`card` `bank_account`";
                        };
                        readonly bank_account: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly bank_name: {
                                    readonly type: "string";
                                    readonly description: "Bank name";
                                };
                                readonly holder_name: {
                                    readonly type: "string";
                                    readonly description: "Account holder name";
                                };
                                readonly last_four_digits: {
                                    readonly type: "string";
                                    readonly description: "Last four digits of bank account number";
                                };
                                readonly routing_number: {
                                    readonly type: "string";
                                    readonly description: "Routing number";
                                };
                                readonly is_verified: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the bank account is verified by Stripe";
                                };
                            };
                        };
                        readonly card: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly brand: {
                                    readonly type: "string";
                                    readonly description: "Credit card brand";
                                    readonly examples: readonly ["visa"];
                                };
                                readonly expiration_year: {
                                    readonly type: "string";
                                    readonly description: "The expiration year of the card";
                                    readonly examples: readonly ["2023"];
                                };
                                readonly expiration_month: {
                                    readonly type: "string";
                                    readonly description: "The expiration month of the card";
                                    readonly examples: readonly ["01"];
                                };
                                readonly last_four_digits: {
                                    readonly type: "string";
                                    readonly description: "Last four digits of credit card";
                                };
                                readonly holder_name: {
                                    readonly type: "string";
                                    readonly description: "Card holder name";
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PickupsCancel: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_pickup_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Pickup ID";
                };
            };
            readonly required: readonly ["easyship_pickup_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PickupsCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Pickup params";
        readonly additionalProperties: false;
        readonly properties: {
            readonly courier_service_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "The unique identifier for the courier service.";
                readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
            };
            readonly time_slot_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Time Slot ID from [Courier List Available Pickup Slots](#) API. Optional if `selected_from_time` and `selected_to_time` are provided.";
            };
            readonly selected_date: {
                readonly type: "string";
                readonly format: "date";
                readonly description: "Selected date for pickup";
            };
            readonly selected_from_time: {
                readonly type: "string";
                readonly description: "Selected from time for pickup. Optional if a `time_slot_id` is provided.";
            };
            readonly selected_to_time: {
                readonly type: "string";
                readonly description: "Selected to time for pickup. Optional if a `time_slot_id` is provided.";
            };
            readonly easyship_shipment_ids: {
                readonly type: "array";
                readonly description: "All shipments to be requested. Shipments must have the same courier and their labels must be pending or generated.";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly required: readonly ["courier_service_id", "selected_date", "easyship_shipment_ids"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly pickup: {
                    readonly type: "object";
                    readonly description: "Pickup";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_pickup_id: {
                            readonly type: "string";
                            readonly description: "Pickup ID";
                        };
                        readonly selected_from_time: {
                            readonly type: "string";
                        };
                        readonly selected_to_time: {
                            readonly type: "string";
                        };
                        readonly pickup_reference_number: {
                            readonly type: "string";
                        };
                        readonly pickup_fee: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly provider_name: {
                            readonly type: "string";
                        };
                        readonly shipments_count: {
                            readonly type: "number";
                            readonly format: "integer";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly pickup_state: {
                            readonly type: "string";
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly courier_id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The courier ID that the current courier service is associated with";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                                readonly easyship_courier_service: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                };
                            };
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly description: "Address object for Addresses API";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Address ID";
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly enum: readonly ["active", "inactive"];
                                    readonly description: "Status of the address\n\n`active` `inactive`";
                                };
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                                readonly default_for: {
                                    readonly type: "object";
                                    readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly billing: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default billing address";
                                        };
                                        readonly sender: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default sender address";
                                        };
                                        readonly pickup: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default pickup address";
                                        };
                                        readonly return: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default return address";
                                        };
                                    };
                                };
                                readonly hk_district: {
                                    readonly type: "object";
                                    readonly description: "Details of the district for an address in Hong Kong. Display only applicable for addresses in Hong Kong.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                        };
                                        readonly area: {
                                            readonly type: "string";
                                        };
                                        readonly district: {
                                            readonly type: "string";
                                        };
                                        readonly zone: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly validation: {
                                    readonly type: "object";
                                    readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                            readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                        };
                                        readonly detail: {
                                            readonly type: "string";
                                            readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                        };
                                        readonly comparison: {
                                            readonly type: "object";
                                            readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly pre: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                    readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                };
                                                readonly post: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                    readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                };
                                                readonly changes: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                                    readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                                };
                                            };
                                        };
                                        readonly address: {
                                            readonly type: "object";
                                            readonly description: "The validated address as sourced from validation service";
                                            readonly properties: {
                                                readonly line_1: {
                                                    readonly type: "string";
                                                    readonly description: "First line of the street address";
                                                };
                                                readonly line_2: {
                                                    readonly type: "string";
                                                    readonly description: "Second line of the street address";
                                                };
                                                readonly line_3: {
                                                    readonly type: "string";
                                                    readonly description: "Third line of the street address";
                                                    readonly maximum: 35;
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                    readonly description: "City or Suburb";
                                                };
                                                readonly postal_code: {
                                                    readonly type: "string";
                                                    readonly description: "Postal code.";
                                                };
                                                readonly country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                };
                                                readonly company_name: {
                                                    readonly type: "string";
                                                    readonly description: "The company or organization at the address";
                                                };
                                                readonly contact_name: {
                                                    readonly type: "string";
                                                    readonly description: "The full name of a person at the address";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_ids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly available_balance: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PickupsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly pickup_date: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selected pickup date. Only accept `YYYY-MM-DD` format.";
                };
                readonly courier: {
                    readonly type: "string";
                    readonly enum: readonly ["USPS", "Australia Post eParcel", "StarTrack", "Royal Mail", "DHL eCommerce", "Canada Post", "Quantium", "OmniParcel"];
                    readonly examples: readonly ["DHL"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Courier name";
                };
                readonly pickup_state: {
                    readonly type: "string";
                    readonly enum: readonly ["cancelled", "completed", "partially-completed", "pending-confirmation", "pending-delayed-api-request", "pending-drop-off", "pending-handover", "request-failed", "request-pickup-window-failed", "request-technical-failed", "requested"];
                    readonly examples: readonly ["request-failed"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pickup state";
                };
                readonly shipment_id: {
                    readonly type: "string";
                    readonly examples: readonly ["ESHK1234567"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipment ID";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Pickups";
            readonly additionalProperties: false;
            readonly properties: {
                readonly pickups: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Pickup";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly easyship_pickup_id: {
                                readonly type: "string";
                                readonly description: "Pickup ID";
                            };
                            readonly selected_from_time: {
                                readonly type: "string";
                            };
                            readonly selected_to_time: {
                                readonly type: "string";
                            };
                            readonly pickup_reference_number: {
                                readonly type: "string";
                            };
                            readonly pickup_fee: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly provider_name: {
                                readonly type: "string";
                            };
                            readonly shipments_count: {
                                readonly type: "number";
                                readonly format: "integer";
                            };
                            readonly total_actual_weight: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly pickup_state: {
                                readonly type: "string";
                            };
                            readonly courier_service: {
                                readonly type: "object";
                                readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly courier_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "The courier ID that the current courier service is associated with";
                                    };
                                    readonly umbrella_name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier company that offers this service.";
                                    };
                                    readonly easyship_courier_service: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                    };
                                };
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Address object for Addresses API";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Address ID";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["active", "inactive"];
                                        readonly description: "Status of the address\n\n`active` `inactive`";
                                    };
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 27;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 22;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name\"";
                                        readonly maximum: 50;
                                    };
                                    readonly default_for: {
                                        readonly type: "object";
                                        readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly billing: {
                                                readonly type: "boolean";
                                                readonly description: "Whether this is the default billing address";
                                            };
                                            readonly sender: {
                                                readonly type: "boolean";
                                                readonly description: "Whether this is the default sender address";
                                            };
                                            readonly pickup: {
                                                readonly type: "boolean";
                                                readonly description: "Whether this is the default pickup address";
                                            };
                                            readonly return: {
                                                readonly type: "boolean";
                                                readonly description: "Whether this is the default return address";
                                            };
                                        };
                                    };
                                    readonly hk_district: {
                                        readonly type: "object";
                                        readonly description: "Details of the district for an address in Hong Kong. Display only applicable for addresses in Hong Kong.";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "integer";
                                            };
                                            readonly area: {
                                                readonly type: "string";
                                            };
                                            readonly district: {
                                                readonly type: "string";
                                            };
                                            readonly zone: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly validation: {
                                        readonly type: "object";
                                        readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly status: {
                                                readonly type: "string";
                                                readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                            };
                                            readonly detail: {
                                                readonly type: "string";
                                                readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                            };
                                            readonly comparison: {
                                                readonly type: "object";
                                                readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly pre: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                        readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                    };
                                                    readonly post: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                        readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                    };
                                                    readonly changes: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                                        readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                                    };
                                                };
                                            };
                                            readonly address: {
                                                readonly type: "object";
                                                readonly description: "The validated address as sourced from validation service";
                                                readonly properties: {
                                                    readonly line_1: {
                                                        readonly type: "string";
                                                        readonly description: "First line of the street address";
                                                    };
                                                    readonly line_2: {
                                                        readonly type: "string";
                                                        readonly description: "Second line of the street address";
                                                    };
                                                    readonly line_3: {
                                                        readonly type: "string";
                                                        readonly description: "Third line of the street address";
                                                        readonly maximum: 35;
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                                    };
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "City or Suburb";
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly description: "Postal code.";
                                                    };
                                                    readonly country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                    };
                                                    readonly company_name: {
                                                        readonly type: "string";
                                                        readonly description: "The company or organization at the address";
                                                    };
                                                    readonly contact_name: {
                                                        readonly type: "string";
                                                        readonly description: "The full name of a person at the address";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PickupsShipmentsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pickup_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pickup ID";
                };
            };
            readonly required: readonly ["pickup_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly platform_order_number: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Order number on the sales platform.";
                };
                readonly created_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments created since this date: ISO8601 date format.";
                };
                readonly created_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments created before this date: ISO8601 date format.";
                };
                readonly updated_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments updated since this date: ISO8601 date format.";
                };
                readonly updated_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments updated before this date: ISO8601 date format.";
                };
                readonly label_paid_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments where the labels were paid for since this date: ISO8601 date format.";
                };
                readonly label_paid_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments where the labels were paid for before this date: ISO8601 date format.";
                };
                readonly label_generated_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for labels generated since this date: ISO8601 date format.";
                };
                readonly label_generated_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for labels generated before this date: ISO8601 date format.";
                };
                readonly shipment_state: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "cancelled"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current status of shipment.";
                };
                readonly label_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported"];
                    };
                    readonly examples: readonly ["not_created", "pending"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current label status of shipment.";
                };
                readonly pickup_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["not_requested", "pending_confirmation", "pending_drop_off", "request_failed", "requested", "completed", "cancelled"];
                    };
                    readonly examples: readonly ["not_requested", "pending_confirmation"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current pickup status of shipment.";
                };
                readonly delivery_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                    };
                    readonly examples: readonly ["not_created", "pending"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current delivery status of shipment.";
                };
                readonly warehouse_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "created", "packed", "shipped"];
                    };
                    readonly examples: readonly ["pending", "created"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "For eFulfilment only. Search by current warehouse status of shipment.";
                };
                readonly origin_country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["HK", "UK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by the shipment origin country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly destination_country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["HK", "UK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by shipment destination country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly return: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by shipment whether the shipment is return shipment or not.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of shipments";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipments: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the shipment record was created in the Easyship system";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the shipment record was most recently modified";
                            };
                            readonly label_paid_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When Easyship was paid for the shipment";
                            };
                            readonly label_generated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When label was generated";
                            };
                            readonly origin_address: {
                                readonly type: "object";
                                readonly description: "Origin address";
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 27;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 22;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name\"";
                                        readonly maximum: 50;
                                    };
                                };
                            };
                            readonly sender_address: {
                                readonly type: "object";
                                readonly description: "Sender address";
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 27;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 22;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name\"";
                                        readonly maximum: 50;
                                    };
                                };
                            };
                            readonly return_address: {
                                readonly type: "object";
                                readonly description: "Return address";
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 27;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 22;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name\"";
                                        readonly maximum: 50;
                                    };
                                };
                            };
                            readonly destination_address: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly maximum: 200;
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 50;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 50;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name`";
                                        readonly maximum: 50;
                                    };
                                    readonly delivery_instructions: {
                                        readonly type: "string";
                                        readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                        readonly maximum: 200;
                                    };
                                };
                            };
                            readonly order_data: {
                                readonly type: "object";
                                readonly description: "Free-form data related to the eCommerce platform";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly platform_name: {
                                        readonly type: "string";
                                        readonly description: "A display-ready sales channel or platform name";
                                        readonly maximum: 200;
                                    };
                                    readonly platform_order_number: {
                                        readonly type: "string";
                                        readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                        readonly maximum: 200;
                                    };
                                    readonly order_created_at: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                    };
                                    readonly order_tag_list: {
                                        readonly type: "array";
                                        readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly maxItems: 500;
                                    };
                                    readonly seller_notes: {
                                        readonly type: "string";
                                        readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                    };
                                    readonly buyer_notes: {
                                        readonly type: "string";
                                        readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                    };
                                    readonly buyer_selected_courier_name: {
                                        readonly type: "string";
                                        readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                    };
                                };
                            };
                            readonly last_failure_http_response_messages: {
                                readonly type: "array";
                                readonly description: "This attribute stores the HTTP response of the most recent unsuccessful attempt to interact with an external service, such as a failed label creation.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly code: {
                                            readonly type: "string";
                                        };
                                        readonly content: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                                readonly additionalProperties: true;
                            };
                            readonly set_as_residential: {
                                readonly type: "boolean";
                                readonly description: "Indicates whether or not the user believes the receiver address qualifies for a residential surcharge.";
                            };
                            readonly consignee_tax_id: {
                                readonly type: "string";
                                readonly description: "Tax ID for the receiver. Maybe helpful or required for customs clearance, depending on the destination country.";
                            };
                            readonly eei_reference: {
                                readonly type: "string";
                                readonly description: "References data (Electronic Export Information) filed through one of the systems for goods shipped from the U.S.\nto a foreign country. Currently only used for FedEx shipments. The following possibilities may or may not qualify:\n  * An Automated Export System (AES) citation\n  * A Foreign Trade Regulations (FTR) exemption number\n  * An International Traffic in Arms Reduction (ITAR) exemption code\n  * A US Department of Commerce export license number";
                            };
                            readonly regulatory_identifiers: {
                                readonly type: "object";
                                readonly description: "Seller's identifiers for various tax, import and export regulations.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly eori: {
                                        readonly type: "string";
                                        readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                    };
                                    readonly ioss: {
                                        readonly type: "string";
                                        readonly description: "Import One Stop Shop (IOSS) number.";
                                    };
                                    readonly vat_number: {
                                        readonly type: "string";
                                        readonly description: "Value-Added Tax (VAT) number.";
                                    };
                                };
                            };
                            readonly buyer_regulatory_identifiers: {
                                readonly type: "object";
                                readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly ein: {
                                        readonly type: "string";
                                        readonly description: "Employer Identification Number (EIN) number.";
                                    };
                                    readonly vat_number: {
                                        readonly type: "string";
                                        readonly description: "Value-Added Tax (VAT) number.";
                                    };
                                    readonly ssn: {
                                        readonly type: "string";
                                        readonly description: "Social Security Number (SSN) number.";
                                    };
                                };
                            };
                            readonly return: {
                                readonly type: "boolean";
                                readonly description: "Whether the shipment is a return shipment or not";
                            };
                            readonly incoterms: {
                                readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                readonly type: "string";
                                readonly enum: readonly ["DDU", "DDP", any];
                                readonly default: "DDU";
                            };
                            readonly insurance: {
                                readonly type: "object";
                                readonly description: "Insurance";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly is_insured: {
                                        readonly type: "boolean";
                                        readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                        readonly default: false;
                                    };
                                    readonly insured_amount: {
                                        readonly type: "number";
                                        readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                    };
                                    readonly insured_currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                };
                            };
                            readonly parcels: {
                                readonly type: "array";
                                readonly description: "Parcels";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "ID of the parcel";
                                        };
                                        readonly total_actual_weight: {
                                            readonly type: "number";
                                            readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                        };
                                        readonly box: {
                                            readonly type: "object";
                                            readonly description: "User-defined details of a box used for shipments";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "ID";
                                                };
                                                readonly courier: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly umbrella_name: {
                                                            readonly type: "string";
                                                            readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                                        };
                                                        readonly country_alpha2: {
                                                            readonly type: "string";
                                                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                        };
                                                    };
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Name";
                                                };
                                                readonly slug: {
                                                    readonly type: "string";
                                                    readonly description: "Slug";
                                                };
                                                readonly outer_dimensions: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly description: "A measure of the space taken by the box itself, in cm.";
                                                    readonly properties: {
                                                        readonly length: {
                                                            readonly type: "number";
                                                        };
                                                        readonly width: {
                                                            readonly type: "number";
                                                        };
                                                        readonly height: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                                readonly weight: {
                                                    readonly type: "number";
                                                    readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly description: "Box type.";
                                                };
                                            };
                                        };
                                        readonly items: {
                                            readonly type: "array";
                                            readonly description: "Array of all shipment items";
                                            readonly minItems: 1;
                                            readonly maxItems: 200;
                                            readonly items: {
                                                readonly type: "object";
                                                readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "ID of the item";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "Description of the item";
                                                        readonly maximum: 200;
                                                    };
                                                    readonly category: {
                                                        readonly type: "string";
                                                        readonly description: "Item Category slug. Use the Item Categories API to retrieve a list of available item categories or use HS Code field.";
                                                        readonly maximum: 200;
                                                    };
                                                    readonly sku: {
                                                        readonly type: "string";
                                                        readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                                        readonly maximum: 100;
                                                    };
                                                    readonly hs_code: {
                                                        readonly type: "string";
                                                        readonly description: "HS Code of the item";
                                                    };
                                                    readonly origin_country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                                    };
                                                    readonly contains_battery_pi966: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                                    };
                                                    readonly contains_battery_pi967: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                                    };
                                                    readonly contains_liquids: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                                    };
                                                    readonly quantity: {
                                                        readonly type: "integer";
                                                        readonly description: "Item quantity";
                                                        readonly default: 1;
                                                    };
                                                    readonly dimensions: {
                                                        readonly type: "object";
                                                        readonly description: "Dimensions of the item";
                                                        readonly additionalProperties: false;
                                                        readonly properties: {
                                                            readonly length: {
                                                                readonly type: "number";
                                                                readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                            };
                                                            readonly width: {
                                                                readonly type: "number";
                                                                readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                            };
                                                            readonly height: {
                                                                readonly type: "number";
                                                                readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                            };
                                                        };
                                                    };
                                                    readonly actual_weight: {
                                                        readonly type: "number";
                                                        readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                                    };
                                                    readonly origin_currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                        readonly examples: readonly ["USD"];
                                                    };
                                                    readonly origin_customs_value: {
                                                        readonly type: "number";
                                                        readonly description: "Customs value of the item";
                                                    };
                                                    readonly declared_currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                        readonly examples: readonly ["USD"];
                                                    };
                                                    readonly declared_customs_value: {
                                                        readonly type: "number";
                                                        readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly total_customs_value: {
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly description: "Sum of the value assigned to all shipment line items";
                            };
                            readonly total_actual_weight: {
                                readonly type: "number";
                                readonly description: "Sum of the specified weights of all *parcels* in the shipment (`parcel.actual_weight`), as measured on a scale in units specified by `company.weight_unit`.";
                            };
                            readonly shipment_state: {
                                readonly type: "string";
                                readonly description: "The state of the shipment record within the Easyship system\n\n`created` `draft` `calculating` `cancelling` `cancelled` `discarded` `deleted`";
                                readonly default: "created";
                                readonly enum: readonly ["created", "draft", "calculating", "cancelling", "cancelled", "discarded", "deleted"];
                            };
                            readonly pickup_state: {
                                readonly type: "string";
                                readonly default: "not_requested";
                                readonly description: "The state of the hand-over from shipper to courier. `pending_handover` applies only to eFulfillment companies.";
                            };
                            readonly delivery_state: {
                                readonly type: "string";
                                readonly default: "not_created";
                                readonly description: "The state of the hand-over from courier to receiver.\n\n`not_created` `pending` `info_received` `in_transit_to_customer` `out_for_delivery` `delivered` `failed_attempt` `exception` `expired` `lost_by_courier` `returned_to_shipper`";
                                readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                            };
                            readonly label_state: {
                                readonly type: "string";
                                readonly default: "not_created";
                                readonly description: "The state of the label(s) meant to be printed and attached to this shipment's parcels\n\n`not_created` `pending` `generating` `generated` `printed` `failed` `technical_failed` `reported` `voided` `void_failed`";
                                readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported", "voided", "void_failed"];
                            };
                            readonly warehouse_state: {
                                readonly type: "string";
                                readonly default: "none";
                                readonly description: "The state of the fulfillment process within the warehouse\n\n`none` `pending` `created` `failed` `packed` `cancelled` `cancelled_no_stock` `backorder_no_stock` `shipped` `returned` `awaiting_dispatch`";
                                readonly enum: readonly ["none", "pending", "created", "failed", "packed", "cancelled", "cancelled_no_stock", "backorder_no_stock", "shipped", "returned", "awaiting_dispatch"];
                            };
                            readonly warehouse_code: {
                                readonly type: "string";
                                readonly description: "Warehouse code (warehouse/eFulfilment only)";
                            };
                            readonly original_easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly trackings: {
                                readonly type: "array";
                                readonly description: "Sources of tracking data for this shipment";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "A source of tracking data for the shipment's journey";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Reference provided by the courier for this leg";
                                        };
                                        readonly local_tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Local tracking number provided by DHL eCommerce";
                                        };
                                        readonly alternate_tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Alternate tracking number provided by DHL eCommerce";
                                        };
                                        readonly leg_number: {
                                            readonly type: "integer";
                                            readonly minimum: 1;
                                            readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                        };
                                        readonly handler: {
                                            readonly type: "string";
                                            readonly description: "The service that is handling the tracking process";
                                        };
                                        readonly tracking_state: {
                                            readonly type: "string";
                                            readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                            readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                        };
                                    };
                                };
                            };
                            readonly tracking_page_url: {
                                readonly type: "string";
                                readonly description: "Tracking page URL";
                            };
                            readonly shipping_documents: {
                                readonly type: "array";
                                readonly description: "Shipping documents";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly category: {
                                            readonly type: "string";
                                            readonly description: "Document category";
                                        };
                                        readonly required: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the document is required";
                                        };
                                        readonly format: {
                                            readonly type: "string";
                                            readonly description: "Document format";
                                        };
                                        readonly page_size: {
                                            readonly type: "string";
                                            readonly description: "Page size";
                                        };
                                        readonly base64_encoded_strings: {
                                            readonly type: "array";
                                            readonly description: "Base64 encoded strings";
                                            readonly items: {
                                                readonly type: "string";
                                                readonly format: "byte";
                                            };
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly description: "URL of the document";
                                        };
                                    };
                                };
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                            readonly courier_service: {
                                readonly type: "object";
                                readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly courier_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "The courier ID that the current courier service is associated with";
                                    };
                                    readonly umbrella_name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier company that offers this service.";
                                    };
                                    readonly easyship_courier_service: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                    };
                                };
                            };
                            readonly rates: {
                                readonly type: "array";
                                readonly description: "Array of available courier services for this shipment, along with the rates charged. Courier services are excluded if the shipment's contents or destination do not meet each service's eligibility requirements.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly courier_service: {
                                            readonly type: "object";
                                            readonly description: "Courier Service for Rate";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "unique identifier for a courier service";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Human-readable name for the courier service used in this rate.";
                                                };
                                                readonly courier_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "The courier ID that the current courier service is associated with";
                                                };
                                                readonly umbrella_name: {
                                                    readonly type: "string";
                                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                                };
                                                readonly logo: {
                                                    readonly type: "string";
                                                    readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                                    readonly deprecated: true;
                                                };
                                                readonly easyship_courier_service: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                                };
                                            };
                                        };
                                        readonly min_delivery_time: {
                                            readonly type: "integer";
                                            readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                                        };
                                        readonly max_delivery_time: {
                                            readonly type: "integer";
                                            readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                                        };
                                        readonly value_for_money_rank: {
                                            readonly type: "number";
                                            readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                                        };
                                        readonly delivery_time_rank: {
                                            readonly type: "number";
                                            readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                                        };
                                        readonly cost_rank: {
                                            readonly type: "number";
                                            readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                            readonly examples: readonly ["USD"];
                                        };
                                        readonly shipment_charge: {
                                            readonly type: "number";
                                            readonly description: "Base cost of the courier service";
                                        };
                                        readonly fuel_surcharge: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when fuel costs are high";
                                        };
                                        readonly remote_area_surcharge: {
                                            readonly type: "number";
                                            readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                        };
                                        readonly remote_area_surcharges: {
                                            readonly description: "Origin and destination remote area surcharges";
                                            readonly type: "object";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly origin: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["Pickup Area Surcharge"];
                                                        };
                                                        readonly base: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                                readonly destination: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["Delivery Area Surcharge"];
                                                        };
                                                        readonly base: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly other_surcharges: {
                                            readonly type: "object";
                                            readonly description: "Other surcharges";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly total_fee: {
                                                    readonly type: "number";
                                                    readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                                };
                                                readonly details: {
                                                    readonly type: "array";
                                                    readonly description: "An array of individual surcharges being applied";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly additionalProperties: false;
                                                        readonly properties: {
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "Surcharge name, in English, to be displayed to user";
                                                                readonly examples: readonly ["Peak Surcharge"];
                                                            };
                                                            readonly fee: {
                                                                readonly type: "number";
                                                                readonly description: "Surcharge fee in the currency of the shipment";
                                                            };
                                                            readonly origin_fee: {
                                                                readonly type: "number";
                                                                readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly oversized_surcharge: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                        };
                                        readonly additional_services_surcharge: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                        };
                                        readonly residential_full_fee: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when the receiver is at a residential address";
                                        };
                                        readonly residential_discounted_fee: {
                                            readonly type: "number";
                                            readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                        };
                                        readonly shipment_charge_total: {
                                            readonly type: "number";
                                            readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                        };
                                        readonly warehouse_handling_fee: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                        };
                                        readonly insurance_fee: {
                                            readonly type: "number";
                                            readonly description: "The cost of the insurance policy purchased for this shipment";
                                        };
                                        readonly sales_tax: {
                                            readonly type: "number";
                                            readonly description: "National government taxes, calculated as a portion of the purchase price";
                                        };
                                        readonly provincial_sales_tax: {
                                            readonly type: "number";
                                            readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                        };
                                        readonly ddp_handling_fee: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly import_tax_charge: {
                                            readonly type: "number";
                                            readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly import_tax_non_chargeable: {
                                            readonly type: "number";
                                            readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly import_duty_charge: {
                                            readonly type: "number";
                                            readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly total_charge: {
                                            readonly type: "number";
                                            readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                        };
                                        readonly is_above_threshold: {
                                            readonly type: "boolean";
                                            readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                                        };
                                        readonly incoterms: {
                                            readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                            readonly type: "string";
                                            readonly enum: readonly ["DDU", "DDP", any];
                                            readonly default: "DDU";
                                        };
                                        readonly estimated_import_tax: {
                                            readonly type: "number";
                                            readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly estimated_import_duty: {
                                            readonly type: "number";
                                            readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly minimum_pickup_fee: {
                                            readonly type: "number";
                                            readonly minimum: 0;
                                            readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                        };
                                        readonly available_handover_options: {
                                            readonly type: "array";
                                            readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly tracking_rating: {
                                            readonly type: "number";
                                            readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                            readonly minimum: -1;
                                            readonly maximum: 3;
                                        };
                                        readonly easyship_rating: {
                                            readonly type: "number";
                                            readonly minimum: 0;
                                            readonly maximum: 5;
                                            readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                                        };
                                        readonly courier_remarks: {
                                            readonly type: "string";
                                            readonly description: "Additional details relevant to choosing the appropriate courier service";
                                        };
                                        readonly payment_recipient: {
                                            readonly type: "string";
                                            readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                            readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                                        };
                                        readonly discount: {
                                            readonly type: "object";
                                            readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly amount: {
                                                    readonly type: "number";
                                                    readonly description: "A fixed amount to discount from the price";
                                                };
                                                readonly origin_amount: {
                                                    readonly type: "number";
                                                    readonly description: "Discount origin amount";
                                                };
                                            };
                                        };
                                        readonly rates_in_origin_currency: {
                                            readonly type: "object";
                                            readonly description: "Rates in origin currency";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly shipment_charge: {
                                                    readonly type: "number";
                                                    readonly description: "Base cost of the courier service";
                                                };
                                                readonly fuel_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when fuel costs are high";
                                                };
                                                readonly remote_area_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                                };
                                                readonly additional_services_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                                };
                                                readonly oversized_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                                };
                                                readonly shipment_charge_total: {
                                                    readonly type: "number";
                                                    readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                                };
                                                readonly warehouse_handling_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                                };
                                                readonly insurance_fee: {
                                                    readonly type: "number";
                                                    readonly description: "The cost of the insurance policy purchased for this shipment";
                                                };
                                                readonly ddp_handling_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly import_tax_charge: {
                                                    readonly type: "number";
                                                    readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly import_tax_non_chargeable: {
                                                    readonly type: "number";
                                                    readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly import_duty_charge: {
                                                    readonly type: "number";
                                                    readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly residential_discounted_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                                };
                                                readonly residential_full_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when the receiver is at a residential address";
                                                };
                                                readonly total_charge: {
                                                    readonly type: "number";
                                                    readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                                };
                                                readonly estimated_import_tax: {
                                                    readonly type: "number";
                                                    readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly estimated_import_duty: {
                                                    readonly type: "number";
                                                    readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly sales_tax: {
                                                    readonly type: "number";
                                                    readonly description: "National government taxes, calculated as a portion of the purchase price";
                                                };
                                                readonly provincial_sales_tax: {
                                                    readonly type: "number";
                                                    readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                                };
                                                readonly minimum_pickup_fee: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                                };
                                            };
                                        };
                                        readonly description: {
                                            readonly type: "string";
                                            readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                                        };
                                        readonly full_description: {
                                            readonly type: "string";
                                            readonly description: "Full description";
                                        };
                                    };
                                };
                            };
                            readonly shipping_settings: {
                                readonly type: "object";
                                readonly description: "Shipping settings";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly b13a_filing: {
                                        readonly type: "object";
                                        readonly description: "B13A filing (currently available only for FedEx)";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly option: {
                                                readonly type: "string";
                                                readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                                readonly description: "`not_required` `fedex_to_stamp` `filed_electronically` `manually_attached` `summary_reporting`";
                                            };
                                            readonly option_export_compliance_statement: {
                                                readonly type: "string";
                                                readonly description: "Export compliance statement";
                                            };
                                            readonly permit_number: {
                                                readonly type: "string";
                                                readonly description: "Permit number";
                                            };
                                        };
                                    };
                                    readonly label_customization_fields: {
                                        readonly anyOf: readonly [{
                                            readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                            readonly type: "array";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "object";
                                                readonly required: readonly ["value"];
                                                readonly properties: {
                                                    readonly code: {
                                                        readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                        readonly type: "string";
                                                    };
                                                    readonly value: {
                                                        readonly type: "string";
                                                        readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    };
                                                    readonly convert_to_barcode: {
                                                        readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "array";
                                            readonly minItems: 0;
                                            readonly items: {};
                                        }];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PickupsShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_pickup_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Pickup ID";
                };
            };
            readonly required: readonly ["easyship_pickup_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly pickup: {
                    readonly type: "object";
                    readonly description: "Pickup";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_pickup_id: {
                            readonly type: "string";
                            readonly description: "Pickup ID";
                        };
                        readonly selected_from_time: {
                            readonly type: "string";
                        };
                        readonly selected_to_time: {
                            readonly type: "string";
                        };
                        readonly pickup_reference_number: {
                            readonly type: "string";
                        };
                        readonly pickup_fee: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly provider_name: {
                            readonly type: "string";
                        };
                        readonly shipments_count: {
                            readonly type: "number";
                            readonly format: "integer";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly pickup_state: {
                            readonly type: "string";
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly courier_id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The courier ID that the current courier service is associated with";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                                readonly easyship_courier_service: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                };
                            };
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly description: "Address object for Addresses API";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Address ID";
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly enum: readonly ["active", "inactive"];
                                    readonly description: "Status of the address\n\n`active` `inactive`";
                                };
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                                readonly default_for: {
                                    readonly type: "object";
                                    readonly description: "Each element indicates if the address is set as default value for pickup, billing, sender, and return address.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly billing: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default billing address";
                                        };
                                        readonly sender: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default sender address";
                                        };
                                        readonly pickup: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default pickup address";
                                        };
                                        readonly return: {
                                            readonly type: "boolean";
                                            readonly description: "Whether this is the default return address";
                                        };
                                    };
                                };
                                readonly hk_district: {
                                    readonly type: "object";
                                    readonly description: "Details of the district for an address in Hong Kong. Display only applicable for addresses in Hong Kong.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                        };
                                        readonly area: {
                                            readonly type: "string";
                                        };
                                        readonly district: {
                                            readonly type: "string";
                                        };
                                        readonly zone: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly validation: {
                                    readonly type: "object";
                                    readonly description: "Available only when the Address Validation is active for your account and the address was created by Address Validation";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                            readonly description: "Status of the address validation. Refers to the validation output (not the input).";
                                        };
                                        readonly detail: {
                                            readonly type: "string";
                                            readonly description: "The relative level to which the post-processed address is verifiable while also considering its closeness to the input data.";
                                        };
                                        readonly comparison: {
                                            readonly type: "object";
                                            readonly description: "A descriptive comparison of the pre/post validated address. Similar to `detail` with more fidelity.";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly pre: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                    readonly description: "The verification level of the address before validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                };
                                                readonly post: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["delivery_point", "premise", "street", "city", "state", "none"];
                                                    readonly description: "The verification level of the address after validation.\n\n`delivery_point` `premise` `street` `city` `state` `none`";
                                                };
                                                readonly changes: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["none", "minor", "moderate", "major", "drastic"];
                                                    readonly description: "The extent of changes made to the address during validation. * `none` - No changes * `minor` - Minor changes like capitalization or a single character * `moderate` - Moderate changes worth reviewing * `major` - Larger changes worth reviewing * `drastic` - Drastic changes worth reviewing\n\n\n`none` `minor` `moderate` `major` `drastic`";
                                                };
                                            };
                                        };
                                        readonly address: {
                                            readonly type: "object";
                                            readonly description: "The validated address as sourced from validation service";
                                            readonly properties: {
                                                readonly line_1: {
                                                    readonly type: "string";
                                                    readonly description: "First line of the street address";
                                                };
                                                readonly line_2: {
                                                    readonly type: "string";
                                                    readonly description: "Second line of the street address";
                                                };
                                                readonly line_3: {
                                                    readonly type: "string";
                                                    readonly description: "Third line of the street address";
                                                    readonly maximum: 35;
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                    readonly description: "City or Suburb";
                                                };
                                                readonly postal_code: {
                                                    readonly type: "string";
                                                    readonly description: "Postal code.";
                                                };
                                                readonly country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                };
                                                readonly company_name: {
                                                    readonly type: "string";
                                                    readonly description: "The company or organization at the address";
                                                };
                                                readonly contact_name: {
                                                    readonly type: "string";
                                                    readonly description: "The full name of a person at the address";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_ids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly available_balance: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductsCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Product ID";
                readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0001"];
            };
            readonly store_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Store ID";
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Human-readable name of the product.";
                readonly maxLength: 200;
            };
            readonly comments: {
                readonly type: "string";
            };
            readonly input_type: {
                readonly type: "string";
                readonly enum: readonly ["manual_input", "product_sync", "api", "api_upload", "csv_upload"];
            };
            readonly identifier: {
                readonly type: "string";
                readonly description: "SKU for the product. This should be unique per one store. Identifier is required when store_id or platform_product_id is empty.";
            };
            readonly length: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Length of the product in cm (centimeters).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly width: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Width of the product in cm (centimeters).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly height: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Height of the product in cm (centimeters).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly weight: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Weight of the product in kg (kilograms).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly item_category_id: {
                readonly type: "integer";
                readonly description: "Item Category ID";
            };
            readonly platform_product_id: {
                readonly type: "string";
            };
            readonly cost_price: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Cost of the product.";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly cost_price_currency: {
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                readonly examples: readonly ["USD"];
            };
            readonly selling_price: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Product selling price.";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly selling_price_currency: {
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                readonly examples: readonly ["USD"];
            };
            readonly image_url: {
                readonly type: "string";
                readonly description: "Image URL of the product.";
            };
            readonly pick_location: {
                readonly type: "string";
                readonly description: "Pickup location for the product.";
                readonly maximum: 80;
            };
            readonly origin_country_alpha2: {
                readonly type: "string";
                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
            };
            readonly hs_code: {
                readonly type: "string";
            };
            readonly contains_liquids: {
                readonly type: "boolean";
                readonly description: "Check if the product contains liquid.";
            };
            readonly contains_battery_pi966: {
                readonly type: "boolean";
                readonly description: "Check if the product should apply packing instruction 966.";
            };
            readonly contains_battery_pi967: {
                readonly type: "boolean";
                readonly description: "Check if the product should apply packing instruction 967.";
            };
            readonly created_at: {
                readonly type: "string";
            };
            readonly updated_at: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Product detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly product: {
                    readonly type: "object";
                    readonly description: "Product";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product ID";
                        };
                        readonly store_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Store ID";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Human-readable name of the product.";
                        };
                        readonly item_category: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly description: "Item Category ID";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Item Category Name";
                                };
                            };
                        };
                        readonly comments: {
                            readonly type: "string";
                        };
                        readonly input_type: {
                            readonly type: "string";
                            readonly enum: readonly ["manual_input", "product_sync", "api", "api_upload", "csv_upload"];
                            readonly description: "`manual_input` `product_sync` `api` `api_upload` `csv_upload`";
                        };
                        readonly identifier: {
                            readonly type: "string";
                            readonly description: "SKU for the product.";
                        };
                        readonly length: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product length in cm (centimeters).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product width in cm (centimeters).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product height in cm (centimeters).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly weight: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product weight in kg (kilograms).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly platform_product_id: {
                            readonly type: "string";
                        };
                        readonly cost_price: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly cost_price_currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly selling_price: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly selling_price_currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly image_url: {
                            readonly type: "string";
                        };
                        readonly pick_location: {
                            readonly type: "string";
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                        };
                        readonly hs_code: {
                            readonly type: "string";
                        };
                        readonly contains_liquids: {
                            readonly type: "boolean";
                        };
                        readonly contains_battery_pi966: {
                            readonly type: "boolean";
                        };
                        readonly contains_battery_pi967: {
                            readonly type: "boolean";
                        };
                        readonly created_at: {
                            readonly type: "string";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductsDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly product_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Product ID provided when deleting product";
                };
            };
            readonly required: readonly ["product_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly sku: {
                    readonly type: "string";
                    readonly examples: readonly ["SKU-7773839"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by SKU";
                };
                readonly category: {
                    readonly type: "string";
                    readonly examples: readonly ["Health"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by product category";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of products";
            readonly additionalProperties: false;
            readonly properties: {
                readonly products: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Product";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Product ID";
                            };
                            readonly store_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Store ID";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Human-readable name of the product.";
                            };
                            readonly item_category: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly description: "Item Category ID";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Item Category Name";
                                    };
                                };
                            };
                            readonly comments: {
                                readonly type: "string";
                            };
                            readonly input_type: {
                                readonly type: "string";
                                readonly enum: readonly ["manual_input", "product_sync", "api", "api_upload", "csv_upload"];
                                readonly description: "`manual_input` `product_sync` `api` `api_upload` `csv_upload`";
                            };
                            readonly identifier: {
                                readonly type: "string";
                                readonly description: "SKU for the product.";
                            };
                            readonly length: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly description: "Product length in cm (centimeters).";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly width: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly description: "Product width in cm (centimeters).";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly height: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly description: "Product height in cm (centimeters).";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly weight: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly description: "Product weight in kg (kilograms).";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly platform_product_id: {
                                readonly type: "string";
                            };
                            readonly cost_price: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly cost_price_currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                            readonly selling_price: {
                                readonly type: "number";
                                readonly format: "double";
                                readonly minimum: -1.7976931348623157e+308;
                                readonly maximum: 1.7976931348623157e+308;
                            };
                            readonly selling_price_currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                            readonly image_url: {
                                readonly type: "string";
                            };
                            readonly pick_location: {
                                readonly type: "string";
                            };
                            readonly origin_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                            };
                            readonly hs_code: {
                                readonly type: "string";
                            };
                            readonly contains_liquids: {
                                readonly type: "boolean";
                            };
                            readonly contains_battery_pi966: {
                                readonly type: "boolean";
                            };
                            readonly contains_battery_pi967: {
                                readonly type: "boolean";
                            };
                            readonly created_at: {
                                readonly type: "string";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductsUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Product ID";
            };
            readonly store_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Store ID";
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Human-readable name of the product.";
                readonly maxLength: 200;
            };
            readonly comments: {
                readonly type: "string";
            };
            readonly input_type: {
                readonly type: "string";
                readonly enum: readonly ["manual_input", "product_sync", "api", "api_upload", "csv_upload"];
            };
            readonly identifier: {
                readonly type: "string";
                readonly description: "SKU for the product. This should be unique per one store. Identifier is required when store_id or platform_product_id is empty.";
            };
            readonly length: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Length of the product in cm (centimeters).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly width: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Width of the product in cm (centimeters).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly height: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Height of the product in cm (centimeters).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly weight: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Weight of the product in kg (kilograms).";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly item_category_id: {
                readonly type: "integer";
                readonly description: "Item Category ID";
            };
            readonly platform_product_id: {
                readonly type: "string";
            };
            readonly cost_price: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Cost of the product.";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly cost_price_currency: {
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                readonly examples: readonly ["USD"];
            };
            readonly selling_price: {
                readonly type: "number";
                readonly format: "double";
                readonly description: "Product selling price.";
                readonly minimum: 0;
                readonly exclusiveMinimum: true;
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly selling_price_currency: {
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                readonly examples: readonly ["USD"];
            };
            readonly image_url: {
                readonly type: "string";
                readonly description: "Image URL of the product.";
            };
            readonly pick_location: {
                readonly type: "string";
                readonly description: "Pickup location for the product.";
                readonly maximum: 80;
            };
            readonly origin_country_alpha2: {
                readonly type: "string";
                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
            };
            readonly hs_code: {
                readonly type: "string";
            };
            readonly contains_liquids: {
                readonly type: "boolean";
                readonly description: "Check if the product contains liquid.";
            };
            readonly contains_battery_pi966: {
                readonly type: "boolean";
                readonly description: "Check if the product should apply packing instruction 966.";
            };
            readonly contains_battery_pi967: {
                readonly type: "boolean";
                readonly description: "Check if the product should apply packing instruction 967.";
            };
            readonly created_at: {
                readonly type: "string";
            };
            readonly updated_at: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly product_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Product ID provided when updating product";
                };
            };
            readonly required: readonly ["product_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Product detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly product: {
                    readonly type: "object";
                    readonly description: "Product";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product ID";
                        };
                        readonly store_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Store ID";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Human-readable name of the product.";
                        };
                        readonly item_category: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly description: "Item Category ID";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Item Category Name";
                                };
                            };
                        };
                        readonly comments: {
                            readonly type: "string";
                        };
                        readonly input_type: {
                            readonly type: "string";
                            readonly enum: readonly ["manual_input", "product_sync", "api", "api_upload", "csv_upload"];
                            readonly description: "`manual_input` `product_sync` `api` `api_upload` `csv_upload`";
                        };
                        readonly identifier: {
                            readonly type: "string";
                            readonly description: "SKU for the product.";
                        };
                        readonly length: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product length in cm (centimeters).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product width in cm (centimeters).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product height in cm (centimeters).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly weight: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Product weight in kg (kilograms).";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly platform_product_id: {
                            readonly type: "string";
                        };
                        readonly cost_price: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly cost_price_currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly selling_price: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly selling_price_currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR", any];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly image_url: {
                            readonly type: "string";
                        };
                        readonly pick_location: {
                            readonly type: "string";
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                        };
                        readonly hs_code: {
                            readonly type: "string";
                        };
                        readonly contains_liquids: {
                            readonly type: "boolean";
                        };
                        readonly contains_battery_pi966: {
                            readonly type: "boolean";
                        };
                        readonly contains_battery_pi967: {
                            readonly type: "boolean";
                        };
                        readonly created_at: {
                            readonly type: "string";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatesRequest: {
    readonly body: {
        readonly type: "object";
        readonly description: "Rates request body";
        readonly additionalProperties: false;
        readonly required: readonly ["origin_address", "destination_address", "parcels"];
        readonly properties: {
            readonly origin_address: {
                readonly type: "object";
                readonly description: "Origin Address";
                readonly required: readonly ["state", "city", "postal_code"];
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly destination_address: {
                readonly type: "object";
                readonly description: "Destination Address";
                readonly required: readonly ["line_1", "state", "city", "postal_code", "country_alpha2"];
                readonly additionalProperties: false;
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly maximum: 200;
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name`";
                        readonly maximum: 50;
                    };
                    readonly delivery_instructions: {
                        readonly type: "string";
                        readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                        readonly maximum: 200;
                    };
                };
            };
            readonly incoterms: {
                readonly description: "Terms of Sale";
                readonly type: "string";
                readonly enum: readonly ["DDU", "DDP", any];
                readonly default: "DDU";
            };
            readonly insurance: {
                readonly type: "object";
                readonly description: "Insurance";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly is_insured: {
                        readonly type: "boolean";
                        readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                        readonly default: false;
                    };
                    readonly insured_amount: {
                        readonly type: "number";
                        readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                    };
                    readonly insured_currency: {
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                        readonly examples: readonly ["USD"];
                    };
                };
            };
            readonly return: {
                readonly type: "boolean";
                readonly description: "Set the shipment as a return shipment";
            };
            readonly courier_settings: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly show_courier_logo_url: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "Return courier logo URL";
                    };
                    readonly apply_shipping_rules: {
                        readonly type: "boolean";
                        readonly default: true;
                        readonly description: "Apply any [shipping rules](https://support.easyship.com/hc/en-us/articles/115003580152-Automate-Shipping-Process-Shipping-Rules) created on the Easyship dashboard (Default: `true`)";
                    };
                };
            };
            readonly shipping_settings: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly units: {
                        readonly type: "object";
                        readonly description: "Units";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly weight: {
                                readonly type: "string";
                                readonly description: "Unit of weight values provided. Options: `kg` / `g` / `lb` / `oz` (Default: `kg`). Unit of values in the response will be in `kg`.";
                                readonly default: "kg";
                                readonly enum: readonly ["kg", "g", "lb", "oz"];
                            };
                            readonly dimensions: {
                                readonly type: "string";
                                readonly description: "Unit of dimension values provided. Options: `cm` / `in` (Default: `cm`) Unit of values in the response will be in `cm`.";
                                readonly default: "cm";
                                readonly enum: readonly ["cm", "in"];
                            };
                        };
                    };
                    readonly output_currency: {
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                        readonly examples: readonly ["USD"];
                    };
                };
            };
            readonly parcels: {
                readonly type: "array";
                readonly description: "Parcels";
                readonly minItems: 1;
                readonly items: {
                    readonly type: "object";
                    readonly description: "Parcel";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                        };
                        readonly box: {
                            readonly type: "object";
                            readonly description: "The box dimensions for the shipment. If the box dimensions are provided, then dimensions for items are optional.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly slug: {
                                    readonly type: "string";
                                    readonly description: "Courier or Custom Box Slug. Use the [Boxes API](https://developers.easyship.com/reference/boxes_index) to retrieve a list of available boxes.";
                                };
                                readonly length: {
                                    readonly type: "number";
                                    readonly description: "Length of the box";
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly description: "Width of the box";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly description: "Height of the box";
                                };
                            };
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly description: "Array of all shipment items";
                            readonly items: {
                                readonly anyOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly description: {
                                            readonly type: "string";
                                            readonly description: "Description of the item";
                                            readonly maximum: 200;
                                        };
                                        readonly category: {
                                            readonly type: "string";
                                            readonly description: "Item category name or slug. Use the [Item Categories API](https://developers.easyship.com/reference/item_categories_index) to retrieve a list of available item categories.";
                                            readonly maximum: 200;
                                        };
                                        readonly sku: {
                                            readonly type: "string";
                                            readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                            readonly maximum: 100;
                                        };
                                        readonly hs_code: {
                                            readonly type: "string";
                                            readonly description: "HS Code of the item";
                                        };
                                        readonly contains_battery_pi966: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                        };
                                        readonly contains_battery_pi967: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                        };
                                        readonly contains_liquids: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                        };
                                        readonly origin_country_alpha2: {
                                            readonly type: "string";
                                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                        };
                                        readonly quantity: {
                                            readonly type: "integer";
                                            readonly description: "Item quantity";
                                            readonly default: 1;
                                        };
                                        readonly dimensions: {
                                            readonly type: "object";
                                            readonly description: "Dimensions of the item";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly length: {
                                                    readonly type: "number";
                                                    readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                };
                                                readonly width: {
                                                    readonly type: "number";
                                                    readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                };
                                                readonly height: {
                                                    readonly type: "number";
                                                    readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                };
                                            };
                                        };
                                        readonly actual_weight: {
                                            readonly type: "number";
                                            readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                        };
                                        readonly declared_currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                            readonly examples: readonly ["USD"];
                                        };
                                        readonly declared_customs_value: {
                                            readonly type: "number";
                                            readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly product: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "Product ID. Required if the `sku` is not provided.";
                                                };
                                                readonly sku: {
                                                    readonly type: "string";
                                                    readonly description: "Product SKU. Required if the `id` is not provided.";
                                                };
                                            };
                                        };
                                        readonly quantity: {
                                            readonly type: "integer";
                                            readonly description: "Item quantity";
                                            readonly default: 1;
                                        };
                                        readonly declared_currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                            readonly examples: readonly ["USD"];
                                        };
                                        readonly declared_customs_value: {
                                            readonly type: "number";
                                            readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Return Item (only available for return shipments)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Item ID (from the shipment that is being returned)";
                                        };
                                        readonly quantity: {
                                            readonly type: "integer";
                                            readonly description: "Item quantity";
                                            readonly default: 1;
                                        };
                                    };
                                }];
                            };
                            readonly minItems: 1;
                            readonly maxItems: 200;
                        };
                    };
                };
            };
            readonly filter_options: {
                readonly type: "object";
                readonly description: "Filter response by keywords";
                readonly properties: {
                    readonly courier_service_name: {
                        readonly type: "string";
                        readonly description: "Filter by courier service name";
                    };
                    readonly courier_service_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly description: "Filter by courier service IDs";
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of rates";
            readonly additionalProperties: false;
            readonly properties: {
                readonly rates: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly courier_service: {
                                readonly type: "object";
                                readonly description: "Courier Service for Rate";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "unique identifier for a courier service";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier service used in this rate.";
                                    };
                                    readonly courier_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "The courier ID that the current courier service is associated with";
                                    };
                                    readonly umbrella_name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier company that offers this service.";
                                    };
                                    readonly logo: {
                                        readonly type: "string";
                                        readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                        readonly deprecated: true;
                                    };
                                    readonly easyship_courier_service: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                    };
                                };
                            };
                            readonly min_delivery_time: {
                                readonly type: "integer";
                                readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                            };
                            readonly max_delivery_time: {
                                readonly type: "integer";
                                readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                            };
                            readonly value_for_money_rank: {
                                readonly type: "number";
                                readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                            };
                            readonly delivery_time_rank: {
                                readonly type: "number";
                                readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                            };
                            readonly cost_rank: {
                                readonly type: "number";
                                readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                            readonly shipment_charge: {
                                readonly type: "number";
                                readonly description: "Base cost of the courier service";
                            };
                            readonly fuel_surcharge: {
                                readonly type: "number";
                                readonly description: "A fee added by the courier when fuel costs are high";
                            };
                            readonly remote_area_surcharge: {
                                readonly type: "number";
                                readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                            };
                            readonly remote_area_surcharges: {
                                readonly description: "Origin and destination remote area surcharges";
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly origin: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly name: {
                                                readonly type: "string";
                                                readonly examples: readonly ["Pickup Area Surcharge"];
                                            };
                                            readonly base: {
                                                readonly type: "number";
                                            };
                                        };
                                    };
                                    readonly destination: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly name: {
                                                readonly type: "string";
                                                readonly examples: readonly ["Delivery Area Surcharge"];
                                            };
                                            readonly base: {
                                                readonly type: "number";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly other_surcharges: {
                                readonly type: "object";
                                readonly description: "Other surcharges";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly total_fee: {
                                        readonly type: "number";
                                        readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                    };
                                    readonly details: {
                                        readonly type: "array";
                                        readonly description: "An array of individual surcharges being applied";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Surcharge name, in English, to be displayed to user";
                                                    readonly examples: readonly ["Peak Surcharge"];
                                                };
                                                readonly fee: {
                                                    readonly type: "number";
                                                    readonly description: "Surcharge fee in the currency of the shipment";
                                                };
                                                readonly origin_fee: {
                                                    readonly type: "number";
                                                    readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly oversized_surcharge: {
                                readonly type: "number";
                                readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                            };
                            readonly additional_services_surcharge: {
                                readonly type: "number";
                                readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                            };
                            readonly residential_full_fee: {
                                readonly type: "number";
                                readonly description: "A fee added by the courier when the receiver is at a residential address";
                            };
                            readonly residential_discounted_fee: {
                                readonly type: "number";
                                readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                            };
                            readonly shipment_charge_total: {
                                readonly type: "number";
                                readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                            };
                            readonly warehouse_handling_fee: {
                                readonly type: "number";
                                readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                            };
                            readonly insurance_fee: {
                                readonly type: "number";
                                readonly description: "The cost of the insurance policy purchased for this shipment";
                            };
                            readonly sales_tax: {
                                readonly type: "number";
                                readonly description: "National government taxes, calculated as a portion of the purchase price";
                            };
                            readonly provincial_sales_tax: {
                                readonly type: "number";
                                readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                            };
                            readonly ddp_handling_fee: {
                                readonly type: "number";
                                readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                            };
                            readonly import_tax_charge: {
                                readonly type: "number";
                                readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                            };
                            readonly import_tax_non_chargeable: {
                                readonly type: "number";
                                readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                            };
                            readonly import_duty_charge: {
                                readonly type: "number";
                                readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                            };
                            readonly total_charge: {
                                readonly type: "number";
                                readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                            };
                            readonly is_above_threshold: {
                                readonly type: "boolean";
                                readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                            };
                            readonly incoterms: {
                                readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                readonly type: "string";
                                readonly enum: readonly ["DDU", "DDP", any];
                                readonly default: "DDU";
                            };
                            readonly estimated_import_tax: {
                                readonly type: "number";
                                readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                            };
                            readonly estimated_import_duty: {
                                readonly type: "number";
                                readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                            };
                            readonly minimum_pickup_fee: {
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                            };
                            readonly available_handover_options: {
                                readonly type: "array";
                                readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly tracking_rating: {
                                readonly type: "number";
                                readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                readonly minimum: -1;
                                readonly maximum: 3;
                            };
                            readonly easyship_rating: {
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 5;
                                readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                            };
                            readonly courier_remarks: {
                                readonly type: "string";
                                readonly description: "Additional details relevant to choosing the appropriate courier service";
                            };
                            readonly payment_recipient: {
                                readonly type: "string";
                                readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                            };
                            readonly discount: {
                                readonly type: "object";
                                readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly description: "A fixed amount to discount from the price";
                                    };
                                    readonly origin_amount: {
                                        readonly type: "number";
                                        readonly description: "Discount origin amount";
                                    };
                                };
                            };
                            readonly rates_in_origin_currency: {
                                readonly type: "object";
                                readonly description: "Rates in origin currency";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                    readonly shipment_charge: {
                                        readonly type: "number";
                                        readonly description: "Base cost of the courier service";
                                    };
                                    readonly fuel_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when fuel costs are high";
                                    };
                                    readonly remote_area_surcharge: {
                                        readonly type: "number";
                                        readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                    };
                                    readonly additional_services_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                    };
                                    readonly oversized_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                    };
                                    readonly shipment_charge_total: {
                                        readonly type: "number";
                                        readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                    };
                                    readonly warehouse_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                    };
                                    readonly insurance_fee: {
                                        readonly type: "number";
                                        readonly description: "The cost of the insurance policy purchased for this shipment";
                                    };
                                    readonly ddp_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_charge: {
                                        readonly type: "number";
                                        readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_non_chargeable: {
                                        readonly type: "number";
                                        readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_duty_charge: {
                                        readonly type: "number";
                                        readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly residential_discounted_fee: {
                                        readonly type: "number";
                                        readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly residential_full_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly total_charge: {
                                        readonly type: "number";
                                        readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                    };
                                    readonly estimated_import_tax: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly estimated_import_duty: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly sales_tax: {
                                        readonly type: "number";
                                        readonly description: "National government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly provincial_sales_tax: {
                                        readonly type: "number";
                                        readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly minimum_pickup_fee: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                    };
                                };
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                            };
                            readonly full_description: {
                                readonly type: "string";
                                readonly description: "Full description";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RedirectsCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly additionalProperties: false;
            readonly required: readonly ["target"];
            readonly properties: {
                readonly target: {
                    readonly type: "string";
                    readonly description: "The target of the redirect.";
                    readonly enum: readonly ["account_addresses", "account_billing", "account_company", "account_payment_methods", "account_profile", "account_subscription", "account_team", "analytics", "connect", "couriers", "help", "pickups", "products", "settings_boxes", "settings_email", "settings_insurance", "settings_notifications", "settings_packing_slip", "settings_printing_options", "settings_tracking_page", "shipment_create", "shipment_create_advanced", "shipments_all", "shipments_pending", "shipments_rejected", "shipments_to_print", "shipping_rules", "webhooks"];
                    readonly examples: readonly ["shipments_all"];
                };
            };
        }, {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly required: readonly ["target", "value"];
            readonly properties: {
                readonly target: {
                    readonly type: "string";
                    readonly description: "The target of the redirect.";
                    readonly enum: readonly ["shipment", "shipment_order", "ups_dap"];
                    readonly examples: readonly ["shipment"];
                };
                readonly value: {
                    readonly type: "string";
                    readonly description: "Easyship Shipment ID";
                };
            };
        }, {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly required: readonly ["target", "country", "redirect_back_url"];
            readonly properties: {
                readonly target: {
                    readonly type: "string";
                    readonly description: "The target of the redirect.";
                    readonly enum: readonly ["ups_dap"];
                    readonly examples: readonly ["ups_dap"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                    readonly enum: readonly ["US", "GB", "CA", "DE", "NL"];
                };
                readonly redirect_back_url: {
                    readonly type: "string";
                    readonly format: "uri";
                    readonly description: "Where to redirect back to after the target has been completed. A query param `ups_dap_status` will be added to the URL with the status of the UPS DAP (`accepted` or `cancelled`).";
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "target";
            readonly mapping: {
                readonly account_addresses: "#/components/schemas/RedirectBaseCreate";
                readonly account_billing: "#/components/schemas/RedirectBaseCreate";
                readonly account_company: "#/components/schemas/RedirectBaseCreate";
                readonly account_payment_methods: "#/components/schemas/RedirectBaseCreate";
                readonly account_profile: "#/components/schemas/RedirectBaseCreate";
                readonly account_subscription: "#/components/schemas/RedirectBaseCreate";
                readonly account_team: "#/components/schemas/RedirectBaseCreate";
                readonly analytics: "#/components/schemas/RedirectBaseCreate";
                readonly connect: "#/components/schemas/RedirectBaseCreate";
                readonly couriers: "#/components/schemas/RedirectBaseCreate";
                readonly help: "#/components/schemas/RedirectBaseCreate";
                readonly pickups: "#/components/schemas/RedirectBaseCreate";
                readonly products: "#/components/schemas/RedirectBaseCreate";
                readonly settings_boxes: "#/components/schemas/RedirectBaseCreate";
                readonly settings_email: "#/components/schemas/RedirectBaseCreate";
                readonly settings_insurance: "#/components/schemas/RedirectBaseCreate";
                readonly settings_notifications: "#/components/schemas/RedirectBaseCreate";
                readonly settings_packing_slip: "#/components/schemas/RedirectBaseCreate";
                readonly settings_printing_options: "#/components/schemas/RedirectBaseCreate";
                readonly settings_tracking_page: "#/components/schemas/RedirectBaseCreate";
                readonly shipment_create: "#/components/schemas/RedirectBaseCreate";
                readonly shipment_create_advanced: "#/components/schemas/RedirectBaseCreate";
                readonly shipments_all: "#/components/schemas/RedirectBaseCreate";
                readonly shipments_pending: "#/components/schemas/RedirectBaseCreate";
                readonly shipments_rejected: "#/components/schemas/RedirectBaseCreate";
                readonly shipments_to_print: "#/components/schemas/RedirectBaseCreate";
                readonly shipping_rules: "#/components/schemas/RedirectBaseCreate";
                readonly webhooks: "#/components/schemas/RedirectBaseCreate";
                readonly ups_dap: "#/components/schemas/RedirectUPSDAPCreate";
                readonly shipment: "#/components/schemas/RedirectWithShipmentIDCreate";
                readonly shipment_order: "#/components/schemas/RedirectWithShipmentIDCreate";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Redirect Detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly redirect: {
                    readonly type: "object";
                    readonly description: "Redirect Detail";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "The URL that the user should be redirected to.";
                        };
                        readonly expires_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date and time that the redirect will expire.";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReturnShipmentsCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly destination_address_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Address ID that will be loaded as destination address. The return address of the original shipment will be used when `destination_address_id` is not provided.";
                readonly examples: readonly ["01563646-58c1-4607-8fe0-cae3e33c0002"];
            };
            readonly courier_settings: {
                readonly type: "object";
                readonly properties: {
                    readonly courier_service_id: {
                        readonly type: "string";
                        readonly description: "Select a specific courier service to create the shipment with (applies if you integrate with the Rates API).";
                    };
                    readonly allow_fallback: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "If `courier_service_id` is provided but the courier can’t be selected, allow the shipment to be created and the next best rate to be selected. Default: `false`. When false and rates for the `courier_service_id` can't be found, an error will be raised and the shipment won’t be created.";
                    };
                    readonly apply_shipping_rules: {
                        readonly type: "boolean";
                        readonly default: true;
                        readonly description: "Apply any [shipping rules](https://support.easyship.com/hc/en-us/articles/115003580152-Automate-Shipping-Process-Shipping-Rules) created on the Easyship dashboard (Default: `true`)";
                    };
                    readonly list_unavailable_services: {
                        readonly type: "boolean";
                        readonly description: "Setting this option will return detailed information with reasons for each courier in the response.";
                    };
                };
            };
            readonly parcels: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly box: {
                            readonly type: "object";
                            readonly description: "The box dimensions for the shipment. If the box dimensions are provided, then dimensions for items are optional.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly slug: {
                                    readonly type: "string";
                                    readonly description: "Courier or Custom Box Slug. Use the [Boxes API](https://developers.easyship.com/reference/boxes_index) to retrieve a list of available boxes.";
                                };
                                readonly length: {
                                    readonly type: "number";
                                    readonly description: "Length of the box";
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly description: "Width of the box";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly description: "Height of the box";
                                };
                            };
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the actual_weight for items can be optional.";
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly description: "If not specified, all items from the shipment will be used.";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly required: readonly ["id"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Item ID from the shipment.";
                                    };
                                    readonly quantity: {
                                        readonly type: "integer";
                                        readonly description: "If not provided, the quantity from the shipment for this item will be used.";
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly shipping_settings: {
                readonly type: "object";
                readonly properties: {
                    readonly additional_services: {
                        readonly type: "object";
                        readonly description: "Configuration for additional services";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly qr_code: {
                                readonly type: "string";
                                readonly description: "Generate QR code when generating label. If a courier does not support it, label will be generated without the QR code. Currently officially supported only for USPS courier and Canada Post domestic shipment. For Canada Post, only allow the `qr_code` option. **Subject to change.**";
                                readonly default: "none";
                                readonly enum: readonly ["qr_code", "qr_code_with_label", "none"];
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Single shipment with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipment: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was created in the Easyship system";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was most recently modified";
                        };
                        readonly label_paid_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When Easyship was paid for the shipment";
                        };
                        readonly label_generated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When label was generated";
                        };
                        readonly origin_address: {
                            readonly type: "object";
                            readonly description: "Origin address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly sender_address: {
                            readonly type: "object";
                            readonly description: "Sender address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly return_address: {
                            readonly type: "object";
                            readonly description: "Return address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly destination_address: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly maximum: 200;
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name`";
                                    readonly maximum: 50;
                                };
                                readonly delivery_instructions: {
                                    readonly type: "string";
                                    readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                    readonly maximum: 200;
                                };
                            };
                        };
                        readonly order_data: {
                            readonly type: "object";
                            readonly description: "Free-form data related to the eCommerce platform";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly platform_name: {
                                    readonly type: "string";
                                    readonly description: "A display-ready sales channel or platform name";
                                    readonly maximum: 200;
                                };
                                readonly platform_order_number: {
                                    readonly type: "string";
                                    readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                    readonly maximum: 200;
                                };
                                readonly order_created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                };
                                readonly order_tag_list: {
                                    readonly type: "array";
                                    readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly maxItems: 500;
                                };
                                readonly seller_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                };
                                readonly buyer_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                };
                                readonly buyer_selected_courier_name: {
                                    readonly type: "string";
                                    readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                };
                            };
                        };
                        readonly last_failure_http_response_messages: {
                            readonly type: "array";
                            readonly description: "This attribute stores the HTTP response of the most recent unsuccessful attempt to interact with an external service, such as a failed label creation.";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly code: {
                                        readonly type: "string";
                                    };
                                    readonly content: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                            readonly additionalProperties: true;
                        };
                        readonly set_as_residential: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether or not the user believes the receiver address qualifies for a residential surcharge.";
                        };
                        readonly consignee_tax_id: {
                            readonly type: "string";
                            readonly description: "Tax ID for the receiver. Maybe helpful or required for customs clearance, depending on the destination country.";
                        };
                        readonly eei_reference: {
                            readonly type: "string";
                            readonly description: "References data (Electronic Export Information) filed through one of the systems for goods shipped from the U.S.\nto a foreign country. Currently only used for FedEx shipments. The following possibilities may or may not qualify:\n  * An Automated Export System (AES) citation\n  * A Foreign Trade Regulations (FTR) exemption number\n  * An International Traffic in Arms Reduction (ITAR) exemption code\n  * A US Department of Commerce export license number";
                        };
                        readonly regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Seller's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly eori: {
                                    readonly type: "string";
                                    readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                };
                                readonly ioss: {
                                    readonly type: "string";
                                    readonly description: "Import One Stop Shop (IOSS) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                            };
                        };
                        readonly buyer_regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly ein: {
                                    readonly type: "string";
                                    readonly description: "Employer Identification Number (EIN) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                                readonly ssn: {
                                    readonly type: "string";
                                    readonly description: "Social Security Number (SSN) number.";
                                };
                            };
                        };
                        readonly return: {
                            readonly type: "boolean";
                            readonly description: "Whether the shipment is a return shipment or not";
                        };
                        readonly incoterms: {
                            readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                            readonly type: "string";
                            readonly enum: readonly ["DDU", "DDP", any];
                            readonly default: "DDU";
                        };
                        readonly insurance: {
                            readonly type: "object";
                            readonly description: "Insurance";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly is_insured: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                    readonly default: false;
                                };
                                readonly insured_amount: {
                                    readonly type: "number";
                                    readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                };
                                readonly insured_currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                    readonly examples: readonly ["USD"];
                                };
                            };
                        };
                        readonly parcels: {
                            readonly type: "array";
                            readonly description: "Parcels";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "ID of the parcel";
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                    };
                                    readonly box: {
                                        readonly type: "object";
                                        readonly description: "User-defined details of a box used for shipments";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "ID";
                                            };
                                            readonly courier: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly umbrella_name: {
                                                        readonly type: "string";
                                                        readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                                    };
                                                    readonly country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                    };
                                                };
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name";
                                            };
                                            readonly slug: {
                                                readonly type: "string";
                                                readonly description: "Slug";
                                            };
                                            readonly outer_dimensions: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly description: "A measure of the space taken by the box itself, in cm.";
                                                readonly properties: {
                                                    readonly length: {
                                                        readonly type: "number";
                                                    };
                                                    readonly width: {
                                                        readonly type: "number";
                                                    };
                                                    readonly height: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly weight: {
                                                readonly type: "number";
                                                readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly description: "Box type.";
                                            };
                                        };
                                    };
                                    readonly items: {
                                        readonly type: "array";
                                        readonly description: "Array of all shipment items";
                                        readonly minItems: 1;
                                        readonly maxItems: 200;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "ID of the item";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "Description of the item";
                                                    readonly maximum: 200;
                                                };
                                                readonly category: {
                                                    readonly type: "string";
                                                    readonly description: "Item Category slug. Use the Item Categories API to retrieve a list of available item categories or use HS Code field.";
                                                    readonly maximum: 200;
                                                };
                                                readonly sku: {
                                                    readonly type: "string";
                                                    readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                                    readonly maximum: 100;
                                                };
                                                readonly hs_code: {
                                                    readonly type: "string";
                                                    readonly description: "HS Code of the item";
                                                };
                                                readonly origin_country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                                };
                                                readonly contains_battery_pi966: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_battery_pi967: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_liquids: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                                };
                                                readonly quantity: {
                                                    readonly type: "integer";
                                                    readonly description: "Item quantity";
                                                    readonly default: 1;
                                                };
                                                readonly dimensions: {
                                                    readonly type: "object";
                                                    readonly description: "Dimensions of the item";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly length: {
                                                            readonly type: "number";
                                                            readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly width: {
                                                            readonly type: "number";
                                                            readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly height: {
                                                            readonly type: "number";
                                                            readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                        };
                                                    };
                                                };
                                                readonly actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                                };
                                                readonly origin_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly origin_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Customs value of the item";
                                                };
                                                readonly declared_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly declared_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly total_customs_value: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly description: "Sum of the value assigned to all shipment line items";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Sum of the specified weights of all *parcels* in the shipment (`parcel.actual_weight`), as measured on a scale in units specified by `company.weight_unit`.";
                        };
                        readonly shipment_state: {
                            readonly type: "string";
                            readonly description: "The state of the shipment record within the Easyship system\n\n`created` `draft` `calculating` `cancelling` `cancelled` `discarded` `deleted`";
                            readonly default: "created";
                            readonly enum: readonly ["created", "draft", "calculating", "cancelling", "cancelled", "discarded", "deleted"];
                        };
                        readonly pickup_state: {
                            readonly type: "string";
                            readonly default: "not_requested";
                            readonly description: "The state of the hand-over from shipper to courier. `pending_handover` applies only to eFulfillment companies.";
                        };
                        readonly delivery_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the hand-over from courier to receiver.\n\n`not_created` `pending` `info_received` `in_transit_to_customer` `out_for_delivery` `delivered` `failed_attempt` `exception` `expired` `lost_by_courier` `returned_to_shipper`";
                            readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                        };
                        readonly label_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the label(s) meant to be printed and attached to this shipment's parcels\n\n`not_created` `pending` `generating` `generated` `printed` `failed` `technical_failed` `reported` `voided` `void_failed`";
                            readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported", "voided", "void_failed"];
                        };
                        readonly warehouse_state: {
                            readonly type: "string";
                            readonly default: "none";
                            readonly description: "The state of the fulfillment process within the warehouse\n\n`none` `pending` `created` `failed` `packed` `cancelled` `cancelled_no_stock` `backorder_no_stock` `shipped` `returned` `awaiting_dispatch`";
                            readonly enum: readonly ["none", "pending", "created", "failed", "packed", "cancelled", "cancelled_no_stock", "backorder_no_stock", "shipped", "returned", "awaiting_dispatch"];
                        };
                        readonly warehouse_code: {
                            readonly type: "string";
                            readonly description: "Warehouse code (warehouse/eFulfilment only)";
                        };
                        readonly original_easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly trackings: {
                            readonly type: "array";
                            readonly description: "Sources of tracking data for this shipment";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "A source of tracking data for the shipment's journey";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Reference provided by the courier for this leg";
                                    };
                                    readonly local_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Local tracking number provided by DHL eCommerce";
                                    };
                                    readonly alternate_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Alternate tracking number provided by DHL eCommerce";
                                    };
                                    readonly leg_number: {
                                        readonly type: "integer";
                                        readonly minimum: 1;
                                        readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                    };
                                    readonly handler: {
                                        readonly type: "string";
                                        readonly description: "The service that is handling the tracking process";
                                    };
                                    readonly tracking_state: {
                                        readonly type: "string";
                                        readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                        readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                    };
                                };
                            };
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly description: "Tracking page URL";
                        };
                        readonly shipping_documents: {
                            readonly type: "array";
                            readonly description: "Shipping documents";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category: {
                                        readonly type: "string";
                                        readonly description: "Document category";
                                    };
                                    readonly required: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the document is required";
                                    };
                                    readonly format: {
                                        readonly type: "string";
                                        readonly description: "Document format";
                                    };
                                    readonly page_size: {
                                        readonly type: "string";
                                        readonly description: "Page size";
                                    };
                                    readonly base64_encoded_strings: {
                                        readonly type: "array";
                                        readonly description: "Base64 encoded strings";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "byte";
                                        };
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "URL of the document";
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly courier_id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The courier ID that the current courier service is associated with";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                                readonly easyship_courier_service: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                };
                            };
                        };
                        readonly rates: {
                            readonly type: "array";
                            readonly description: "Array of available courier services for this shipment, along with the rates charged. Courier services are excluded if the shipment's contents or destination do not meet each service's eligibility requirements.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly courier_service: {
                                        readonly type: "object";
                                        readonly description: "Courier Service for Rate";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "unique identifier for a courier service";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier service used in this rate.";
                                            };
                                            readonly courier_id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "The courier ID that the current courier service is associated with";
                                            };
                                            readonly umbrella_name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier company that offers this service.";
                                            };
                                            readonly logo: {
                                                readonly type: "string";
                                                readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                                readonly deprecated: true;
                                            };
                                            readonly easyship_courier_service: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                            };
                                        };
                                    };
                                    readonly min_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly max_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly value_for_money_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                                    };
                                    readonly delivery_time_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                                    };
                                    readonly cost_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                    readonly shipment_charge: {
                                        readonly type: "number";
                                        readonly description: "Base cost of the courier service";
                                    };
                                    readonly fuel_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when fuel costs are high";
                                    };
                                    readonly remote_area_surcharge: {
                                        readonly type: "number";
                                        readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                    };
                                    readonly remote_area_surcharges: {
                                        readonly description: "Origin and destination remote area surcharges";
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly origin: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Pickup Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly destination: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Delivery Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly other_surcharges: {
                                        readonly type: "object";
                                        readonly description: "Other surcharges";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly total_fee: {
                                                readonly type: "number";
                                                readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                            };
                                            readonly details: {
                                                readonly type: "array";
                                                readonly description: "An array of individual surcharges being applied";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Surcharge name, in English, to be displayed to user";
                                                            readonly examples: readonly ["Peak Surcharge"];
                                                        };
                                                        readonly fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment";
                                                        };
                                                        readonly origin_fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly oversized_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                    };
                                    readonly additional_services_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                    };
                                    readonly residential_full_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly residential_discounted_fee: {
                                        readonly type: "number";
                                        readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly shipment_charge_total: {
                                        readonly type: "number";
                                        readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                    };
                                    readonly warehouse_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                    };
                                    readonly insurance_fee: {
                                        readonly type: "number";
                                        readonly description: "The cost of the insurance policy purchased for this shipment";
                                    };
                                    readonly sales_tax: {
                                        readonly type: "number";
                                        readonly description: "National government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly provincial_sales_tax: {
                                        readonly type: "number";
                                        readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly ddp_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_charge: {
                                        readonly type: "number";
                                        readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_non_chargeable: {
                                        readonly type: "number";
                                        readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_duty_charge: {
                                        readonly type: "number";
                                        readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly total_charge: {
                                        readonly type: "number";
                                        readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                    };
                                    readonly is_above_threshold: {
                                        readonly type: "boolean";
                                        readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                                    };
                                    readonly incoterms: {
                                        readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                        readonly type: "string";
                                        readonly enum: readonly ["DDU", "DDP", any];
                                        readonly default: "DDU";
                                    };
                                    readonly estimated_import_tax: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly estimated_import_duty: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly minimum_pickup_fee: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                    };
                                    readonly available_handover_options: {
                                        readonly type: "array";
                                        readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly tracking_rating: {
                                        readonly type: "number";
                                        readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                        readonly minimum: -1;
                                        readonly maximum: 3;
                                    };
                                    readonly easyship_rating: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 5;
                                        readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                                    };
                                    readonly courier_remarks: {
                                        readonly type: "string";
                                        readonly description: "Additional details relevant to choosing the appropriate courier service";
                                    };
                                    readonly payment_recipient: {
                                        readonly type: "string";
                                        readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                        readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                                    };
                                    readonly discount: {
                                        readonly type: "object";
                                        readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly amount: {
                                                readonly type: "number";
                                                readonly description: "A fixed amount to discount from the price";
                                            };
                                            readonly origin_amount: {
                                                readonly type: "number";
                                                readonly description: "Discount origin amount";
                                            };
                                        };
                                    };
                                    readonly rates_in_origin_currency: {
                                        readonly type: "object";
                                        readonly description: "Rates in origin currency";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                readonly examples: readonly ["USD"];
                                            };
                                            readonly shipment_charge: {
                                                readonly type: "number";
                                                readonly description: "Base cost of the courier service";
                                            };
                                            readonly fuel_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when fuel costs are high";
                                            };
                                            readonly remote_area_surcharge: {
                                                readonly type: "number";
                                                readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                            };
                                            readonly additional_services_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                            };
                                            readonly oversized_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                            };
                                            readonly shipment_charge_total: {
                                                readonly type: "number";
                                                readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                            };
                                            readonly warehouse_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                            };
                                            readonly insurance_fee: {
                                                readonly type: "number";
                                                readonly description: "The cost of the insurance policy purchased for this shipment";
                                            };
                                            readonly ddp_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_charge: {
                                                readonly type: "number";
                                                readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_non_chargeable: {
                                                readonly type: "number";
                                                readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_duty_charge: {
                                                readonly type: "number";
                                                readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly residential_discounted_fee: {
                                                readonly type: "number";
                                                readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly residential_full_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly total_charge: {
                                                readonly type: "number";
                                                readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                            };
                                            readonly estimated_import_tax: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly estimated_import_duty: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly sales_tax: {
                                                readonly type: "number";
                                                readonly description: "National government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly provincial_sales_tax: {
                                                readonly type: "number";
                                                readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly minimum_pickup_fee: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                            };
                                        };
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                        readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                                    };
                                    readonly full_description: {
                                        readonly type: "string";
                                        readonly description: "Full description";
                                    };
                                };
                            };
                        };
                        readonly shipping_settings: {
                            readonly type: "object";
                            readonly description: "Shipping settings";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly b13a_filing: {
                                    readonly type: "object";
                                    readonly description: "B13A filing (currently available only for FedEx)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly option: {
                                            readonly type: "string";
                                            readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                            readonly description: "`not_required` `fedex_to_stamp` `filed_electronically` `manually_attached` `summary_reporting`";
                                        };
                                        readonly option_export_compliance_statement: {
                                            readonly type: "string";
                                            readonly description: "Export compliance statement";
                                        };
                                        readonly permit_number: {
                                            readonly type: "string";
                                            readonly description: "Permit number";
                                        };
                                    };
                                };
                                readonly label_customization_fields: {
                                    readonly anyOf: readonly [{
                                        readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["value"];
                                            readonly properties: {
                                                readonly code: {
                                                    readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "string";
                                                    readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                                readonly convert_to_barcode: {
                                                    readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                            };
                                        };
                                    }, {
                                        readonly type: "array";
                                        readonly minItems: 0;
                                        readonly items: {};
                                    }];
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unavailable_couriers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "unique identifier for a courier service";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Unavailable courier name";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly description: "Unavailable reason";
                                    };
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SandboxTrackingsUpdate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Update a Tracking in sandbox environment";
        readonly additionalProperties: false;
        readonly properties: {
            readonly status_slug: {
                readonly type: "string";
                readonly description: "The abbreviation of the tracking status";
                readonly enum: readonly ["in_transit_to_customer", "out_for_delivery", "failed_attempt", "delivered", "exception"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly tracking_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Tracking ID provided when creating";
                };
            };
            readonly required: readonly ["tracking_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Single tracking with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly tracking: {
                    readonly type: "object";
                    readonly description: "Tracking details";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly tracking_number: {
                            readonly type: "string";
                            readonly description: "Reference provided by the courier for this leg";
                        };
                        readonly source: {
                            readonly type: "string";
                            readonly enum: readonly ["easyship", "external"];
                            readonly description: "`easyship` `external`";
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service";
                                };
                            };
                        };
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly platform_order_number: {
                            readonly type: "string";
                            readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                            readonly maximum: 200;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly destination_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly tracking_state: {
                            readonly type: "string";
                            readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                            readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The latest event status\n\n`Created` `Cancelled by Company` `Cancelled by Easyship` `Awaiting Pickup at Seller` `Assigned Pickup` `Picked Up at Seller` `Received at Fulfillment Center` `Verified` `Packed` `Pending Tracking Event` `Tracking Info Received` `In Transit to Customer` `Out for Delivery` `Failed Delivery Attempt` `Delivered` `Exception` `No Recent Tracking Updates` `Shipped (No Tracking Provided)` `In Transit to Consolidation Center` `Arrived at Consolidation Center` `Processing at Consolidation Center` `Delivery Expected (End of Updates)` `Shipped` `Incomplete` `Lost by Courier` `To be returned` `Archived` `Draft` `Cancelled` `Label Pending` `Label Ready` `Label Printed` `Pickup Scheduled` `Pickup Complete` `Cancelled (No Stock)` `Handed Over to Courier` `Label Rejected` `Drop-off Complete` `Dispatched from Sorting Hub` `Received at Local Fulfilment Center` `Awaiting Pickup Confirmation by Courier` `Pickup Request Failed` `Uncancelled` `Discarded Draft` `Liquidated` `Awaiting Confirmation by Warehouse` `Order Failed to Create at Warehouse` `Order Received by Warehouse` `Order Packed` `Order Collected` `Backorder (No Stock)` `Awaiting Dispatch by Warehouse` `Cancellation Requested` `Cancellation Request Failed`";
                            readonly enum: readonly ["Created", "Cancelled by Company", "Cancelled by Easyship", "Awaiting Pickup at Seller", "Assigned Pickup", "Picked Up at Seller", "Received at Fulfillment Center", "Verified", "Packed", "Pending Tracking Event", "Tracking Info Received", "In Transit to Customer", "Out for Delivery", "Failed Delivery Attempt", "Delivered", "Exception", "No Recent Tracking Updates", "Shipped (No Tracking Provided)", "In Transit to Consolidation Center", "Arrived at Consolidation Center", "Processing at Consolidation Center", "Delivery Expected (End of Updates)", "Shipped", "Incomplete", "Lost by Courier", "To be returned", "Archived", "Draft", "Cancelled", "Label Pending", "Label Ready", "Label Printed", "Pickup Scheduled", "Pickup Complete", "Cancelled (No Stock)", "Handed Over to Courier", "Label Rejected", "Drop-off Complete", "Dispatched from Sorting Hub", "Received at Local Fulfilment Center", "Awaiting Pickup Confirmation by Courier", "Pickup Request Failed", "Uncancelled", "Discarded Draft", "Liquidated", "Awaiting Confirmation by Warehouse", "Order Failed to Create at Warehouse", "Order Received by Warehouse", "Order Packed", "Order Collected", "Backorder (No Stock)", "Awaiting Dispatch by Warehouse", "Cancellation Requested", "Cancellation Request Failed"];
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "Tracking page URL. If certain condition is met, it will be empty.";
                        };
                        readonly eta_date: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SettingsIndex: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Setting";
            readonly additionalProperties: false;
            readonly properties: {
                readonly setting: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly tracking_email: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly display_options: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly header: {
                                            readonly type: "boolean";
                                            readonly default: false;
                                            readonly description: "Show the company logo in the tracking email. If this parameter is set to `true` but no logo is uploaded, the header will display the company name.";
                                        };
                                        readonly contact: {
                                            readonly type: "boolean";
                                            readonly default: false;
                                            readonly description: "Show the contact page with social media";
                                        };
                                    };
                                };
                                readonly allowed_statuses: {
                                    readonly type: "array";
                                    readonly maxItems: 5;
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["in_transit", "out_for_delivery", "unsuccessful_delivery_attempt", "delivered", "exception"];
                                        readonly description: "`in_transit` `out_for_delivery` `unsuccessful_delivery_attempt` `delivered` `exception`";
                                    };
                                    readonly description: "Select a shipment status to trigger a tracking updates email";
                                };
                                readonly button: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly background_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#50D4A4";
                                            readonly description: "Background color in HEX color code format";
                                        };
                                        readonly text_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#FFFFFF";
                                            readonly description: "Text color in HEX color code format";
                                        };
                                    };
                                };
                                readonly footnote: {
                                    readonly type: "string";
                                    readonly default: "Thanks for supporting our business - clearly, you have great taste!";
                                    readonly maxLength: 350;
                                };
                                readonly advertising: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly required: readonly ["title", "url"];
                                    readonly properties: {
                                        readonly title: {
                                            readonly type: "string";
                                            readonly enum: readonly ["Call Now", "Book Now", "Buy Now", "Contact Us", "Learn More", "See Offer", "Sign Up", "Shop Now", "Use App", "Visit Us", "Leave a Review", "Leave a Comment"];
                                            readonly description: "Advertising button in the tracking email\n\n`Call Now` `Book Now` `Buy Now` `Contact Us` `Learn More` `See Offer` `Sign Up` `Shop Now` `Use App` `Visit Us` `Leave a Review` `Leave a Comment`";
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly format: "uri";
                                            readonly description: "Link for the advertising button";
                                        };
                                    };
                                };
                            };
                        };
                        readonly tracking_page: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly display_options: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly header: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show the company logo in the tracking page. If this parameter is set to `true` but no logo is uploaded, the header will display the company name.";
                                        };
                                        readonly estimated_delivery_time: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show estimated delivery time";
                                        };
                                        readonly status_icon: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show an animated icon with delivery status";
                                        };
                                        readonly contact_courier: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show the link of courier's contact page";
                                        };
                                        readonly contact: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show the contact page with social media";
                                        };
                                    };
                                };
                                readonly button: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly background_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#50D4A4";
                                            readonly description: "Background color in HEX color code format";
                                        };
                                        readonly text_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#FFFFFF";
                                            readonly description: "Text color in HEX color code format";
                                        };
                                    };
                                };
                                readonly footnote: {
                                    readonly type: "string";
                                    readonly default: "Thanks for supporting our business - clearly, you have great taste!";
                                    readonly maxLength: 350;
                                };
                                readonly advertising: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly required: readonly ["title", "url"];
                                    readonly properties: {
                                        readonly title: {
                                            readonly type: "string";
                                            readonly enum: readonly ["Call Now", "Book Now", "Buy Now", "Contact Us", "Learn More", "See Offer", "Sign Up", "Shop Now", "Use App", "Visit Us", "Leave a Review", "Leave a Comment"];
                                            readonly description: "Advertising button in the tracking page\n\n`Call Now` `Book Now` `Buy Now` `Contact Us` `Learn More` `See Offer` `Sign Up` `Shop Now` `Use App` `Visit Us` `Leave a Review` `Leave a Comment`";
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly format: "uri";
                                            readonly description: "Link for the advertising button";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SettingsUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly tracking_email: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly display_options: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly header: {
                                readonly type: "boolean";
                                readonly default: false;
                                readonly description: "Show the company logo in the tracking email. If this parameter is set to `true` but no logo is uploaded, the header will display the company name.";
                            };
                            readonly contact: {
                                readonly type: "boolean";
                                readonly default: false;
                                readonly description: "Show the contact page with social media";
                            };
                        };
                    };
                    readonly allowed_statuses: {
                        readonly type: "array";
                        readonly maxItems: 5;
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["in_transit", "out_for_delivery", "unsuccessful_delivery_attempt", "delivered", "exception"];
                        };
                        readonly description: "Select a shipment status to trigger a tracking updates email";
                    };
                    readonly button: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly background_color: {
                                readonly type: "string";
                                readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                readonly default: "#50D4A4";
                                readonly description: "Background color in HEX color code format";
                            };
                            readonly text_color: {
                                readonly type: "string";
                                readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                readonly default: "#FFFFFF";
                                readonly description: "Text color in HEX color code format";
                            };
                        };
                    };
                    readonly footnote: {
                        readonly type: "string";
                        readonly default: "Thanks for supporting our business - clearly, you have great taste!";
                        readonly maxLength: 350;
                    };
                    readonly advertising: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly required: readonly ["title", "url"];
                        readonly properties: {
                            readonly title: {
                                readonly type: "string";
                                readonly enum: readonly ["Call Now", "Book Now", "Buy Now", "Contact Us", "Learn More", "See Offer", "Sign Up", "Shop Now", "Use App", "Visit Us", "Leave a Review", "Leave a Comment"];
                                readonly description: "Advertising button in the tracking email";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly format: "uri";
                                readonly description: "Link for the advertising button";
                            };
                        };
                    };
                };
            };
            readonly tracking_page: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly display_options: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly header: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Show the company logo in the tracking page. If this parameter is set to `true` but no logo is uploaded, the header will display the company name.";
                            };
                            readonly estimated_delivery_time: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Show estimated delivery time";
                            };
                            readonly status_icon: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Show an animated icon with delivery status";
                            };
                            readonly contact_courier: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Show the link of courier's contact page";
                            };
                            readonly contact: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Show the contact page with social media";
                            };
                        };
                    };
                    readonly button: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly background_color: {
                                readonly type: "string";
                                readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                readonly default: "#50D4A4";
                                readonly description: "Background color in HEX color code format";
                            };
                            readonly text_color: {
                                readonly type: "string";
                                readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                readonly default: "#FFFFFF";
                                readonly description: "Text color in HEX color code format";
                            };
                        };
                    };
                    readonly footnote: {
                        readonly type: "string";
                        readonly default: "Thanks for supporting our business - clearly, you have great taste!";
                        readonly maxLength: 350;
                    };
                    readonly advertising: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly required: readonly ["title", "url"];
                        readonly properties: {
                            readonly title: {
                                readonly type: "string";
                                readonly enum: readonly ["Call Now", "Book Now", "Buy Now", "Contact Us", "Learn More", "See Offer", "Sign Up", "Shop Now", "Use App", "Visit Us", "Leave a Review", "Leave a Comment"];
                                readonly description: "Advertising button in the tracking page";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly format: "uri";
                                readonly description: "Link for the advertising button";
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Setting";
            readonly additionalProperties: false;
            readonly properties: {
                readonly setting: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly tracking_email: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly display_options: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly header: {
                                            readonly type: "boolean";
                                            readonly default: false;
                                            readonly description: "Show the company logo in the tracking email. If this parameter is set to `true` but no logo is uploaded, the header will display the company name.";
                                        };
                                        readonly contact: {
                                            readonly type: "boolean";
                                            readonly default: false;
                                            readonly description: "Show the contact page with social media";
                                        };
                                    };
                                };
                                readonly allowed_statuses: {
                                    readonly type: "array";
                                    readonly maxItems: 5;
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["in_transit", "out_for_delivery", "unsuccessful_delivery_attempt", "delivered", "exception"];
                                        readonly description: "`in_transit` `out_for_delivery` `unsuccessful_delivery_attempt` `delivered` `exception`";
                                    };
                                    readonly description: "Select a shipment status to trigger a tracking updates email";
                                };
                                readonly button: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly background_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#50D4A4";
                                            readonly description: "Background color in HEX color code format";
                                        };
                                        readonly text_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#FFFFFF";
                                            readonly description: "Text color in HEX color code format";
                                        };
                                    };
                                };
                                readonly footnote: {
                                    readonly type: "string";
                                    readonly default: "Thanks for supporting our business - clearly, you have great taste!";
                                    readonly maxLength: 350;
                                };
                                readonly advertising: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly required: readonly ["title", "url"];
                                    readonly properties: {
                                        readonly title: {
                                            readonly type: "string";
                                            readonly enum: readonly ["Call Now", "Book Now", "Buy Now", "Contact Us", "Learn More", "See Offer", "Sign Up", "Shop Now", "Use App", "Visit Us", "Leave a Review", "Leave a Comment"];
                                            readonly description: "Advertising button in the tracking email\n\n`Call Now` `Book Now` `Buy Now` `Contact Us` `Learn More` `See Offer` `Sign Up` `Shop Now` `Use App` `Visit Us` `Leave a Review` `Leave a Comment`";
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly format: "uri";
                                            readonly description: "Link for the advertising button";
                                        };
                                    };
                                };
                            };
                        };
                        readonly tracking_page: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly display_options: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly header: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show the company logo in the tracking page. If this parameter is set to `true` but no logo is uploaded, the header will display the company name.";
                                        };
                                        readonly estimated_delivery_time: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show estimated delivery time";
                                        };
                                        readonly status_icon: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show an animated icon with delivery status";
                                        };
                                        readonly contact_courier: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show the link of courier's contact page";
                                        };
                                        readonly contact: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Show the contact page with social media";
                                        };
                                    };
                                };
                                readonly button: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly background_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#50D4A4";
                                            readonly description: "Background color in HEX color code format";
                                        };
                                        readonly text_color: {
                                            readonly type: "string";
                                            readonly pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
                                            readonly default: "#FFFFFF";
                                            readonly description: "Text color in HEX color code format";
                                        };
                                    };
                                };
                                readonly footnote: {
                                    readonly type: "string";
                                    readonly default: "Thanks for supporting our business - clearly, you have great taste!";
                                    readonly maxLength: 350;
                                };
                                readonly advertising: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly required: readonly ["title", "url"];
                                    readonly properties: {
                                        readonly title: {
                                            readonly type: "string";
                                            readonly enum: readonly ["Call Now", "Book Now", "Buy Now", "Contact Us", "Learn More", "See Offer", "Sign Up", "Shop Now", "Use App", "Visit Us", "Leave a Review", "Leave a Comment"];
                                            readonly description: "Advertising button in the tracking page\n\n`Call Now` `Book Now` `Buy Now` `Contact Us` `Learn More` `See Offer` `Sign Up` `Shop Now` `Use App` `Visit Us` `Leave a Review` `Leave a Comment`";
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly format: "uri";
                                            readonly description: "Link for the advertising button";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentUnavailableCouriersIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly unavailable_couriers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "unique identifier for a courier service";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Unavailable courier name";
                            };
                            readonly message: {
                                readonly type: "string";
                                readonly description: "Unavailable reason";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsCancel: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsCreate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly required: readonly ["parcels"];
        readonly properties: {
            readonly origin_address: {
                readonly type: "object";
                readonly description: "Origin Address";
                readonly required: readonly ["line_1", "city", "company_name", "contact_name", "contact_phone", "contact_email"];
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                        readonly examples: readonly ["Kennedy Town"];
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly origin_address_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "ID of origin address. Required if the `origin_address` object is not provided.";
            };
            readonly sender_address: {
                readonly type: "object";
                readonly description: "Sender Address. Only applies if the courier allows a different address to be displayed on the label. If not specified, the origin address is used by default.";
                readonly required: readonly ["line_1", "city", "company_name", "contact_name", "contact_phone", "contact_email"];
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly sender_address_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "ID of sender address. Required if the `sender_address` object is not provided.";
            };
            readonly return_address: {
                readonly type: "object";
                readonly description: "Return Address. If not specified, the origin address is used by default.";
                readonly required: readonly ["line_1", "city", "company_name", "contact_name", "contact_phone", "contact_email"];
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly return_address_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "ID of return address. Required if the `return_address` object is not provided.";
            };
            readonly destination_address: {
                readonly type: "object";
                readonly required: readonly ["line_1", "city", "contact_name", "contact_email", "contact_phone"];
                readonly additionalProperties: false;
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly maximum: 200;
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name`";
                        readonly maximum: 50;
                    };
                    readonly delivery_instructions: {
                        readonly type: "string";
                        readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                        readonly maximum: 200;
                    };
                };
            };
            readonly return: {
                readonly type: "boolean";
                readonly description: "Set the shipment as a return shipment";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                readonly additionalProperties: true;
            };
            readonly set_as_residential: {
                readonly type: "boolean";
                readonly description: "This is automatically validated for US addresses. If specified, validation is bypassed.";
            };
            readonly consignee_tax_id: {
                readonly type: "string";
                readonly description: "The consignee's tax identification number or EIN. This is required for customs clearance when shipping to certain countries, such as China and Brazil.";
            };
            readonly eei_reference: {
                readonly type: "string";
                readonly description: "The Electronic Export Identifier (EEI). This is required when shipping goods over USD2500 in value (Applies to US-outbound shipments only).";
            };
            readonly regulatory_identifiers: {
                readonly type: "object";
                readonly description: "Seller's identifiers for various tax, import and export regulations.";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly eori: {
                        readonly type: "string";
                        readonly description: "Economic Operators Registration and Identification (EORI) number.";
                    };
                    readonly ioss: {
                        readonly type: "string";
                        readonly description: "Import One Stop Shop (IOSS) number.";
                    };
                    readonly vat_number: {
                        readonly type: "string";
                        readonly description: "Value-Added Tax (VAT) number.";
                    };
                };
            };
            readonly buyer_regulatory_identifiers: {
                readonly type: "object";
                readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly ein: {
                        readonly type: "string";
                        readonly description: "Employer Identification Number (EIN) number.";
                    };
                    readonly vat_number: {
                        readonly type: "string";
                        readonly description: "Value-Added Tax (VAT) number.";
                    };
                    readonly ssn: {
                        readonly type: "string";
                        readonly description: "Social Security Number (SSN) number.";
                    };
                };
            };
            readonly incoterms: {
                readonly description: "Terms of Sale";
                readonly type: "string";
                readonly enum: readonly ["DDU", "DDP", any];
                readonly default: "DDU";
            };
            readonly insurance: {
                readonly type: "object";
                readonly description: "Insurance";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly is_insured: {
                        readonly type: "boolean";
                        readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                        readonly default: false;
                    };
                    readonly insured_amount: {
                        readonly type: "number";
                        readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                    };
                    readonly insured_currency: {
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                        readonly examples: readonly ["USD"];
                    };
                };
            };
            readonly order_data: {
                readonly type: "object";
                readonly description: "Free-form data related to the eCommerce platform";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly platform_name: {
                        readonly type: "string";
                        readonly description: "A display-ready sales channel or platform name";
                        readonly maximum: 200;
                    };
                    readonly platform_order_number: {
                        readonly type: "string";
                        readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                        readonly maximum: 200;
                    };
                    readonly order_created_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                    };
                    readonly order_tag_list: {
                        readonly type: "array";
                        readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly maxItems: 500;
                    };
                    readonly seller_notes: {
                        readonly type: "string";
                        readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                    };
                    readonly buyer_notes: {
                        readonly type: "string";
                        readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                    };
                    readonly buyer_selected_courier_name: {
                        readonly type: "string";
                        readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                    };
                };
            };
            readonly courier_settings: {
                readonly type: "object";
                readonly properties: {
                    readonly courier_service_id: {
                        readonly type: "string";
                        readonly description: "Select a specific courier service to create the shipment with (applies if you integrate with the Rates API).";
                    };
                    readonly allow_fallback: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "If `courier_service_id` is provided but the courier can’t be selected, allow the shipment to be created and the next best rate to be selected. Default: `false`. When false and rates for the `courier_service_id` can't be found, an error will be raised and the shipment won’t be created.";
                    };
                    readonly apply_shipping_rules: {
                        readonly type: "boolean";
                        readonly default: true;
                        readonly description: "Apply any [shipping rules](https://support.easyship.com/hc/en-us/articles/115003580152-Automate-Shipping-Process-Shipping-Rules) created on the Easyship dashboard (Default: `true`)";
                    };
                    readonly list_unavailable_services: {
                        readonly type: "boolean";
                        readonly description: "Setting this option will return detailed information with reasons for each courier in the response.";
                    };
                };
            };
            readonly shipping_settings: {
                readonly type: "object";
                readonly properties: {
                    readonly additional_services: {
                        readonly type: "object";
                        readonly description: "Configuration for additional services";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly delivery_confirmation: {
                                readonly description: "Currently officially supported only for selected customers. **Subject to change.**";
                                readonly type: "string";
                                readonly enum: readonly ["ups_delivery_confirmation_adult_signature_required", "ups_delivery_confirmation_signature_required"];
                            };
                            readonly qr_code: {
                                readonly type: "string";
                                readonly description: "Generate QR code when generating label. If a courier does not support it, label will be generated without the QR code. Currently officially supported only for USPS courier. **Subject to change.**";
                                readonly default: "none";
                                readonly enum: readonly ["qr_code", "qr_code_with_label", "none"];
                            };
                        };
                    };
                    readonly units: {
                        readonly type: "object";
                        readonly description: "Units";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly weight: {
                                readonly type: "string";
                                readonly description: "Unit of weight values provided. Options: `kg` / `g` / `lb` / `oz` (Default: `kg`). Unit of values in the response will be in `kg`.";
                                readonly default: "kg";
                                readonly enum: readonly ["kg", "g", "lb", "oz"];
                            };
                            readonly dimensions: {
                                readonly type: "string";
                                readonly description: "Unit of dimension values provided. Options: `cm` / `in` (Default: `cm`) Unit of values in the response will be in `cm`.";
                                readonly default: "cm";
                                readonly enum: readonly ["cm", "in"];
                            };
                        };
                    };
                    readonly buy_label: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "Create a shipment and buy the label in a single API call instead of two. Default: `false`.";
                    };
                    readonly buy_label_synchronous: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "Generate a label synchronously. Returns a label in the response. Default: `false`.";
                    };
                    readonly b13a_filing: {
                        readonly type: "object";
                        readonly description: "B13A filing (currently available only for FedEx)";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly option: {
                                readonly type: "string";
                                readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                            };
                            readonly option_export_compliance_statement: {
                                readonly type: "string";
                                readonly description: "Export compliance statement";
                            };
                            readonly permit_number: {
                                readonly type: "string";
                                readonly description: "Permit number";
                            };
                        };
                    };
                    readonly printing_options: {
                        readonly type: "object";
                        readonly description: "Specify the format and page sizes of the shipping documents. This will only be taken into account if buy_label_synchronous is `true`.";
                        readonly properties: {
                            readonly format: {
                                readonly type: "string";
                                readonly description: "Options: `png`, `pdf`, `url`, `zpl` (Default: `png`)";
                                readonly default: "png";
                                readonly enum: readonly ["png", "pdf", "url", "zpl"];
                            };
                            readonly label: {
                                readonly type: "string";
                                readonly description: "Label page size. Options: `4x6` / `A4` / `A5` (Default: `4x6`)";
                                readonly default: "4x6";
                                readonly enum: readonly ["4x6", "A4", "A5"];
                            };
                            readonly commercial_invoice: {
                                readonly type: "string";
                                readonly description: "Commercial invoice page size. Options: `4x6` / `A4` (Default: `A4`)";
                                readonly default: "A4";
                                readonly enum: readonly ["4x6", "A4"];
                            };
                            readonly packing_slip: {
                                readonly type: "string";
                                readonly description: "Packing slip page size. Options: `4x6` / `A4` (Default: `4x6`)";
                                readonly default: "4x6";
                                readonly enum: readonly ["4x6", "A4", "none"];
                            };
                            readonly remarks: {
                                readonly type: "string";
                                readonly maxLength: 70;
                                readonly description: "Customized commercial invoice remarks for current shipment. It has higher priority than remarks from company settings.";
                            };
                        };
                    };
                    readonly label_customization_fields: {
                        readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                        readonly type: "array";
                        readonly minItems: 1;
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["value"];
                            readonly properties: {
                                readonly code: {
                                    readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                };
                                readonly convert_to_barcode: {
                                    readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                };
                            };
                        };
                    };
                };
            };
            readonly parcels: {
                readonly type: "array";
                readonly description: "Parcels";
                readonly items: {
                    readonly type: "object";
                    readonly description: "Parcel";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                        };
                        readonly box: {
                            readonly type: "object";
                            readonly description: "The box dimensions for the shipment. If the box dimensions are provided, then dimensions for items are optional.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly slug: {
                                    readonly type: "string";
                                    readonly description: "Courier or Custom Box Slug. Use the [Boxes API](https://developers.easyship.com/reference/boxes_index) to retrieve a list of available boxes.";
                                };
                                readonly length: {
                                    readonly type: "number";
                                    readonly description: "Length of the box";
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly description: "Width of the box";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly description: "Height of the box";
                                };
                            };
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly description: "Array of all shipment items";
                            readonly items: {
                                readonly anyOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly description: {
                                            readonly type: "string";
                                            readonly description: "Description of the item";
                                            readonly maximum: 200;
                                        };
                                        readonly category: {
                                            readonly type: "string";
                                            readonly description: "Item category name or slug. Use the [Item Categories API](https://developers.easyship.com/reference/item_categories_index) to retrieve a list of available item categories.";
                                            readonly maximum: 200;
                                        };
                                        readonly sku: {
                                            readonly type: "string";
                                            readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                            readonly maximum: 100;
                                        };
                                        readonly hs_code: {
                                            readonly type: "string";
                                            readonly description: "HS Code of the item";
                                        };
                                        readonly contains_battery_pi966: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                        };
                                        readonly contains_battery_pi967: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                        };
                                        readonly contains_liquids: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                        };
                                        readonly origin_country_alpha2: {
                                            readonly type: "string";
                                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                        };
                                        readonly quantity: {
                                            readonly type: "integer";
                                            readonly description: "Item quantity";
                                            readonly default: 1;
                                        };
                                        readonly dimensions: {
                                            readonly type: "object";
                                            readonly description: "Dimensions of the item";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly length: {
                                                    readonly type: "number";
                                                    readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                };
                                                readonly width: {
                                                    readonly type: "number";
                                                    readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                };
                                                readonly height: {
                                                    readonly type: "number";
                                                    readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                };
                                            };
                                        };
                                        readonly actual_weight: {
                                            readonly type: "number";
                                            readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                        };
                                        readonly declared_currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                            readonly examples: readonly ["USD"];
                                        };
                                        readonly declared_customs_value: {
                                            readonly type: "number";
                                            readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly product: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "Product ID. Required if the `sku` is not provided.";
                                                };
                                                readonly sku: {
                                                    readonly type: "string";
                                                    readonly description: "Product SKU. Required if the `id` is not provided.";
                                                };
                                            };
                                        };
                                        readonly quantity: {
                                            readonly type: "integer";
                                            readonly description: "Item quantity";
                                            readonly default: 1;
                                        };
                                        readonly declared_currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                            readonly examples: readonly ["USD"];
                                        };
                                        readonly declared_customs_value: {
                                            readonly type: "number";
                                            readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Return Item (only available for return shipments)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Item ID (from the shipment that is being returned)";
                                        };
                                        readonly quantity: {
                                            readonly type: "integer";
                                            readonly description: "Item quantity";
                                            readonly default: 1;
                                        };
                                    };
                                }];
                            };
                            readonly minItems: 1;
                            readonly maxItems: 200;
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Single shipment with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipment: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was created in the Easyship system";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was most recently modified";
                        };
                        readonly label_paid_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When Easyship was paid for the shipment";
                        };
                        readonly label_generated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When label was generated";
                        };
                        readonly origin_address: {
                            readonly type: "object";
                            readonly description: "Origin address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly sender_address: {
                            readonly type: "object";
                            readonly description: "Sender address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly return_address: {
                            readonly type: "object";
                            readonly description: "Return address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly destination_address: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly maximum: 200;
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name`";
                                    readonly maximum: 50;
                                };
                                readonly delivery_instructions: {
                                    readonly type: "string";
                                    readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                    readonly maximum: 200;
                                };
                            };
                        };
                        readonly order_data: {
                            readonly type: "object";
                            readonly description: "Free-form data related to the eCommerce platform";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly platform_name: {
                                    readonly type: "string";
                                    readonly description: "A display-ready sales channel or platform name";
                                    readonly maximum: 200;
                                };
                                readonly platform_order_number: {
                                    readonly type: "string";
                                    readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                    readonly maximum: 200;
                                };
                                readonly order_created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                };
                                readonly order_tag_list: {
                                    readonly type: "array";
                                    readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly maxItems: 500;
                                };
                                readonly seller_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                };
                                readonly buyer_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                };
                                readonly buyer_selected_courier_name: {
                                    readonly type: "string";
                                    readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                };
                            };
                        };
                        readonly last_failure_http_response_messages: {
                            readonly type: "array";
                            readonly description: "This attribute stores the HTTP response of the most recent unsuccessful attempt to interact with an external service, such as a failed label creation.";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly code: {
                                        readonly type: "string";
                                    };
                                    readonly content: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                            readonly additionalProperties: true;
                        };
                        readonly set_as_residential: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether or not the user believes the receiver address qualifies for a residential surcharge.";
                        };
                        readonly consignee_tax_id: {
                            readonly type: "string";
                            readonly description: "Tax ID for the receiver. Maybe helpful or required for customs clearance, depending on the destination country.";
                        };
                        readonly eei_reference: {
                            readonly type: "string";
                            readonly description: "References data (Electronic Export Information) filed through one of the systems for goods shipped from the U.S.\nto a foreign country. Currently only used for FedEx shipments. The following possibilities may or may not qualify:\n  * An Automated Export System (AES) citation\n  * A Foreign Trade Regulations (FTR) exemption number\n  * An International Traffic in Arms Reduction (ITAR) exemption code\n  * A US Department of Commerce export license number";
                        };
                        readonly regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Seller's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly eori: {
                                    readonly type: "string";
                                    readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                };
                                readonly ioss: {
                                    readonly type: "string";
                                    readonly description: "Import One Stop Shop (IOSS) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                            };
                        };
                        readonly buyer_regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly ein: {
                                    readonly type: "string";
                                    readonly description: "Employer Identification Number (EIN) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                                readonly ssn: {
                                    readonly type: "string";
                                    readonly description: "Social Security Number (SSN) number.";
                                };
                            };
                        };
                        readonly return: {
                            readonly type: "boolean";
                            readonly description: "Whether the shipment is a return shipment or not";
                        };
                        readonly incoterms: {
                            readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                            readonly type: "string";
                            readonly enum: readonly ["DDU", "DDP", any];
                            readonly default: "DDU";
                        };
                        readonly insurance: {
                            readonly type: "object";
                            readonly description: "Insurance";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly is_insured: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                    readonly default: false;
                                };
                                readonly insured_amount: {
                                    readonly type: "number";
                                    readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                };
                                readonly insured_currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                    readonly examples: readonly ["USD"];
                                };
                            };
                        };
                        readonly parcels: {
                            readonly type: "array";
                            readonly description: "Parcels";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "ID of the parcel";
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                    };
                                    readonly box: {
                                        readonly type: "object";
                                        readonly description: "User-defined details of a box used for shipments";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "ID";
                                            };
                                            readonly courier: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly umbrella_name: {
                                                        readonly type: "string";
                                                        readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                                    };
                                                    readonly country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                    };
                                                };
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name";
                                            };
                                            readonly slug: {
                                                readonly type: "string";
                                                readonly description: "Slug";
                                            };
                                            readonly outer_dimensions: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly description: "A measure of the space taken by the box itself, in cm.";
                                                readonly properties: {
                                                    readonly length: {
                                                        readonly type: "number";
                                                    };
                                                    readonly width: {
                                                        readonly type: "number";
                                                    };
                                                    readonly height: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly weight: {
                                                readonly type: "number";
                                                readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly description: "Box type.";
                                            };
                                        };
                                    };
                                    readonly items: {
                                        readonly type: "array";
                                        readonly description: "Array of all shipment items";
                                        readonly minItems: 1;
                                        readonly maxItems: 200;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "ID of the item";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "Description of the item";
                                                    readonly maximum: 200;
                                                };
                                                readonly category: {
                                                    readonly type: "string";
                                                    readonly description: "Item Category slug. Use the Item Categories API to retrieve a list of available item categories or use HS Code field.";
                                                    readonly maximum: 200;
                                                };
                                                readonly sku: {
                                                    readonly type: "string";
                                                    readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                                    readonly maximum: 100;
                                                };
                                                readonly hs_code: {
                                                    readonly type: "string";
                                                    readonly description: "HS Code of the item";
                                                };
                                                readonly origin_country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                                };
                                                readonly contains_battery_pi966: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_battery_pi967: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_liquids: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                                };
                                                readonly quantity: {
                                                    readonly type: "integer";
                                                    readonly description: "Item quantity";
                                                    readonly default: 1;
                                                };
                                                readonly dimensions: {
                                                    readonly type: "object";
                                                    readonly description: "Dimensions of the item";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly length: {
                                                            readonly type: "number";
                                                            readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly width: {
                                                            readonly type: "number";
                                                            readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly height: {
                                                            readonly type: "number";
                                                            readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                        };
                                                    };
                                                };
                                                readonly actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                                };
                                                readonly origin_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly origin_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Customs value of the item";
                                                };
                                                readonly declared_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly declared_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly total_customs_value: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly description: "Sum of the value assigned to all shipment line items";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Sum of the specified weights of all *parcels* in the shipment (`parcel.actual_weight`), as measured on a scale in units specified by `company.weight_unit`.";
                        };
                        readonly shipment_state: {
                            readonly type: "string";
                            readonly description: "The state of the shipment record within the Easyship system\n\n`created` `draft` `calculating` `cancelling` `cancelled` `discarded` `deleted`";
                            readonly default: "created";
                            readonly enum: readonly ["created", "draft", "calculating", "cancelling", "cancelled", "discarded", "deleted"];
                        };
                        readonly pickup_state: {
                            readonly type: "string";
                            readonly default: "not_requested";
                            readonly description: "The state of the hand-over from shipper to courier. `pending_handover` applies only to eFulfillment companies.";
                        };
                        readonly delivery_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the hand-over from courier to receiver.\n\n`not_created` `pending` `info_received` `in_transit_to_customer` `out_for_delivery` `delivered` `failed_attempt` `exception` `expired` `lost_by_courier` `returned_to_shipper`";
                            readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                        };
                        readonly label_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the label(s) meant to be printed and attached to this shipment's parcels\n\n`not_created` `pending` `generating` `generated` `printed` `failed` `technical_failed` `reported` `voided` `void_failed`";
                            readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported", "voided", "void_failed"];
                        };
                        readonly warehouse_state: {
                            readonly type: "string";
                            readonly default: "none";
                            readonly description: "The state of the fulfillment process within the warehouse\n\n`none` `pending` `created` `failed` `packed` `cancelled` `cancelled_no_stock` `backorder_no_stock` `shipped` `returned` `awaiting_dispatch`";
                            readonly enum: readonly ["none", "pending", "created", "failed", "packed", "cancelled", "cancelled_no_stock", "backorder_no_stock", "shipped", "returned", "awaiting_dispatch"];
                        };
                        readonly warehouse_code: {
                            readonly type: "string";
                            readonly description: "Warehouse code (warehouse/eFulfilment only)";
                        };
                        readonly original_easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly trackings: {
                            readonly type: "array";
                            readonly description: "Sources of tracking data for this shipment";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "A source of tracking data for the shipment's journey";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Reference provided by the courier for this leg";
                                    };
                                    readonly local_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Local tracking number provided by DHL eCommerce";
                                    };
                                    readonly alternate_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Alternate tracking number provided by DHL eCommerce";
                                    };
                                    readonly leg_number: {
                                        readonly type: "integer";
                                        readonly minimum: 1;
                                        readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                    };
                                    readonly handler: {
                                        readonly type: "string";
                                        readonly description: "The service that is handling the tracking process";
                                    };
                                    readonly tracking_state: {
                                        readonly type: "string";
                                        readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                        readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                    };
                                };
                            };
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly description: "Tracking page URL";
                        };
                        readonly shipping_documents: {
                            readonly type: "array";
                            readonly description: "Shipping documents";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category: {
                                        readonly type: "string";
                                        readonly description: "Document category";
                                    };
                                    readonly required: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the document is required";
                                    };
                                    readonly format: {
                                        readonly type: "string";
                                        readonly description: "Document format";
                                    };
                                    readonly page_size: {
                                        readonly type: "string";
                                        readonly description: "Page size";
                                    };
                                    readonly base64_encoded_strings: {
                                        readonly type: "array";
                                        readonly description: "Base64 encoded strings";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "byte";
                                        };
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "URL of the document";
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly courier_id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The courier ID that the current courier service is associated with";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                                readonly easyship_courier_service: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                };
                            };
                        };
                        readonly rates: {
                            readonly type: "array";
                            readonly description: "Array of available courier services for this shipment, along with the rates charged. Courier services are excluded if the shipment's contents or destination do not meet each service's eligibility requirements.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly courier_service: {
                                        readonly type: "object";
                                        readonly description: "Courier Service for Rate";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "unique identifier for a courier service";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier service used in this rate.";
                                            };
                                            readonly courier_id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "The courier ID that the current courier service is associated with";
                                            };
                                            readonly umbrella_name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier company that offers this service.";
                                            };
                                            readonly logo: {
                                                readonly type: "string";
                                                readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                                readonly deprecated: true;
                                            };
                                            readonly easyship_courier_service: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                            };
                                        };
                                    };
                                    readonly min_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly max_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly value_for_money_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                                    };
                                    readonly delivery_time_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                                    };
                                    readonly cost_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                    readonly shipment_charge: {
                                        readonly type: "number";
                                        readonly description: "Base cost of the courier service";
                                    };
                                    readonly fuel_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when fuel costs are high";
                                    };
                                    readonly remote_area_surcharge: {
                                        readonly type: "number";
                                        readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                    };
                                    readonly remote_area_surcharges: {
                                        readonly description: "Origin and destination remote area surcharges";
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly origin: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Pickup Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly destination: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Delivery Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly other_surcharges: {
                                        readonly type: "object";
                                        readonly description: "Other surcharges";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly total_fee: {
                                                readonly type: "number";
                                                readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                            };
                                            readonly details: {
                                                readonly type: "array";
                                                readonly description: "An array of individual surcharges being applied";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Surcharge name, in English, to be displayed to user";
                                                            readonly examples: readonly ["Peak Surcharge"];
                                                        };
                                                        readonly fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment";
                                                        };
                                                        readonly origin_fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly oversized_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                    };
                                    readonly additional_services_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                    };
                                    readonly residential_full_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly residential_discounted_fee: {
                                        readonly type: "number";
                                        readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly shipment_charge_total: {
                                        readonly type: "number";
                                        readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                    };
                                    readonly warehouse_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                    };
                                    readonly insurance_fee: {
                                        readonly type: "number";
                                        readonly description: "The cost of the insurance policy purchased for this shipment";
                                    };
                                    readonly sales_tax: {
                                        readonly type: "number";
                                        readonly description: "National government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly provincial_sales_tax: {
                                        readonly type: "number";
                                        readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly ddp_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_charge: {
                                        readonly type: "number";
                                        readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_non_chargeable: {
                                        readonly type: "number";
                                        readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_duty_charge: {
                                        readonly type: "number";
                                        readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly total_charge: {
                                        readonly type: "number";
                                        readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                    };
                                    readonly is_above_threshold: {
                                        readonly type: "boolean";
                                        readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                                    };
                                    readonly incoterms: {
                                        readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                        readonly type: "string";
                                        readonly enum: readonly ["DDU", "DDP", any];
                                        readonly default: "DDU";
                                    };
                                    readonly estimated_import_tax: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly estimated_import_duty: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly minimum_pickup_fee: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                    };
                                    readonly available_handover_options: {
                                        readonly type: "array";
                                        readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly tracking_rating: {
                                        readonly type: "number";
                                        readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                        readonly minimum: -1;
                                        readonly maximum: 3;
                                    };
                                    readonly easyship_rating: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 5;
                                        readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                                    };
                                    readonly courier_remarks: {
                                        readonly type: "string";
                                        readonly description: "Additional details relevant to choosing the appropriate courier service";
                                    };
                                    readonly payment_recipient: {
                                        readonly type: "string";
                                        readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                        readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                                    };
                                    readonly discount: {
                                        readonly type: "object";
                                        readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly amount: {
                                                readonly type: "number";
                                                readonly description: "A fixed amount to discount from the price";
                                            };
                                            readonly origin_amount: {
                                                readonly type: "number";
                                                readonly description: "Discount origin amount";
                                            };
                                        };
                                    };
                                    readonly rates_in_origin_currency: {
                                        readonly type: "object";
                                        readonly description: "Rates in origin currency";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                readonly examples: readonly ["USD"];
                                            };
                                            readonly shipment_charge: {
                                                readonly type: "number";
                                                readonly description: "Base cost of the courier service";
                                            };
                                            readonly fuel_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when fuel costs are high";
                                            };
                                            readonly remote_area_surcharge: {
                                                readonly type: "number";
                                                readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                            };
                                            readonly additional_services_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                            };
                                            readonly oversized_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                            };
                                            readonly shipment_charge_total: {
                                                readonly type: "number";
                                                readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                            };
                                            readonly warehouse_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                            };
                                            readonly insurance_fee: {
                                                readonly type: "number";
                                                readonly description: "The cost of the insurance policy purchased for this shipment";
                                            };
                                            readonly ddp_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_charge: {
                                                readonly type: "number";
                                                readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_non_chargeable: {
                                                readonly type: "number";
                                                readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_duty_charge: {
                                                readonly type: "number";
                                                readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly residential_discounted_fee: {
                                                readonly type: "number";
                                                readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly residential_full_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly total_charge: {
                                                readonly type: "number";
                                                readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                            };
                                            readonly estimated_import_tax: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly estimated_import_duty: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly sales_tax: {
                                                readonly type: "number";
                                                readonly description: "National government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly provincial_sales_tax: {
                                                readonly type: "number";
                                                readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly minimum_pickup_fee: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                            };
                                        };
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                        readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                                    };
                                    readonly full_description: {
                                        readonly type: "string";
                                        readonly description: "Full description";
                                    };
                                };
                            };
                        };
                        readonly shipping_settings: {
                            readonly type: "object";
                            readonly description: "Shipping settings";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly b13a_filing: {
                                    readonly type: "object";
                                    readonly description: "B13A filing (currently available only for FedEx)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly option: {
                                            readonly type: "string";
                                            readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                            readonly description: "`not_required` `fedex_to_stamp` `filed_electronically` `manually_attached` `summary_reporting`";
                                        };
                                        readonly option_export_compliance_statement: {
                                            readonly type: "string";
                                            readonly description: "Export compliance statement";
                                        };
                                        readonly permit_number: {
                                            readonly type: "string";
                                            readonly description: "Permit number";
                                        };
                                    };
                                };
                                readonly label_customization_fields: {
                                    readonly anyOf: readonly [{
                                        readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["value"];
                                            readonly properties: {
                                                readonly code: {
                                                    readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "string";
                                                    readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                                readonly convert_to_barcode: {
                                                    readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                            };
                                        };
                                    }, {
                                        readonly type: "array";
                                        readonly minItems: 0;
                                        readonly items: {};
                                    }];
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unavailable_couriers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "unique identifier for a courier service";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Unavailable courier name";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly description: "Unavailable reason";
                                    };
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "202": {
            readonly type: "object";
            readonly description: "Single shipment with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipment: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was created in the Easyship system";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was most recently modified";
                        };
                        readonly label_paid_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When Easyship was paid for the shipment";
                        };
                        readonly label_generated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When label was generated";
                        };
                        readonly origin_address: {
                            readonly type: "object";
                            readonly description: "Origin address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly sender_address: {
                            readonly type: "object";
                            readonly description: "Sender address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly return_address: {
                            readonly type: "object";
                            readonly description: "Return address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly destination_address: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly maximum: 200;
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name`";
                                    readonly maximum: 50;
                                };
                                readonly delivery_instructions: {
                                    readonly type: "string";
                                    readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                    readonly maximum: 200;
                                };
                            };
                        };
                        readonly order_data: {
                            readonly type: "object";
                            readonly description: "Free-form data related to the eCommerce platform";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly platform_name: {
                                    readonly type: "string";
                                    readonly description: "A display-ready sales channel or platform name";
                                    readonly maximum: 200;
                                };
                                readonly platform_order_number: {
                                    readonly type: "string";
                                    readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                    readonly maximum: 200;
                                };
                                readonly order_created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                };
                                readonly order_tag_list: {
                                    readonly type: "array";
                                    readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly maxItems: 500;
                                };
                                readonly seller_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                };
                                readonly buyer_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                };
                                readonly buyer_selected_courier_name: {
                                    readonly type: "string";
                                    readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                };
                            };
                        };
                        readonly last_failure_http_response_messages: {
                            readonly type: "array";
                            readonly description: "This attribute stores the HTTP response of the most recent unsuccessful attempt to interact with an external service, such as a failed label creation.";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly code: {
                                        readonly type: "string";
                                    };
                                    readonly content: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                            readonly additionalProperties: true;
                        };
                        readonly set_as_residential: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether or not the user believes the receiver address qualifies for a residential surcharge.";
                        };
                        readonly consignee_tax_id: {
                            readonly type: "string";
                            readonly description: "Tax ID for the receiver. Maybe helpful or required for customs clearance, depending on the destination country.";
                        };
                        readonly eei_reference: {
                            readonly type: "string";
                            readonly description: "References data (Electronic Export Information) filed through one of the systems for goods shipped from the U.S.\nto a foreign country. Currently only used for FedEx shipments. The following possibilities may or may not qualify:\n  * An Automated Export System (AES) citation\n  * A Foreign Trade Regulations (FTR) exemption number\n  * An International Traffic in Arms Reduction (ITAR) exemption code\n  * A US Department of Commerce export license number";
                        };
                        readonly regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Seller's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly eori: {
                                    readonly type: "string";
                                    readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                };
                                readonly ioss: {
                                    readonly type: "string";
                                    readonly description: "Import One Stop Shop (IOSS) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                            };
                        };
                        readonly buyer_regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly ein: {
                                    readonly type: "string";
                                    readonly description: "Employer Identification Number (EIN) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                                readonly ssn: {
                                    readonly type: "string";
                                    readonly description: "Social Security Number (SSN) number.";
                                };
                            };
                        };
                        readonly return: {
                            readonly type: "boolean";
                            readonly description: "Whether the shipment is a return shipment or not";
                        };
                        readonly incoterms: {
                            readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                            readonly type: "string";
                            readonly enum: readonly ["DDU", "DDP", any];
                            readonly default: "DDU";
                        };
                        readonly insurance: {
                            readonly type: "object";
                            readonly description: "Insurance";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly is_insured: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                    readonly default: false;
                                };
                                readonly insured_amount: {
                                    readonly type: "number";
                                    readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                };
                                readonly insured_currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                    readonly examples: readonly ["USD"];
                                };
                            };
                        };
                        readonly parcels: {
                            readonly type: "array";
                            readonly description: "Parcels";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "ID of the parcel";
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                    };
                                    readonly box: {
                                        readonly type: "object";
                                        readonly description: "User-defined details of a box used for shipments";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "ID";
                                            };
                                            readonly courier: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly umbrella_name: {
                                                        readonly type: "string";
                                                        readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                                    };
                                                    readonly country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                    };
                                                };
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name";
                                            };
                                            readonly slug: {
                                                readonly type: "string";
                                                readonly description: "Slug";
                                            };
                                            readonly outer_dimensions: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly description: "A measure of the space taken by the box itself, in cm.";
                                                readonly properties: {
                                                    readonly length: {
                                                        readonly type: "number";
                                                    };
                                                    readonly width: {
                                                        readonly type: "number";
                                                    };
                                                    readonly height: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly weight: {
                                                readonly type: "number";
                                                readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly description: "Box type.";
                                            };
                                        };
                                    };
                                    readonly items: {
                                        readonly type: "array";
                                        readonly description: "Array of all shipment items";
                                        readonly minItems: 1;
                                        readonly maxItems: 200;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "ID of the item";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "Description of the item";
                                                    readonly maximum: 200;
                                                };
                                                readonly category: {
                                                    readonly type: "string";
                                                    readonly description: "Item Category slug. Use the Item Categories API to retrieve a list of available item categories or use HS Code field.";
                                                    readonly maximum: 200;
                                                };
                                                readonly sku: {
                                                    readonly type: "string";
                                                    readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                                    readonly maximum: 100;
                                                };
                                                readonly hs_code: {
                                                    readonly type: "string";
                                                    readonly description: "HS Code of the item";
                                                };
                                                readonly origin_country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                                };
                                                readonly contains_battery_pi966: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_battery_pi967: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_liquids: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                                };
                                                readonly quantity: {
                                                    readonly type: "integer";
                                                    readonly description: "Item quantity";
                                                    readonly default: 1;
                                                };
                                                readonly dimensions: {
                                                    readonly type: "object";
                                                    readonly description: "Dimensions of the item";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly length: {
                                                            readonly type: "number";
                                                            readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly width: {
                                                            readonly type: "number";
                                                            readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly height: {
                                                            readonly type: "number";
                                                            readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                        };
                                                    };
                                                };
                                                readonly actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                                };
                                                readonly origin_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly origin_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Customs value of the item";
                                                };
                                                readonly declared_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly declared_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly total_customs_value: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly description: "Sum of the value assigned to all shipment line items";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Sum of the specified weights of all *parcels* in the shipment (`parcel.actual_weight`), as measured on a scale in units specified by `company.weight_unit`.";
                        };
                        readonly shipment_state: {
                            readonly type: "string";
                            readonly description: "The state of the shipment record within the Easyship system\n\n`created` `draft` `calculating` `cancelling` `cancelled` `discarded` `deleted`";
                            readonly default: "created";
                            readonly enum: readonly ["created", "draft", "calculating", "cancelling", "cancelled", "discarded", "deleted"];
                        };
                        readonly pickup_state: {
                            readonly type: "string";
                            readonly default: "not_requested";
                            readonly description: "The state of the hand-over from shipper to courier. `pending_handover` applies only to eFulfillment companies.";
                        };
                        readonly delivery_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the hand-over from courier to receiver.\n\n`not_created` `pending` `info_received` `in_transit_to_customer` `out_for_delivery` `delivered` `failed_attempt` `exception` `expired` `lost_by_courier` `returned_to_shipper`";
                            readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                        };
                        readonly label_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the label(s) meant to be printed and attached to this shipment's parcels\n\n`not_created` `pending` `generating` `generated` `printed` `failed` `technical_failed` `reported` `voided` `void_failed`";
                            readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported", "voided", "void_failed"];
                        };
                        readonly warehouse_state: {
                            readonly type: "string";
                            readonly default: "none";
                            readonly description: "The state of the fulfillment process within the warehouse\n\n`none` `pending` `created` `failed` `packed` `cancelled` `cancelled_no_stock` `backorder_no_stock` `shipped` `returned` `awaiting_dispatch`";
                            readonly enum: readonly ["none", "pending", "created", "failed", "packed", "cancelled", "cancelled_no_stock", "backorder_no_stock", "shipped", "returned", "awaiting_dispatch"];
                        };
                        readonly warehouse_code: {
                            readonly type: "string";
                            readonly description: "Warehouse code (warehouse/eFulfilment only)";
                        };
                        readonly original_easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly trackings: {
                            readonly type: "array";
                            readonly description: "Sources of tracking data for this shipment";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "A source of tracking data for the shipment's journey";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Reference provided by the courier for this leg";
                                    };
                                    readonly local_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Local tracking number provided by DHL eCommerce";
                                    };
                                    readonly alternate_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Alternate tracking number provided by DHL eCommerce";
                                    };
                                    readonly leg_number: {
                                        readonly type: "integer";
                                        readonly minimum: 1;
                                        readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                    };
                                    readonly handler: {
                                        readonly type: "string";
                                        readonly description: "The service that is handling the tracking process";
                                    };
                                    readonly tracking_state: {
                                        readonly type: "string";
                                        readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                        readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                    };
                                };
                            };
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly description: "Tracking page URL";
                        };
                        readonly shipping_documents: {
                            readonly type: "array";
                            readonly description: "Shipping documents";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category: {
                                        readonly type: "string";
                                        readonly description: "Document category";
                                    };
                                    readonly required: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the document is required";
                                    };
                                    readonly format: {
                                        readonly type: "string";
                                        readonly description: "Document format";
                                    };
                                    readonly page_size: {
                                        readonly type: "string";
                                        readonly description: "Page size";
                                    };
                                    readonly base64_encoded_strings: {
                                        readonly type: "array";
                                        readonly description: "Base64 encoded strings";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "byte";
                                        };
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "URL of the document";
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly courier_id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The courier ID that the current courier service is associated with";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                                readonly easyship_courier_service: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                };
                            };
                        };
                        readonly rates: {
                            readonly type: "array";
                            readonly description: "Array of available courier services for this shipment, along with the rates charged. Courier services are excluded if the shipment's contents or destination do not meet each service's eligibility requirements.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly courier_service: {
                                        readonly type: "object";
                                        readonly description: "Courier Service for Rate";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "unique identifier for a courier service";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier service used in this rate.";
                                            };
                                            readonly courier_id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "The courier ID that the current courier service is associated with";
                                            };
                                            readonly umbrella_name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier company that offers this service.";
                                            };
                                            readonly logo: {
                                                readonly type: "string";
                                                readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                                readonly deprecated: true;
                                            };
                                            readonly easyship_courier_service: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                            };
                                        };
                                    };
                                    readonly min_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly max_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly value_for_money_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                                    };
                                    readonly delivery_time_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                                    };
                                    readonly cost_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                    readonly shipment_charge: {
                                        readonly type: "number";
                                        readonly description: "Base cost of the courier service";
                                    };
                                    readonly fuel_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when fuel costs are high";
                                    };
                                    readonly remote_area_surcharge: {
                                        readonly type: "number";
                                        readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                    };
                                    readonly remote_area_surcharges: {
                                        readonly description: "Origin and destination remote area surcharges";
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly origin: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Pickup Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly destination: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Delivery Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly other_surcharges: {
                                        readonly type: "object";
                                        readonly description: "Other surcharges";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly total_fee: {
                                                readonly type: "number";
                                                readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                            };
                                            readonly details: {
                                                readonly type: "array";
                                                readonly description: "An array of individual surcharges being applied";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Surcharge name, in English, to be displayed to user";
                                                            readonly examples: readonly ["Peak Surcharge"];
                                                        };
                                                        readonly fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment";
                                                        };
                                                        readonly origin_fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly oversized_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                    };
                                    readonly additional_services_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                    };
                                    readonly residential_full_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly residential_discounted_fee: {
                                        readonly type: "number";
                                        readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly shipment_charge_total: {
                                        readonly type: "number";
                                        readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                    };
                                    readonly warehouse_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                    };
                                    readonly insurance_fee: {
                                        readonly type: "number";
                                        readonly description: "The cost of the insurance policy purchased for this shipment";
                                    };
                                    readonly sales_tax: {
                                        readonly type: "number";
                                        readonly description: "National government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly provincial_sales_tax: {
                                        readonly type: "number";
                                        readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly ddp_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_charge: {
                                        readonly type: "number";
                                        readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_non_chargeable: {
                                        readonly type: "number";
                                        readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_duty_charge: {
                                        readonly type: "number";
                                        readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly total_charge: {
                                        readonly type: "number";
                                        readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                    };
                                    readonly is_above_threshold: {
                                        readonly type: "boolean";
                                        readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                                    };
                                    readonly incoterms: {
                                        readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                        readonly type: "string";
                                        readonly enum: readonly ["DDU", "DDP", any];
                                        readonly default: "DDU";
                                    };
                                    readonly estimated_import_tax: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly estimated_import_duty: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly minimum_pickup_fee: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                    };
                                    readonly available_handover_options: {
                                        readonly type: "array";
                                        readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly tracking_rating: {
                                        readonly type: "number";
                                        readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                        readonly minimum: -1;
                                        readonly maximum: 3;
                                    };
                                    readonly easyship_rating: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 5;
                                        readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                                    };
                                    readonly courier_remarks: {
                                        readonly type: "string";
                                        readonly description: "Additional details relevant to choosing the appropriate courier service";
                                    };
                                    readonly payment_recipient: {
                                        readonly type: "string";
                                        readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                        readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                                    };
                                    readonly discount: {
                                        readonly type: "object";
                                        readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly amount: {
                                                readonly type: "number";
                                                readonly description: "A fixed amount to discount from the price";
                                            };
                                            readonly origin_amount: {
                                                readonly type: "number";
                                                readonly description: "Discount origin amount";
                                            };
                                        };
                                    };
                                    readonly rates_in_origin_currency: {
                                        readonly type: "object";
                                        readonly description: "Rates in origin currency";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                readonly examples: readonly ["USD"];
                                            };
                                            readonly shipment_charge: {
                                                readonly type: "number";
                                                readonly description: "Base cost of the courier service";
                                            };
                                            readonly fuel_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when fuel costs are high";
                                            };
                                            readonly remote_area_surcharge: {
                                                readonly type: "number";
                                                readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                            };
                                            readonly additional_services_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                            };
                                            readonly oversized_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                            };
                                            readonly shipment_charge_total: {
                                                readonly type: "number";
                                                readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                            };
                                            readonly warehouse_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                            };
                                            readonly insurance_fee: {
                                                readonly type: "number";
                                                readonly description: "The cost of the insurance policy purchased for this shipment";
                                            };
                                            readonly ddp_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_charge: {
                                                readonly type: "number";
                                                readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_non_chargeable: {
                                                readonly type: "number";
                                                readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_duty_charge: {
                                                readonly type: "number";
                                                readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly residential_discounted_fee: {
                                                readonly type: "number";
                                                readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly residential_full_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly total_charge: {
                                                readonly type: "number";
                                                readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                            };
                                            readonly estimated_import_tax: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly estimated_import_duty: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly sales_tax: {
                                                readonly type: "number";
                                                readonly description: "National government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly provincial_sales_tax: {
                                                readonly type: "number";
                                                readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly minimum_pickup_fee: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                            };
                                        };
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                        readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                                    };
                                    readonly full_description: {
                                        readonly type: "string";
                                        readonly description: "Full description";
                                    };
                                };
                            };
                        };
                        readonly shipping_settings: {
                            readonly type: "object";
                            readonly description: "Shipping settings";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly b13a_filing: {
                                    readonly type: "object";
                                    readonly description: "B13A filing (currently available only for FedEx)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly option: {
                                            readonly type: "string";
                                            readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                            readonly description: "`not_required` `fedex_to_stamp` `filed_electronically` `manually_attached` `summary_reporting`";
                                        };
                                        readonly option_export_compliance_statement: {
                                            readonly type: "string";
                                            readonly description: "Export compliance statement";
                                        };
                                        readonly permit_number: {
                                            readonly type: "string";
                                            readonly description: "Permit number";
                                        };
                                    };
                                };
                                readonly label_customization_fields: {
                                    readonly anyOf: readonly [{
                                        readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["value"];
                                            readonly properties: {
                                                readonly code: {
                                                    readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "string";
                                                    readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                                readonly convert_to_barcode: {
                                                    readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                            };
                                        };
                                    }, {
                                        readonly type: "array";
                                        readonly minItems: 0;
                                        readonly items: {};
                                    }];
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unavailable_couriers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "unique identifier for a courier service";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Unavailable courier name";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly description: "Unavailable reason";
                                    };
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsDocumentsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly document_type: {
                    readonly type: "string";
                    readonly enum: readonly ["commercial_invoice"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Document type";
                };
                readonly page_size: {
                    readonly type: "string";
                    readonly enum: readonly ["4x6", "A4"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page size of shipping documents";
                };
            };
            readonly required: readonly ["document_type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "string";
            readonly format: "binary";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly easyship_shipment_id: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment.";
                };
                readonly platform_order_number: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Order number on the sales platform.";
                };
                readonly created_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments created since this date: ISO8601 date format.";
                };
                readonly created_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments created before this date: ISO8601 date format.";
                };
                readonly updated_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments updated since this date: ISO8601 date format.";
                };
                readonly updated_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments updated before this date: ISO8601 date format.";
                };
                readonly label_paid_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments where the labels were paid for since this date: ISO8601 date format.";
                };
                readonly label_paid_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for shipments where the labels were paid for before this date: ISO8601 date format.";
                };
                readonly label_generated_at_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for labels generated since this date: ISO8601 date format.";
                };
                readonly label_generated_at_to: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search for labels generated before this date: ISO8601 date format.";
                };
                readonly shipment_state: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "cancelled"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current status of shipment.";
                };
                readonly label_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported"];
                    };
                    readonly examples: readonly ["not_created", "pending"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current label status of shipment.";
                };
                readonly pickup_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["not_requested", "pending_confirmation", "pending_drop_off", "request_failed", "requested", "completed", "cancelled"];
                    };
                    readonly examples: readonly ["not_requested", "pending_confirmation"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current pickup status of shipment.";
                };
                readonly delivery_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                    };
                    readonly examples: readonly ["not_created", "pending"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by current delivery status of shipment.";
                };
                readonly warehouse_state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "created", "packed", "shipped"];
                    };
                    readonly examples: readonly ["pending", "created"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "For eFulfilment only. Search by current warehouse status of shipment.";
                };
                readonly origin_country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["HK", "UK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by the shipment origin country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly destination_country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["HK", "UK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by shipment destination country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly return: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search by shipment whether the shipment is return shipment or not.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of shipments";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipments: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the shipment record was created in the Easyship system";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the shipment record was most recently modified";
                            };
                            readonly label_paid_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When Easyship was paid for the shipment";
                            };
                            readonly label_generated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When label was generated";
                            };
                            readonly origin_address: {
                                readonly type: "object";
                                readonly description: "Origin address";
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 27;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 22;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name\"";
                                        readonly maximum: 50;
                                    };
                                };
                            };
                            readonly sender_address: {
                                readonly type: "object";
                                readonly description: "Sender address";
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 27;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 22;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name\"";
                                        readonly maximum: 50;
                                    };
                                };
                            };
                            readonly return_address: {
                                readonly type: "object";
                                readonly description: "Return address";
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                        readonly maximum: 200;
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 27;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 22;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name\"";
                                        readonly maximum: 50;
                                    };
                                };
                            };
                            readonly destination_address: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly line_1: {
                                        readonly type: "string";
                                        readonly description: "First line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly line_2: {
                                        readonly type: "string";
                                        readonly description: "Second line of the street address";
                                        readonly maximum: 35;
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly maximum: 200;
                                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "City or Suburb";
                                        readonly maximum: 200;
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                    };
                                    readonly country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                    };
                                    readonly company_name: {
                                        readonly type: "string";
                                        readonly description: "The company or organization at the address";
                                        readonly maximum: 50;
                                    };
                                    readonly contact_name: {
                                        readonly type: "string";
                                        readonly description: "The full name of a person at the address";
                                        readonly maximum: 50;
                                    };
                                    readonly contact_phone: {
                                        readonly type: "string";
                                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                        readonly maximum: 20;
                                    };
                                    readonly contact_email: {
                                        readonly type: "string";
                                        readonly format: "email";
                                        readonly description: "Email address used to reach the person in `contact_name`";
                                        readonly maximum: 50;
                                    };
                                    readonly delivery_instructions: {
                                        readonly type: "string";
                                        readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                        readonly maximum: 200;
                                    };
                                };
                            };
                            readonly order_data: {
                                readonly type: "object";
                                readonly description: "Free-form data related to the eCommerce platform";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly platform_name: {
                                        readonly type: "string";
                                        readonly description: "A display-ready sales channel or platform name";
                                        readonly maximum: 200;
                                    };
                                    readonly platform_order_number: {
                                        readonly type: "string";
                                        readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                        readonly maximum: 200;
                                    };
                                    readonly order_created_at: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                    };
                                    readonly order_tag_list: {
                                        readonly type: "array";
                                        readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly maxItems: 500;
                                    };
                                    readonly seller_notes: {
                                        readonly type: "string";
                                        readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                    };
                                    readonly buyer_notes: {
                                        readonly type: "string";
                                        readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                    };
                                    readonly buyer_selected_courier_name: {
                                        readonly type: "string";
                                        readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                    };
                                };
                            };
                            readonly last_failure_http_response_messages: {
                                readonly type: "array";
                                readonly description: "This attribute stores the HTTP response of the most recent unsuccessful attempt to interact with an external service, such as a failed label creation.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly code: {
                                            readonly type: "string";
                                        };
                                        readonly content: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                                readonly additionalProperties: true;
                            };
                            readonly set_as_residential: {
                                readonly type: "boolean";
                                readonly description: "Indicates whether or not the user believes the receiver address qualifies for a residential surcharge.";
                            };
                            readonly consignee_tax_id: {
                                readonly type: "string";
                                readonly description: "Tax ID for the receiver. Maybe helpful or required for customs clearance, depending on the destination country.";
                            };
                            readonly eei_reference: {
                                readonly type: "string";
                                readonly description: "References data (Electronic Export Information) filed through one of the systems for goods shipped from the U.S.\nto a foreign country. Currently only used for FedEx shipments. The following possibilities may or may not qualify:\n  * An Automated Export System (AES) citation\n  * A Foreign Trade Regulations (FTR) exemption number\n  * An International Traffic in Arms Reduction (ITAR) exemption code\n  * A US Department of Commerce export license number";
                            };
                            readonly regulatory_identifiers: {
                                readonly type: "object";
                                readonly description: "Seller's identifiers for various tax, import and export regulations.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly eori: {
                                        readonly type: "string";
                                        readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                    };
                                    readonly ioss: {
                                        readonly type: "string";
                                        readonly description: "Import One Stop Shop (IOSS) number.";
                                    };
                                    readonly vat_number: {
                                        readonly type: "string";
                                        readonly description: "Value-Added Tax (VAT) number.";
                                    };
                                };
                            };
                            readonly buyer_regulatory_identifiers: {
                                readonly type: "object";
                                readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly ein: {
                                        readonly type: "string";
                                        readonly description: "Employer Identification Number (EIN) number.";
                                    };
                                    readonly vat_number: {
                                        readonly type: "string";
                                        readonly description: "Value-Added Tax (VAT) number.";
                                    };
                                    readonly ssn: {
                                        readonly type: "string";
                                        readonly description: "Social Security Number (SSN) number.";
                                    };
                                };
                            };
                            readonly return: {
                                readonly type: "boolean";
                                readonly description: "Whether the shipment is a return shipment or not";
                            };
                            readonly incoterms: {
                                readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                readonly type: "string";
                                readonly enum: readonly ["DDU", "DDP", any];
                                readonly default: "DDU";
                            };
                            readonly insurance: {
                                readonly type: "object";
                                readonly description: "Insurance";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly is_insured: {
                                        readonly type: "boolean";
                                        readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                        readonly default: false;
                                    };
                                    readonly insured_amount: {
                                        readonly type: "number";
                                        readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                    };
                                    readonly insured_currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                };
                            };
                            readonly parcels: {
                                readonly type: "array";
                                readonly description: "Parcels";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "ID of the parcel";
                                        };
                                        readonly total_actual_weight: {
                                            readonly type: "number";
                                            readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                        };
                                        readonly box: {
                                            readonly type: "object";
                                            readonly description: "User-defined details of a box used for shipments";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "ID";
                                                };
                                                readonly courier: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly umbrella_name: {
                                                            readonly type: "string";
                                                            readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                                        };
                                                        readonly country_alpha2: {
                                                            readonly type: "string";
                                                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                        };
                                                    };
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Name";
                                                };
                                                readonly slug: {
                                                    readonly type: "string";
                                                    readonly description: "Slug";
                                                };
                                                readonly outer_dimensions: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly description: "A measure of the space taken by the box itself, in cm.";
                                                    readonly properties: {
                                                        readonly length: {
                                                            readonly type: "number";
                                                        };
                                                        readonly width: {
                                                            readonly type: "number";
                                                        };
                                                        readonly height: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                                readonly weight: {
                                                    readonly type: "number";
                                                    readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly description: "Box type.";
                                                };
                                            };
                                        };
                                        readonly items: {
                                            readonly type: "array";
                                            readonly description: "Array of all shipment items";
                                            readonly minItems: 1;
                                            readonly maxItems: 200;
                                            readonly items: {
                                                readonly type: "object";
                                                readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "ID of the item";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "Description of the item";
                                                        readonly maximum: 200;
                                                    };
                                                    readonly category: {
                                                        readonly type: "string";
                                                        readonly description: "Item Category slug. Use the Item Categories API to retrieve a list of available item categories or use HS Code field.";
                                                        readonly maximum: 200;
                                                    };
                                                    readonly sku: {
                                                        readonly type: "string";
                                                        readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                                        readonly maximum: 100;
                                                    };
                                                    readonly hs_code: {
                                                        readonly type: "string";
                                                        readonly description: "HS Code of the item";
                                                    };
                                                    readonly origin_country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                                    };
                                                    readonly contains_battery_pi966: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                                    };
                                                    readonly contains_battery_pi967: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                                    };
                                                    readonly contains_liquids: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                                    };
                                                    readonly quantity: {
                                                        readonly type: "integer";
                                                        readonly description: "Item quantity";
                                                        readonly default: 1;
                                                    };
                                                    readonly dimensions: {
                                                        readonly type: "object";
                                                        readonly description: "Dimensions of the item";
                                                        readonly additionalProperties: false;
                                                        readonly properties: {
                                                            readonly length: {
                                                                readonly type: "number";
                                                                readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                            };
                                                            readonly width: {
                                                                readonly type: "number";
                                                                readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                            };
                                                            readonly height: {
                                                                readonly type: "number";
                                                                readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                            };
                                                        };
                                                    };
                                                    readonly actual_weight: {
                                                        readonly type: "number";
                                                        readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                                    };
                                                    readonly origin_currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                        readonly examples: readonly ["USD"];
                                                    };
                                                    readonly origin_customs_value: {
                                                        readonly type: "number";
                                                        readonly description: "Customs value of the item";
                                                    };
                                                    readonly declared_currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                        readonly examples: readonly ["USD"];
                                                    };
                                                    readonly declared_customs_value: {
                                                        readonly type: "number";
                                                        readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly total_customs_value: {
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly description: "Sum of the value assigned to all shipment line items";
                            };
                            readonly total_actual_weight: {
                                readonly type: "number";
                                readonly description: "Sum of the specified weights of all *parcels* in the shipment (`parcel.actual_weight`), as measured on a scale in units specified by `company.weight_unit`.";
                            };
                            readonly shipment_state: {
                                readonly type: "string";
                                readonly description: "The state of the shipment record within the Easyship system\n\n`created` `draft` `calculating` `cancelling` `cancelled` `discarded` `deleted`";
                                readonly default: "created";
                                readonly enum: readonly ["created", "draft", "calculating", "cancelling", "cancelled", "discarded", "deleted"];
                            };
                            readonly pickup_state: {
                                readonly type: "string";
                                readonly default: "not_requested";
                                readonly description: "The state of the hand-over from shipper to courier. `pending_handover` applies only to eFulfillment companies.";
                            };
                            readonly delivery_state: {
                                readonly type: "string";
                                readonly default: "not_created";
                                readonly description: "The state of the hand-over from courier to receiver.\n\n`not_created` `pending` `info_received` `in_transit_to_customer` `out_for_delivery` `delivered` `failed_attempt` `exception` `expired` `lost_by_courier` `returned_to_shipper`";
                                readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                            };
                            readonly label_state: {
                                readonly type: "string";
                                readonly default: "not_created";
                                readonly description: "The state of the label(s) meant to be printed and attached to this shipment's parcels\n\n`not_created` `pending` `generating` `generated` `printed` `failed` `technical_failed` `reported` `voided` `void_failed`";
                                readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported", "voided", "void_failed"];
                            };
                            readonly warehouse_state: {
                                readonly type: "string";
                                readonly default: "none";
                                readonly description: "The state of the fulfillment process within the warehouse\n\n`none` `pending` `created` `failed` `packed` `cancelled` `cancelled_no_stock` `backorder_no_stock` `shipped` `returned` `awaiting_dispatch`";
                                readonly enum: readonly ["none", "pending", "created", "failed", "packed", "cancelled", "cancelled_no_stock", "backorder_no_stock", "shipped", "returned", "awaiting_dispatch"];
                            };
                            readonly warehouse_code: {
                                readonly type: "string";
                                readonly description: "Warehouse code (warehouse/eFulfilment only)";
                            };
                            readonly original_easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly trackings: {
                                readonly type: "array";
                                readonly description: "Sources of tracking data for this shipment";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "A source of tracking data for the shipment's journey";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Reference provided by the courier for this leg";
                                        };
                                        readonly local_tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Local tracking number provided by DHL eCommerce";
                                        };
                                        readonly alternate_tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Alternate tracking number provided by DHL eCommerce";
                                        };
                                        readonly leg_number: {
                                            readonly type: "integer";
                                            readonly minimum: 1;
                                            readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                        };
                                        readonly handler: {
                                            readonly type: "string";
                                            readonly description: "The service that is handling the tracking process";
                                        };
                                        readonly tracking_state: {
                                            readonly type: "string";
                                            readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                            readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                        };
                                    };
                                };
                            };
                            readonly tracking_page_url: {
                                readonly type: "string";
                                readonly description: "Tracking page URL";
                            };
                            readonly shipping_documents: {
                                readonly type: "array";
                                readonly description: "Shipping documents";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly category: {
                                            readonly type: "string";
                                            readonly description: "Document category";
                                        };
                                        readonly required: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the document is required";
                                        };
                                        readonly format: {
                                            readonly type: "string";
                                            readonly description: "Document format";
                                        };
                                        readonly page_size: {
                                            readonly type: "string";
                                            readonly description: "Page size";
                                        };
                                        readonly base64_encoded_strings: {
                                            readonly type: "array";
                                            readonly description: "Base64 encoded strings";
                                            readonly items: {
                                                readonly type: "string";
                                                readonly format: "byte";
                                            };
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly description: "URL of the document";
                                        };
                                    };
                                };
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                readonly examples: readonly ["USD"];
                            };
                            readonly courier_service: {
                                readonly type: "object";
                                readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly courier_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "The courier ID that the current courier service is associated with";
                                    };
                                    readonly umbrella_name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier company that offers this service.";
                                    };
                                    readonly easyship_courier_service: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                    };
                                };
                            };
                            readonly rates: {
                                readonly type: "array";
                                readonly description: "Array of available courier services for this shipment, along with the rates charged. Courier services are excluded if the shipment's contents or destination do not meet each service's eligibility requirements.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly courier_service: {
                                            readonly type: "object";
                                            readonly description: "Courier Service for Rate";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "unique identifier for a courier service";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Human-readable name for the courier service used in this rate.";
                                                };
                                                readonly courier_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "The courier ID that the current courier service is associated with";
                                                };
                                                readonly umbrella_name: {
                                                    readonly type: "string";
                                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                                };
                                                readonly logo: {
                                                    readonly type: "string";
                                                    readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                                    readonly deprecated: true;
                                                };
                                                readonly easyship_courier_service: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                                };
                                            };
                                        };
                                        readonly min_delivery_time: {
                                            readonly type: "integer";
                                            readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                                        };
                                        readonly max_delivery_time: {
                                            readonly type: "integer";
                                            readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                                        };
                                        readonly value_for_money_rank: {
                                            readonly type: "number";
                                            readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                                        };
                                        readonly delivery_time_rank: {
                                            readonly type: "number";
                                            readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                                        };
                                        readonly cost_rank: {
                                            readonly type: "number";
                                            readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                            readonly examples: readonly ["USD"];
                                        };
                                        readonly shipment_charge: {
                                            readonly type: "number";
                                            readonly description: "Base cost of the courier service";
                                        };
                                        readonly fuel_surcharge: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when fuel costs are high";
                                        };
                                        readonly remote_area_surcharge: {
                                            readonly type: "number";
                                            readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                        };
                                        readonly remote_area_surcharges: {
                                            readonly description: "Origin and destination remote area surcharges";
                                            readonly type: "object";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly origin: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["Pickup Area Surcharge"];
                                                        };
                                                        readonly base: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                                readonly destination: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["Delivery Area Surcharge"];
                                                        };
                                                        readonly base: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly other_surcharges: {
                                            readonly type: "object";
                                            readonly description: "Other surcharges";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly total_fee: {
                                                    readonly type: "number";
                                                    readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                                };
                                                readonly details: {
                                                    readonly type: "array";
                                                    readonly description: "An array of individual surcharges being applied";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly additionalProperties: false;
                                                        readonly properties: {
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "Surcharge name, in English, to be displayed to user";
                                                                readonly examples: readonly ["Peak Surcharge"];
                                                            };
                                                            readonly fee: {
                                                                readonly type: "number";
                                                                readonly description: "Surcharge fee in the currency of the shipment";
                                                            };
                                                            readonly origin_fee: {
                                                                readonly type: "number";
                                                                readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly oversized_surcharge: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                        };
                                        readonly additional_services_surcharge: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                        };
                                        readonly residential_full_fee: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when the receiver is at a residential address";
                                        };
                                        readonly residential_discounted_fee: {
                                            readonly type: "number";
                                            readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                        };
                                        readonly shipment_charge_total: {
                                            readonly type: "number";
                                            readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                        };
                                        readonly warehouse_handling_fee: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                        };
                                        readonly insurance_fee: {
                                            readonly type: "number";
                                            readonly description: "The cost of the insurance policy purchased for this shipment";
                                        };
                                        readonly sales_tax: {
                                            readonly type: "number";
                                            readonly description: "National government taxes, calculated as a portion of the purchase price";
                                        };
                                        readonly provincial_sales_tax: {
                                            readonly type: "number";
                                            readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                        };
                                        readonly ddp_handling_fee: {
                                            readonly type: "number";
                                            readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly import_tax_charge: {
                                            readonly type: "number";
                                            readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly import_tax_non_chargeable: {
                                            readonly type: "number";
                                            readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly import_duty_charge: {
                                            readonly type: "number";
                                            readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly total_charge: {
                                            readonly type: "number";
                                            readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                        };
                                        readonly is_above_threshold: {
                                            readonly type: "boolean";
                                            readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                                        };
                                        readonly incoterms: {
                                            readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                            readonly type: "string";
                                            readonly enum: readonly ["DDU", "DDP", any];
                                            readonly default: "DDU";
                                        };
                                        readonly estimated_import_tax: {
                                            readonly type: "number";
                                            readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly estimated_import_duty: {
                                            readonly type: "number";
                                            readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                        };
                                        readonly minimum_pickup_fee: {
                                            readonly type: "number";
                                            readonly minimum: 0;
                                            readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                        };
                                        readonly available_handover_options: {
                                            readonly type: "array";
                                            readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly tracking_rating: {
                                            readonly type: "number";
                                            readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                            readonly minimum: -1;
                                            readonly maximum: 3;
                                        };
                                        readonly easyship_rating: {
                                            readonly type: "number";
                                            readonly minimum: 0;
                                            readonly maximum: 5;
                                            readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                                        };
                                        readonly courier_remarks: {
                                            readonly type: "string";
                                            readonly description: "Additional details relevant to choosing the appropriate courier service";
                                        };
                                        readonly payment_recipient: {
                                            readonly type: "string";
                                            readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                            readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                                        };
                                        readonly discount: {
                                            readonly type: "object";
                                            readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly amount: {
                                                    readonly type: "number";
                                                    readonly description: "A fixed amount to discount from the price";
                                                };
                                                readonly origin_amount: {
                                                    readonly type: "number";
                                                    readonly description: "Discount origin amount";
                                                };
                                            };
                                        };
                                        readonly rates_in_origin_currency: {
                                            readonly type: "object";
                                            readonly description: "Rates in origin currency";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly shipment_charge: {
                                                    readonly type: "number";
                                                    readonly description: "Base cost of the courier service";
                                                };
                                                readonly fuel_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when fuel costs are high";
                                                };
                                                readonly remote_area_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                                };
                                                readonly additional_services_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                                };
                                                readonly oversized_surcharge: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                                };
                                                readonly shipment_charge_total: {
                                                    readonly type: "number";
                                                    readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                                };
                                                readonly warehouse_handling_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                                };
                                                readonly insurance_fee: {
                                                    readonly type: "number";
                                                    readonly description: "The cost of the insurance policy purchased for this shipment";
                                                };
                                                readonly ddp_handling_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly import_tax_charge: {
                                                    readonly type: "number";
                                                    readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly import_tax_non_chargeable: {
                                                    readonly type: "number";
                                                    readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly import_duty_charge: {
                                                    readonly type: "number";
                                                    readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly residential_discounted_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                                };
                                                readonly residential_full_fee: {
                                                    readonly type: "number";
                                                    readonly description: "A fee added by the courier when the receiver is at a residential address";
                                                };
                                                readonly total_charge: {
                                                    readonly type: "number";
                                                    readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                                };
                                                readonly estimated_import_tax: {
                                                    readonly type: "number";
                                                    readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly estimated_import_duty: {
                                                    readonly type: "number";
                                                    readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                                };
                                                readonly sales_tax: {
                                                    readonly type: "number";
                                                    readonly description: "National government taxes, calculated as a portion of the purchase price";
                                                };
                                                readonly provincial_sales_tax: {
                                                    readonly type: "number";
                                                    readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                                };
                                                readonly minimum_pickup_fee: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                                };
                                            };
                                        };
                                        readonly description: {
                                            readonly type: "string";
                                            readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                                        };
                                        readonly full_description: {
                                            readonly type: "string";
                                            readonly description: "Full description";
                                        };
                                    };
                                };
                            };
                            readonly shipping_settings: {
                                readonly type: "object";
                                readonly description: "Shipping settings";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly b13a_filing: {
                                        readonly type: "object";
                                        readonly description: "B13A filing (currently available only for FedEx)";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly option: {
                                                readonly type: "string";
                                                readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                                readonly description: "`not_required` `fedex_to_stamp` `filed_electronically` `manually_attached` `summary_reporting`";
                                            };
                                            readonly option_export_compliance_statement: {
                                                readonly type: "string";
                                                readonly description: "Export compliance statement";
                                            };
                                            readonly permit_number: {
                                                readonly type: "string";
                                                readonly description: "Permit number";
                                            };
                                        };
                                    };
                                    readonly label_customization_fields: {
                                        readonly anyOf: readonly [{
                                            readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                            readonly type: "array";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "object";
                                                readonly required: readonly ["value"];
                                                readonly properties: {
                                                    readonly code: {
                                                        readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                        readonly type: "string";
                                                    };
                                                    readonly value: {
                                                        readonly type: "string";
                                                        readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    };
                                                    readonly convert_to_barcode: {
                                                        readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "array";
                                            readonly minItems: 0;
                                            readonly items: {};
                                        }];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsInsureCreate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly format: {
                    readonly type: "string";
                    readonly examples: readonly ["URL"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Document format (Options: `URL`, `PDF`, `PNG`). `URL` will be a link to a .pdf file, `PNG` and `PDF` will be an array of base64 encoded strings.";
                };
                readonly label: {
                    readonly type: "string";
                    readonly examples: readonly ["4x6"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Label page size (Options: `A4`, `A5`, `4x6`). Some couriers only offer A4 labels.";
                };
                readonly commercial_invoice: {
                    readonly type: "string";
                    readonly examples: readonly ["A4"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Commercial invoice page size (Options: `A4`, `4x6`). An invoice will only be provided if necessary. Some couriers offer a paperless invoice service.";
                };
                readonly packing_slip: {
                    readonly type: "string";
                    readonly examples: readonly ["none"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Packing slip page size (Options: `none`, `A4`, `4x6`).";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Single shipment with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipment: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was created in the Easyship system";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was most recently modified";
                        };
                        readonly label_paid_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When Easyship was paid for the shipment";
                        };
                        readonly label_generated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When label was generated";
                        };
                        readonly origin_address: {
                            readonly type: "object";
                            readonly description: "Origin address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly sender_address: {
                            readonly type: "object";
                            readonly description: "Sender address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly return_address: {
                            readonly type: "object";
                            readonly description: "Return address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly destination_address: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly maximum: 200;
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name`";
                                    readonly maximum: 50;
                                };
                                readonly delivery_instructions: {
                                    readonly type: "string";
                                    readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                    readonly maximum: 200;
                                };
                            };
                        };
                        readonly order_data: {
                            readonly type: "object";
                            readonly description: "Free-form data related to the eCommerce platform";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly platform_name: {
                                    readonly type: "string";
                                    readonly description: "A display-ready sales channel or platform name";
                                    readonly maximum: 200;
                                };
                                readonly platform_order_number: {
                                    readonly type: "string";
                                    readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                    readonly maximum: 200;
                                };
                                readonly order_created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                };
                                readonly order_tag_list: {
                                    readonly type: "array";
                                    readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly maxItems: 500;
                                };
                                readonly seller_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                };
                                readonly buyer_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                };
                                readonly buyer_selected_courier_name: {
                                    readonly type: "string";
                                    readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                };
                            };
                        };
                        readonly last_failure_http_response_messages: {
                            readonly type: "array";
                            readonly description: "This attribute stores the HTTP response of the most recent unsuccessful attempt to interact with an external service, such as a failed label creation.";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly code: {
                                        readonly type: "string";
                                    };
                                    readonly content: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                            readonly additionalProperties: true;
                        };
                        readonly set_as_residential: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether or not the user believes the receiver address qualifies for a residential surcharge.";
                        };
                        readonly consignee_tax_id: {
                            readonly type: "string";
                            readonly description: "Tax ID for the receiver. Maybe helpful or required for customs clearance, depending on the destination country.";
                        };
                        readonly eei_reference: {
                            readonly type: "string";
                            readonly description: "References data (Electronic Export Information) filed through one of the systems for goods shipped from the U.S.\nto a foreign country. Currently only used for FedEx shipments. The following possibilities may or may not qualify:\n  * An Automated Export System (AES) citation\n  * A Foreign Trade Regulations (FTR) exemption number\n  * An International Traffic in Arms Reduction (ITAR) exemption code\n  * A US Department of Commerce export license number";
                        };
                        readonly regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Seller's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly eori: {
                                    readonly type: "string";
                                    readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                };
                                readonly ioss: {
                                    readonly type: "string";
                                    readonly description: "Import One Stop Shop (IOSS) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                            };
                        };
                        readonly buyer_regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly ein: {
                                    readonly type: "string";
                                    readonly description: "Employer Identification Number (EIN) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                                readonly ssn: {
                                    readonly type: "string";
                                    readonly description: "Social Security Number (SSN) number.";
                                };
                            };
                        };
                        readonly return: {
                            readonly type: "boolean";
                            readonly description: "Whether the shipment is a return shipment or not";
                        };
                        readonly incoterms: {
                            readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                            readonly type: "string";
                            readonly enum: readonly ["DDU", "DDP", any];
                            readonly default: "DDU";
                        };
                        readonly insurance: {
                            readonly type: "object";
                            readonly description: "Insurance";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly is_insured: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                    readonly default: false;
                                };
                                readonly insured_amount: {
                                    readonly type: "number";
                                    readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                };
                                readonly insured_currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                    readonly examples: readonly ["USD"];
                                };
                            };
                        };
                        readonly parcels: {
                            readonly type: "array";
                            readonly description: "Parcels";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "ID of the parcel";
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                    };
                                    readonly box: {
                                        readonly type: "object";
                                        readonly description: "User-defined details of a box used for shipments";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "ID";
                                            };
                                            readonly courier: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly umbrella_name: {
                                                        readonly type: "string";
                                                        readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                                    };
                                                    readonly country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                    };
                                                };
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name";
                                            };
                                            readonly slug: {
                                                readonly type: "string";
                                                readonly description: "Slug";
                                            };
                                            readonly outer_dimensions: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly description: "A measure of the space taken by the box itself, in cm.";
                                                readonly properties: {
                                                    readonly length: {
                                                        readonly type: "number";
                                                    };
                                                    readonly width: {
                                                        readonly type: "number";
                                                    };
                                                    readonly height: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly weight: {
                                                readonly type: "number";
                                                readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly description: "Box type.";
                                            };
                                        };
                                    };
                                    readonly items: {
                                        readonly type: "array";
                                        readonly description: "Array of all shipment items";
                                        readonly minItems: 1;
                                        readonly maxItems: 200;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "ID of the item";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "Description of the item";
                                                    readonly maximum: 200;
                                                };
                                                readonly category: {
                                                    readonly type: "string";
                                                    readonly description: "Item Category slug. Use the Item Categories API to retrieve a list of available item categories or use HS Code field.";
                                                    readonly maximum: 200;
                                                };
                                                readonly sku: {
                                                    readonly type: "string";
                                                    readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                                    readonly maximum: 100;
                                                };
                                                readonly hs_code: {
                                                    readonly type: "string";
                                                    readonly description: "HS Code of the item";
                                                };
                                                readonly origin_country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                                };
                                                readonly contains_battery_pi966: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_battery_pi967: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_liquids: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                                };
                                                readonly quantity: {
                                                    readonly type: "integer";
                                                    readonly description: "Item quantity";
                                                    readonly default: 1;
                                                };
                                                readonly dimensions: {
                                                    readonly type: "object";
                                                    readonly description: "Dimensions of the item";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly length: {
                                                            readonly type: "number";
                                                            readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly width: {
                                                            readonly type: "number";
                                                            readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly height: {
                                                            readonly type: "number";
                                                            readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                        };
                                                    };
                                                };
                                                readonly actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                                };
                                                readonly origin_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly origin_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Customs value of the item";
                                                };
                                                readonly declared_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly declared_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly total_customs_value: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly description: "Sum of the value assigned to all shipment line items";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Sum of the specified weights of all *parcels* in the shipment (`parcel.actual_weight`), as measured on a scale in units specified by `company.weight_unit`.";
                        };
                        readonly shipment_state: {
                            readonly type: "string";
                            readonly description: "The state of the shipment record within the Easyship system\n\n`created` `draft` `calculating` `cancelling` `cancelled` `discarded` `deleted`";
                            readonly default: "created";
                            readonly enum: readonly ["created", "draft", "calculating", "cancelling", "cancelled", "discarded", "deleted"];
                        };
                        readonly pickup_state: {
                            readonly type: "string";
                            readonly default: "not_requested";
                            readonly description: "The state of the hand-over from shipper to courier. `pending_handover` applies only to eFulfillment companies.";
                        };
                        readonly delivery_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the hand-over from courier to receiver.\n\n`not_created` `pending` `info_received` `in_transit_to_customer` `out_for_delivery` `delivered` `failed_attempt` `exception` `expired` `lost_by_courier` `returned_to_shipper`";
                            readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                        };
                        readonly label_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the label(s) meant to be printed and attached to this shipment's parcels\n\n`not_created` `pending` `generating` `generated` `printed` `failed` `technical_failed` `reported` `voided` `void_failed`";
                            readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported", "voided", "void_failed"];
                        };
                        readonly warehouse_state: {
                            readonly type: "string";
                            readonly default: "none";
                            readonly description: "The state of the fulfillment process within the warehouse\n\n`none` `pending` `created` `failed` `packed` `cancelled` `cancelled_no_stock` `backorder_no_stock` `shipped` `returned` `awaiting_dispatch`";
                            readonly enum: readonly ["none", "pending", "created", "failed", "packed", "cancelled", "cancelled_no_stock", "backorder_no_stock", "shipped", "returned", "awaiting_dispatch"];
                        };
                        readonly warehouse_code: {
                            readonly type: "string";
                            readonly description: "Warehouse code (warehouse/eFulfilment only)";
                        };
                        readonly original_easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly trackings: {
                            readonly type: "array";
                            readonly description: "Sources of tracking data for this shipment";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "A source of tracking data for the shipment's journey";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Reference provided by the courier for this leg";
                                    };
                                    readonly local_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Local tracking number provided by DHL eCommerce";
                                    };
                                    readonly alternate_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Alternate tracking number provided by DHL eCommerce";
                                    };
                                    readonly leg_number: {
                                        readonly type: "integer";
                                        readonly minimum: 1;
                                        readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                    };
                                    readonly handler: {
                                        readonly type: "string";
                                        readonly description: "The service that is handling the tracking process";
                                    };
                                    readonly tracking_state: {
                                        readonly type: "string";
                                        readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                        readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                    };
                                };
                            };
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly description: "Tracking page URL";
                        };
                        readonly shipping_documents: {
                            readonly type: "array";
                            readonly description: "Shipping documents";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category: {
                                        readonly type: "string";
                                        readonly description: "Document category";
                                    };
                                    readonly required: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the document is required";
                                    };
                                    readonly format: {
                                        readonly type: "string";
                                        readonly description: "Document format";
                                    };
                                    readonly page_size: {
                                        readonly type: "string";
                                        readonly description: "Page size";
                                    };
                                    readonly base64_encoded_strings: {
                                        readonly type: "array";
                                        readonly description: "Base64 encoded strings";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "byte";
                                        };
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "URL of the document";
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly courier_id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The courier ID that the current courier service is associated with";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                                readonly easyship_courier_service: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                };
                            };
                        };
                        readonly rates: {
                            readonly type: "array";
                            readonly description: "Array of available courier services for this shipment, along with the rates charged. Courier services are excluded if the shipment's contents or destination do not meet each service's eligibility requirements.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly courier_service: {
                                        readonly type: "object";
                                        readonly description: "Courier Service for Rate";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "unique identifier for a courier service";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier service used in this rate.";
                                            };
                                            readonly courier_id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "The courier ID that the current courier service is associated with";
                                            };
                                            readonly umbrella_name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier company that offers this service.";
                                            };
                                            readonly logo: {
                                                readonly type: "string";
                                                readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                                readonly deprecated: true;
                                            };
                                            readonly easyship_courier_service: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                            };
                                        };
                                    };
                                    readonly min_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly max_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly value_for_money_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                                    };
                                    readonly delivery_time_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                                    };
                                    readonly cost_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                    readonly shipment_charge: {
                                        readonly type: "number";
                                        readonly description: "Base cost of the courier service";
                                    };
                                    readonly fuel_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when fuel costs are high";
                                    };
                                    readonly remote_area_surcharge: {
                                        readonly type: "number";
                                        readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                    };
                                    readonly remote_area_surcharges: {
                                        readonly description: "Origin and destination remote area surcharges";
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly origin: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Pickup Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly destination: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Delivery Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly other_surcharges: {
                                        readonly type: "object";
                                        readonly description: "Other surcharges";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly total_fee: {
                                                readonly type: "number";
                                                readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                            };
                                            readonly details: {
                                                readonly type: "array";
                                                readonly description: "An array of individual surcharges being applied";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Surcharge name, in English, to be displayed to user";
                                                            readonly examples: readonly ["Peak Surcharge"];
                                                        };
                                                        readonly fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment";
                                                        };
                                                        readonly origin_fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly oversized_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                    };
                                    readonly additional_services_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                    };
                                    readonly residential_full_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly residential_discounted_fee: {
                                        readonly type: "number";
                                        readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly shipment_charge_total: {
                                        readonly type: "number";
                                        readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                    };
                                    readonly warehouse_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                    };
                                    readonly insurance_fee: {
                                        readonly type: "number";
                                        readonly description: "The cost of the insurance policy purchased for this shipment";
                                    };
                                    readonly sales_tax: {
                                        readonly type: "number";
                                        readonly description: "National government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly provincial_sales_tax: {
                                        readonly type: "number";
                                        readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly ddp_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_charge: {
                                        readonly type: "number";
                                        readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_non_chargeable: {
                                        readonly type: "number";
                                        readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_duty_charge: {
                                        readonly type: "number";
                                        readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly total_charge: {
                                        readonly type: "number";
                                        readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                    };
                                    readonly is_above_threshold: {
                                        readonly type: "boolean";
                                        readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                                    };
                                    readonly incoterms: {
                                        readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                        readonly type: "string";
                                        readonly enum: readonly ["DDU", "DDP", any];
                                        readonly default: "DDU";
                                    };
                                    readonly estimated_import_tax: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly estimated_import_duty: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly minimum_pickup_fee: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                    };
                                    readonly available_handover_options: {
                                        readonly type: "array";
                                        readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly tracking_rating: {
                                        readonly type: "number";
                                        readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                        readonly minimum: -1;
                                        readonly maximum: 3;
                                    };
                                    readonly easyship_rating: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 5;
                                        readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                                    };
                                    readonly courier_remarks: {
                                        readonly type: "string";
                                        readonly description: "Additional details relevant to choosing the appropriate courier service";
                                    };
                                    readonly payment_recipient: {
                                        readonly type: "string";
                                        readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                        readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                                    };
                                    readonly discount: {
                                        readonly type: "object";
                                        readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly amount: {
                                                readonly type: "number";
                                                readonly description: "A fixed amount to discount from the price";
                                            };
                                            readonly origin_amount: {
                                                readonly type: "number";
                                                readonly description: "Discount origin amount";
                                            };
                                        };
                                    };
                                    readonly rates_in_origin_currency: {
                                        readonly type: "object";
                                        readonly description: "Rates in origin currency";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                readonly examples: readonly ["USD"];
                                            };
                                            readonly shipment_charge: {
                                                readonly type: "number";
                                                readonly description: "Base cost of the courier service";
                                            };
                                            readonly fuel_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when fuel costs are high";
                                            };
                                            readonly remote_area_surcharge: {
                                                readonly type: "number";
                                                readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                            };
                                            readonly additional_services_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                            };
                                            readonly oversized_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                            };
                                            readonly shipment_charge_total: {
                                                readonly type: "number";
                                                readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                            };
                                            readonly warehouse_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                            };
                                            readonly insurance_fee: {
                                                readonly type: "number";
                                                readonly description: "The cost of the insurance policy purchased for this shipment";
                                            };
                                            readonly ddp_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_charge: {
                                                readonly type: "number";
                                                readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_non_chargeable: {
                                                readonly type: "number";
                                                readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_duty_charge: {
                                                readonly type: "number";
                                                readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly residential_discounted_fee: {
                                                readonly type: "number";
                                                readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly residential_full_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly total_charge: {
                                                readonly type: "number";
                                                readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                            };
                                            readonly estimated_import_tax: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly estimated_import_duty: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly sales_tax: {
                                                readonly type: "number";
                                                readonly description: "National government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly provincial_sales_tax: {
                                                readonly type: "number";
                                                readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly minimum_pickup_fee: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                            };
                                        };
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                        readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                                    };
                                    readonly full_description: {
                                        readonly type: "string";
                                        readonly description: "Full description";
                                    };
                                };
                            };
                        };
                        readonly shipping_settings: {
                            readonly type: "object";
                            readonly description: "Shipping settings";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly b13a_filing: {
                                    readonly type: "object";
                                    readonly description: "B13A filing (currently available only for FedEx)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly option: {
                                            readonly type: "string";
                                            readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                            readonly description: "`not_required` `fedex_to_stamp` `filed_electronically` `manually_attached` `summary_reporting`";
                                        };
                                        readonly option_export_compliance_statement: {
                                            readonly type: "string";
                                            readonly description: "Export compliance statement";
                                        };
                                        readonly permit_number: {
                                            readonly type: "string";
                                            readonly description: "Permit number";
                                        };
                                    };
                                };
                                readonly label_customization_fields: {
                                    readonly anyOf: readonly [{
                                        readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["value"];
                                            readonly properties: {
                                                readonly code: {
                                                    readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "string";
                                                    readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                                readonly convert_to_barcode: {
                                                    readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                            };
                                        };
                                    }, {
                                        readonly type: "array";
                                        readonly minItems: 0;
                                        readonly items: {};
                                    }];
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unavailable_couriers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "unique identifier for a courier service";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Unavailable courier name";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly description: "Unavailable reason";
                                    };
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsTrackingsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly easyship_shipment_id: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment.";
                };
                readonly platform_order_number: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Order number on the sales platform. You can choose to use either `easyship_shipment_id` or `platform_order_number`.";
                };
                readonly include_checkpoints: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Include checkpoints in the response.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Shipments with tracking info";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipments: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "A source of tracking data for the shipment's journey";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly platform_order_number: {
                                readonly type: "string";
                                readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                readonly maximum: 200;
                            };
                            readonly origin_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly destination_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The latest event status\n\n`Created` `Cancelled by Company` `Cancelled by Easyship` `Awaiting Pickup at Seller` `Assigned Pickup` `Picked Up at Seller` `Received at Fulfillment Center` `Verified` `Packed` `Shipped` `Incomplete` `Lost by Courier` `To be returned` `Archived` `Draft` `Cancelled` `Label Pending` `Label Ready` `Label Printed` `Pickup Scheduled` `Pickup Complete` `Cancelled (No Stock)` `Handed Over to Courier` `Label Rejected` `Drop-off Complete` `Dispatched from Sorting Hub` `Received at Local Fulfilment Center` `Awaiting Pickup Confirmation by Courier` `Pickup Request Failed` `Uncancelled` `Discarded Draft` `Processing at Consolidation Center` `Exception` `Liquidated` `Awaiting Confirmation by Warehouse` `Order Failed to Create at Warehouse` `Order Received by Warehouse` `Order Packed` `Order Collected` `Backorder (No Stock)` `Awaiting Dispatch by Warehouse` `Cancellation Requested` `Cancellation Request Failed`";
                                readonly enum: readonly ["Created", "Cancelled by Company", "Cancelled by Easyship", "Awaiting Pickup at Seller", "Assigned Pickup", "Picked Up at Seller", "Received at Fulfillment Center", "Verified", "Packed", "Shipped", "Incomplete", "Lost by Courier", "To be returned", "Archived", "Draft", "Cancelled", "Label Pending", "Label Ready", "Label Printed", "Pickup Scheduled", "Pickup Complete", "Cancelled (No Stock)", "Handed Over to Courier", "Label Rejected", "Drop-off Complete", "Dispatched from Sorting Hub", "Received at Local Fulfilment Center", "Awaiting Pickup Confirmation by Courier", "Pickup Request Failed", "Uncancelled", "Discarded Draft", "Processing at Consolidation Center", "Exception", "Liquidated", "Awaiting Confirmation by Warehouse", "Order Failed to Create at Warehouse", "Order Received by Warehouse", "Order Packed", "Order Collected", "Backorder (No Stock)", "Awaiting Dispatch by Warehouse", "Cancellation Requested", "Cancellation Request Failed"];
                            };
                            readonly tracking_page_url: {
                                readonly type: "string";
                                readonly format: "uri";
                            };
                            readonly eta_date: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly trackings: {
                                readonly type: "array";
                                readonly description: "Sources of tracking data for this shipment";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "A source of tracking data for the shipment's journey";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Reference provided by the courier for this leg";
                                        };
                                        readonly local_tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Local tracking number provided by DHL eCommerce";
                                        };
                                        readonly alternate_tracking_number: {
                                            readonly type: "string";
                                            readonly description: "Alternate tracking number provided by DHL eCommerce";
                                        };
                                        readonly leg_number: {
                                            readonly type: "integer";
                                            readonly minimum: 1;
                                            readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                        };
                                        readonly handler: {
                                            readonly type: "string";
                                            readonly description: "The service that is handling the tracking process";
                                        };
                                        readonly tracking_state: {
                                            readonly type: "string";
                                            readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                            readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                        };
                                    };
                                };
                            };
                            readonly checkpoints: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "This represents a checkpoint in the shipment's journey to its destination. This information includes various attributes that provide details about the current state and location of a shipment as recorded by the handler.\n";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly order_number: {
                                            readonly type: "integer";
                                            readonly description: "The numerical sorting index for this checkpoint.";
                                        };
                                        readonly handler: {
                                            readonly type: "string";
                                            readonly description: "The courier or service provider handling the shipment at this checkpoint.";
                                        };
                                        readonly message: {
                                            readonly type: "string";
                                            readonly description: "Descriptive text about the shipment's current status at this checkpoint.";
                                        };
                                        readonly location: {
                                            readonly type: "string";
                                            readonly description: "The specific location where the shipment was processed at this checkpoint.";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly country_name: {
                                            readonly type: "string";
                                            readonly description: "The full name of the country.";
                                        };
                                        readonly country_iso3: {
                                            readonly type: "string";
                                            readonly description: "The ISO 3166-1 alpha-3 code of the country.";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or province.";
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly description: "The postal code of the location.";
                                        };
                                        readonly checkpoint_time: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when this checkpoint was recorded, in ISO 8601 format.";
                                            readonly examples: readonly ["2025-01-01T10:00:00.000Z"];
                                        };
                                        readonly primary_status: {
                                            readonly type: "string";
                                            readonly description: "The primary status category of the shipment at this checkpoint.";
                                            readonly examples: readonly ["In Transit to Customer"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsTransactionRecordsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly description: "List of Transaction Records";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly transaction_records: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "Transaction Record";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly adjustment_type: {
                                    readonly type: "string";
                                    readonly description: "Type of adjustment\n\n`Refund after Cancellation` `Remote Area Surcharge (ODA Reconciliation)` `Declared Value Revaluation (Tax Reconciliation)` `Adjustment based on Weight (Weight Reconciliation)` `Payment of Tax & Duty on behalf of Consignee` `Return Fees` `Declared Value Revaluation` `Address Correction Fee` `Refund (100%)` `Residential Area Surcharge` `Charge After Refund` `Warehouse Handling Fee` `Refund for Fixed Shipment` `Charge for Fixed Shipment` `Refund (50%)` `Oversized Surcharge` `Refund - Damaged` `Refund - Lost` `Pay On Scan` `Account Consolidation` `Others`";
                                    readonly enum: readonly ["Refund after Cancellation", "Remote Area Surcharge (ODA Reconciliation)", "Declared Value Revaluation (Tax Reconciliation)", "Adjustment based on Weight (Weight Reconciliation)", "Payment of Tax & Duty on behalf of Consignee", "Return Fees", "Declared Value Revaluation", "Address Correction Fee", "Refund (100%)", "Residential Area Surcharge", "Charge After Refund", "Warehouse Handling Fee", "Refund for Fixed Shipment", "Charge for Fixed Shipment", "Refund (50%)", "Oversized Surcharge", "Refund - Damaged", "Refund - Lost", "Pay On Scan", "Account Consolidation", "Others"];
                                };
                                readonly amount: {
                                    readonly type: "number";
                                    readonly description: "Amount of adjustment";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "Description of adjustment";
                                };
                                readonly payment_recipient: {
                                    readonly type: "string";
                                    readonly description: "Recipient of payment";
                                };
                                readonly settled_at: {
                                    readonly type: "string";
                                    readonly description: "Date and time of settlement";
                                    readonly format: "date-time";
                                };
                                readonly easyship_shipment_id: {
                                    readonly type: "string";
                                    readonly pattern: "^ES\\w{2}\\d{7,}$";
                                    readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                                };
                            };
                        };
                    };
                    readonly meta: {
                        readonly type: "object";
                        readonly properties: {
                            readonly pagination: {
                                readonly type: "object";
                                readonly description: "Pagination";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly next: {
                                        readonly type: "integer";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                    };
                                    readonly page: {
                                        readonly type: "integer";
                                        readonly description: "Current page";
                                    };
                                };
                            };
                            readonly request_id: {
                                readonly type: "string";
                                readonly description: "An unique ID represent the request.";
                            };
                        };
                    };
                };
            }, {
                readonly type: "string";
                readonly description: "Transaction Records in CSV format";
            }];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShipmentsUpdate: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: false;
        readonly properties: {
            readonly origin_address: {
                readonly type: "object";
                readonly description: "Origin Address";
                readonly required: readonly ["line_1", "city", "company_name", "contact_name", "contact_phone", "contact_email"];
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly sender_address: {
                readonly type: "object";
                readonly description: "Sender Address. Only applies if the courier allows a different address to be displayed on the label. If not specified, the origin address is used by default.";
                readonly required: readonly ["line_1", "city", "company_name", "contact_name", "contact_phone", "contact_email"];
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly return_address: {
                readonly type: "object";
                readonly description: "Return Address. If not specified, the origin address is used by default.";
                readonly required: readonly ["line_1", "city", "company_name", "contact_name", "contact_phone", "contact_email"];
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly destination_address: {
                readonly type: "object";
                readonly required: readonly ["line_1", "city", "contact_name", "contact_email", "contact_phone"];
                readonly additionalProperties: false;
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly maximum: 200;
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name`";
                        readonly maximum: 50;
                    };
                    readonly delivery_instructions: {
                        readonly type: "string";
                        readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                        readonly maximum: 200;
                    };
                };
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                readonly additionalProperties: true;
            };
            readonly set_as_residential: {
                readonly type: "boolean";
                readonly description: "This is automatically validated for US addresses. If specified, validation is bypassed.";
            };
            readonly consignee_tax_id: {
                readonly type: "string";
                readonly description: "The consignee's tax identification number or EIN. This is required for customs clearance when shipping to certain countries, such as China and Brazil.";
            };
            readonly eei_reference: {
                readonly type: "string";
                readonly description: "The Electronic Export Identifier (EEI). This is required when shipping goods over USD2500 in value (Applies to US-outbound shipments only).";
            };
            readonly regulatory_identifiers: {
                readonly type: "object";
                readonly description: "Seller's identifiers for various tax, import and export regulations.";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly eori: {
                        readonly type: "string";
                        readonly description: "Economic Operators Registration and Identification (EORI) number.";
                    };
                    readonly ioss: {
                        readonly type: "string";
                        readonly description: "Import One Stop Shop (IOSS) number.";
                    };
                    readonly vat_number: {
                        readonly type: "string";
                        readonly description: "Value-Added Tax (VAT) number.";
                    };
                };
            };
            readonly incoterms: {
                readonly description: "Terms of Sale";
                readonly type: "string";
                readonly enum: readonly ["DDU", "DDP", any];
                readonly default: "DDU";
            };
            readonly insurance: {
                readonly type: "object";
                readonly description: "Insurance";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly is_insured: {
                        readonly type: "boolean";
                        readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                        readonly default: false;
                    };
                    readonly insured_amount: {
                        readonly type: "number";
                        readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                    };
                    readonly insured_currency: {
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                        readonly examples: readonly ["USD"];
                    };
                };
            };
            readonly order_data: {
                readonly type: "object";
                readonly description: "Free-form data related to the eCommerce platform";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly platform_name: {
                        readonly type: "string";
                        readonly description: "A display-ready sales channel or platform name";
                        readonly maximum: 200;
                    };
                    readonly platform_order_number: {
                        readonly type: "string";
                        readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                        readonly maximum: 200;
                    };
                    readonly order_created_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                    };
                    readonly order_tag_list: {
                        readonly type: "array";
                        readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly maxItems: 500;
                    };
                    readonly seller_notes: {
                        readonly type: "string";
                        readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                    };
                    readonly buyer_notes: {
                        readonly type: "string";
                        readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                    };
                    readonly buyer_selected_courier_name: {
                        readonly type: "string";
                        readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                    };
                };
            };
            readonly courier_settings: {
                readonly type: "object";
                readonly properties: {
                    readonly courier_service_id: {
                        readonly type: "string";
                        readonly description: "Select a specific courier service to create the shipment with (applies if you integrate with the Rates API).";
                    };
                    readonly allow_fallback: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "If `courier_service_id` is provided but the courier can’t be selected, allow the shipment to be created and the next best rate to be selected. Default: `false`. When false and rates for the `courier_service_id` can't be found, an error will be raised and the shipment won’t be created.";
                    };
                    readonly apply_shipping_rules: {
                        readonly type: "boolean";
                        readonly default: true;
                        readonly description: "Apply any [shipping rules](https://support.easyship.com/hc/en-us/articles/115003580152-Automate-Shipping-Process-Shipping-Rules) created on the Easyship dashboard (Default: `true`)";
                    };
                    readonly list_unavailable_services: {
                        readonly type: "boolean";
                        readonly description: "Setting this option will return detailed information with reasons for each courier in the response.";
                    };
                };
            };
            readonly shipping_settings: {
                readonly type: "object";
                readonly properties: {
                    readonly additional_services: {
                        readonly type: "object";
                        readonly description: "Configuration for additional services";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly delivery_confirmation: {
                                readonly description: "Currently officially supported only for selected customers. **Subject to change.**";
                                readonly type: "string";
                                readonly enum: readonly ["ups_delivery_confirmation_adult_signature_required", "ups_delivery_confirmation_signature_required"];
                            };
                            readonly qr_code: {
                                readonly type: "string";
                                readonly description: "Generate QR code when generating label. If a courier does not support it, label will be generated without the QR code. Currently officially supported only for USPS courier. **Subject to change.**";
                                readonly default: "none";
                                readonly enum: readonly ["qr_code", "qr_code_with_label", "none"];
                            };
                        };
                    };
                    readonly units: {
                        readonly type: "object";
                        readonly description: "Units";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly weight: {
                                readonly type: "string";
                                readonly description: "Unit of weight values provided. Options: `kg` / `g` / `lb` / `oz` (Default: `kg`). Unit of values in the response will be in `kg`.";
                                readonly default: "kg";
                                readonly enum: readonly ["kg", "g", "lb", "oz"];
                            };
                            readonly dimensions: {
                                readonly type: "string";
                                readonly description: "Unit of dimension values provided. Options: `cm` / `in` (Default: `cm`) Unit of values in the response will be in `cm`.";
                                readonly default: "cm";
                                readonly enum: readonly ["cm", "in"];
                            };
                        };
                    };
                    readonly buy_label: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "Create a shipment and buy the label in a single API call instead of two. Default: `false`.";
                    };
                    readonly buy_label_synchronous: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "Generate a label synchronously. Returns a label in the response. Default: `false`.";
                    };
                    readonly b13a_filing: {
                        readonly type: "object";
                        readonly description: "B13A filing (currently available only for FedEx)";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly option: {
                                readonly type: "string";
                                readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                            };
                            readonly option_export_compliance_statement: {
                                readonly type: "string";
                                readonly description: "Export compliance statement";
                            };
                            readonly permit_number: {
                                readonly type: "string";
                                readonly description: "Permit number";
                            };
                        };
                    };
                    readonly printing_options: {
                        readonly type: "object";
                        readonly description: "Specify the format and page sizes of the shipping documents. This will only be taken into account if buy_label_synchronous is `true`.";
                        readonly properties: {
                            readonly format: {
                                readonly type: "string";
                                readonly description: "Options: `png`, `pdf`, `url`, `zpl` (Default: `png`)";
                                readonly default: "png";
                                readonly enum: readonly ["png", "pdf", "url", "zpl"];
                            };
                            readonly label: {
                                readonly type: "string";
                                readonly description: "Label page size. Options: `4x6` / `A4` / `A5` (Default: `4x6`)";
                                readonly default: "4x6";
                                readonly enum: readonly ["4x6", "A4", "A5"];
                            };
                            readonly commercial_invoice: {
                                readonly type: "string";
                                readonly description: "Commercial invoice page size. Options: `4x6` / `A4` (Default: `A4`)";
                                readonly default: "A4";
                                readonly enum: readonly ["4x6", "A4"];
                            };
                            readonly packing_slip: {
                                readonly type: "string";
                                readonly description: "Packing slip page size. Options: `4x6` / `A4` (Default: `4x6`)";
                                readonly default: "4x6";
                                readonly enum: readonly ["4x6", "A4", "none"];
                            };
                            readonly remarks: {
                                readonly type: "string";
                                readonly maxLength: 70;
                                readonly description: "Customized commercial invoice remarks for current shipment. It has higher priority than remarks from company settings.";
                            };
                        };
                    };
                    readonly label_customization_fields: {
                        readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                        readonly type: "array";
                        readonly minItems: 1;
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["value"];
                            readonly properties: {
                                readonly code: {
                                    readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                };
                                readonly convert_to_barcode: {
                                    readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                };
                            };
                        };
                    };
                };
            };
            readonly parcels: {
                readonly type: "array";
                readonly description: "Parcels";
                readonly minItems: 1;
                readonly maxItems: 200;
                readonly items: {
                    readonly type: "object";
                    readonly description: "Rate parcel";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "ID of the parcel that should be updated";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                        };
                        readonly box: {
                            readonly type: "object";
                            readonly description: "The box dimensions for the shipment. If the box dimensions are provided, then dimensions for items are optional.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly slug: {
                                    readonly type: "string";
                                    readonly description: "Courier or Custom Box Slug. Use the [Boxes API](https://developers.easyship.com/reference/boxes_index) to retrieve a list of available boxes.";
                                };
                                readonly length: {
                                    readonly type: "number";
                                    readonly description: "Length of the box";
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly description: "Width of the box";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly description: "Height of the box";
                                };
                            };
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly description: "Array of all shipment items";
                            readonly minItems: 1;
                            readonly maxItems: 200;
                            readonly items: {
                                readonly type: "object";
                                readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                        readonly description: "Description of the item";
                                        readonly maximum: 200;
                                    };
                                    readonly category: {
                                        readonly type: "string";
                                        readonly description: "Item category name or slug. Use the [Item Categories API](https://developers.easyship.com/reference/item_categories_index) to retrieve a list of available item categories.";
                                        readonly maximum: 200;
                                    };
                                    readonly sku: {
                                        readonly type: "string";
                                        readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                        readonly maximum: 100;
                                    };
                                    readonly hs_code: {
                                        readonly type: "string";
                                        readonly description: "HS Code of the item";
                                    };
                                    readonly contains_battery_pi966: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                    };
                                    readonly contains_battery_pi967: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                    };
                                    readonly contains_liquids: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                    };
                                    readonly origin_country_alpha2: {
                                        readonly type: "string";
                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                    };
                                    readonly quantity: {
                                        readonly type: "integer";
                                        readonly description: "Item quantity";
                                        readonly default: 1;
                                    };
                                    readonly dimensions: {
                                        readonly type: "object";
                                        readonly description: "Dimensions of the item";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly length: {
                                                readonly type: "number";
                                                readonly description: "Item length; Optional if the Box dimensions are provided.";
                                            };
                                            readonly width: {
                                                readonly type: "number";
                                                readonly description: "Item width; Optional if the Box dimensions are provided.";
                                            };
                                            readonly height: {
                                                readonly type: "number";
                                                readonly description: "Item height; Optional if the Box dimensions are provided.";
                                            };
                                        };
                                    };
                                    readonly actual_weight: {
                                        readonly type: "number";
                                        readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                    };
                                    readonly declared_currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                        readonly examples: readonly ["USD"];
                                    };
                                    readonly declared_customs_value: {
                                        readonly type: "number";
                                        readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "ID of the item that should be updated";
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Easyship Shipment ID provided when creating the shipment";
                };
            };
            readonly required: readonly ["easyship_shipment_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Single shipment with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipment: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was created in the Easyship system";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When the shipment record was most recently modified";
                        };
                        readonly label_paid_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When Easyship was paid for the shipment";
                        };
                        readonly label_generated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "When label was generated";
                        };
                        readonly origin_address: {
                            readonly type: "object";
                            readonly description: "Origin address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly sender_address: {
                            readonly type: "object";
                            readonly description: "Sender address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly return_address: {
                            readonly type: "object";
                            readonly description: "Return address";
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                    readonly maximum: 200;
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 27;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 22;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name\"";
                                    readonly maximum: 50;
                                };
                            };
                        };
                        readonly destination_address: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly line_1: {
                                    readonly type: "string";
                                    readonly description: "First line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly line_2: {
                                    readonly type: "string";
                                    readonly description: "Second line of the street address";
                                    readonly maximum: 35;
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly maximum: 200;
                                    readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                                };
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "City or Suburb";
                                    readonly maximum: 200;
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                                };
                                readonly country_alpha2: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                                readonly company_name: {
                                    readonly type: "string";
                                    readonly description: "The company or organization at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_name: {
                                    readonly type: "string";
                                    readonly description: "The full name of a person at the address";
                                    readonly maximum: 50;
                                };
                                readonly contact_phone: {
                                    readonly type: "string";
                                    readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                                    readonly maximum: 20;
                                };
                                readonly contact_email: {
                                    readonly type: "string";
                                    readonly format: "email";
                                    readonly description: "Email address used to reach the person in `contact_name`";
                                    readonly maximum: 50;
                                };
                                readonly delivery_instructions: {
                                    readonly type: "string";
                                    readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                                    readonly maximum: 200;
                                };
                            };
                        };
                        readonly order_data: {
                            readonly type: "object";
                            readonly description: "Free-form data related to the eCommerce platform";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly platform_name: {
                                    readonly type: "string";
                                    readonly description: "A display-ready sales channel or platform name";
                                    readonly maximum: 200;
                                };
                                readonly platform_order_number: {
                                    readonly type: "string";
                                    readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                    readonly maximum: 200;
                                };
                                readonly order_created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the order was created (e.g. in an online store connected to Easyship)";
                                };
                                readonly order_tag_list: {
                                    readonly type: "array";
                                    readonly description: "Tags that have been assigned to this shipment, either as an order on its e-commerce store or within the Easyship app";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly maxItems: 500;
                                };
                                readonly seller_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the merchant. Will not be shown to the receiver.";
                                };
                                readonly buyer_notes: {
                                    readonly type: "string";
                                    readonly description: "Text added by the buyer during order checkout. Will be displayed on the packing slip.";
                                };
                                readonly buyer_selected_courier_name: {
                                    readonly type: "string";
                                    readonly description: "Courier name for shipping rule condition `match_buyer_selected_courier_name`. If the name matches, actions of this shipping rule would apply to the current shipment.";
                                };
                            };
                        };
                        readonly last_failure_http_response_messages: {
                            readonly type: "array";
                            readonly description: "This attribute stores the HTTP response of the most recent unsuccessful attempt to interact with an external service, such as a failed label creation.";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly code: {
                                        readonly type: "string";
                                    };
                                    readonly content: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Set of key-value pairs that you can attach to a shipment. This can be useful for storing additional information about the object in a structured format";
                            readonly additionalProperties: true;
                        };
                        readonly set_as_residential: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether or not the user believes the receiver address qualifies for a residential surcharge.";
                        };
                        readonly consignee_tax_id: {
                            readonly type: "string";
                            readonly description: "Tax ID for the receiver. Maybe helpful or required for customs clearance, depending on the destination country.";
                        };
                        readonly eei_reference: {
                            readonly type: "string";
                            readonly description: "References data (Electronic Export Information) filed through one of the systems for goods shipped from the U.S.\nto a foreign country. Currently only used for FedEx shipments. The following possibilities may or may not qualify:\n  * An Automated Export System (AES) citation\n  * A Foreign Trade Regulations (FTR) exemption number\n  * An International Traffic in Arms Reduction (ITAR) exemption code\n  * A US Department of Commerce export license number";
                        };
                        readonly regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Seller's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly eori: {
                                    readonly type: "string";
                                    readonly description: "Economic Operators Registration and Identification (EORI) number.";
                                };
                                readonly ioss: {
                                    readonly type: "string";
                                    readonly description: "Import One Stop Shop (IOSS) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                            };
                        };
                        readonly buyer_regulatory_identifiers: {
                            readonly type: "object";
                            readonly description: "Buyer's identifiers for various tax, import and export regulations.";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly ein: {
                                    readonly type: "string";
                                    readonly description: "Employer Identification Number (EIN) number.";
                                };
                                readonly vat_number: {
                                    readonly type: "string";
                                    readonly description: "Value-Added Tax (VAT) number.";
                                };
                                readonly ssn: {
                                    readonly type: "string";
                                    readonly description: "Social Security Number (SSN) number.";
                                };
                            };
                        };
                        readonly return: {
                            readonly type: "boolean";
                            readonly description: "Whether the shipment is a return shipment or not";
                        };
                        readonly incoterms: {
                            readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                            readonly type: "string";
                            readonly enum: readonly ["DDU", "DDP", any];
                            readonly default: "DDU";
                        };
                        readonly insurance: {
                            readonly type: "object";
                            readonly description: "Insurance";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly is_insured: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if premium insurance has been purchased for this shipment (either by the merchant or buyer).\nBasic, courier-supplied coverage is not applicable.";
                                    readonly default: false;
                                };
                                readonly insured_amount: {
                                    readonly type: "number";
                                    readonly description: "Amount to insure with Easyship's insurance provider. If not specified, we'll use the sum of customs values and shipping cost.";
                                };
                                readonly insured_currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                    readonly examples: readonly ["USD"];
                                };
                            };
                        };
                        readonly parcels: {
                            readonly type: "array";
                            readonly description: "Parcels";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "ID of the parcel";
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "Total weight of the shipment, including the box weight. If you provide the total weight of the shipment, then the weight for items can be optional.";
                                    };
                                    readonly box: {
                                        readonly type: "object";
                                        readonly description: "User-defined details of a box used for shipments";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "ID";
                                            };
                                            readonly courier: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly umbrella_name: {
                                                        readonly type: "string";
                                                        readonly description: "Human-readable name for the courier company that offers this service, when applicable.";
                                                    };
                                                    readonly country_alpha2: {
                                                        readonly type: "string";
                                                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                                    };
                                                };
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name";
                                            };
                                            readonly slug: {
                                                readonly type: "string";
                                                readonly description: "Slug";
                                            };
                                            readonly outer_dimensions: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly description: "A measure of the space taken by the box itself, in cm.";
                                                readonly properties: {
                                                    readonly length: {
                                                        readonly type: "number";
                                                    };
                                                    readonly width: {
                                                        readonly type: "number";
                                                    };
                                                    readonly height: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly weight: {
                                                readonly type: "number";
                                                readonly description: "The weight of the box's packaging materials (excluding items inside), in kg.";
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly description: "Box type.";
                                            };
                                        };
                                    };
                                    readonly items: {
                                        readonly type: "array";
                                        readonly description: "Array of all shipment items";
                                        readonly minItems: 1;
                                        readonly maxItems: 200;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "A line item in a shipment manifest; may be multiple physical objects.";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "ID of the item";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "Description of the item";
                                                    readonly maximum: 200;
                                                };
                                                readonly category: {
                                                    readonly type: "string";
                                                    readonly description: "Item Category slug. Use the Item Categories API to retrieve a list of available item categories or use HS Code field.";
                                                    readonly maximum: 200;
                                                };
                                                readonly sku: {
                                                    readonly type: "string";
                                                    readonly description: "Item Stock Keeping Unit (SKU) as listed in your store.";
                                                    readonly maximum: 100;
                                                };
                                                readonly hs_code: {
                                                    readonly type: "string";
                                                    readonly description: "HS Code of the item";
                                                };
                                                readonly origin_country_alpha2: {
                                                    readonly type: "string";
                                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW", any];
                                                };
                                                readonly contains_battery_pi966: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI966 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_battery_pi967: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains a PI967 battery (applicable when HS code is used).";
                                                };
                                                readonly contains_liquids: {
                                                    readonly type: "boolean";
                                                    readonly description: "Whether the item contains liquids (applicable when HS code is used).";
                                                };
                                                readonly quantity: {
                                                    readonly type: "integer";
                                                    readonly description: "Item quantity";
                                                    readonly default: 1;
                                                };
                                                readonly dimensions: {
                                                    readonly type: "object";
                                                    readonly description: "Dimensions of the item";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly length: {
                                                            readonly type: "number";
                                                            readonly description: "Item length; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly width: {
                                                            readonly type: "number";
                                                            readonly description: "Item width; Optional if the Box dimensions are provided.";
                                                        };
                                                        readonly height: {
                                                            readonly type: "number";
                                                            readonly description: "Item height; Optional if the Box dimensions are provided.";
                                                        };
                                                    };
                                                };
                                                readonly actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "Item actual weight in `kg`, must be greater than 0; Optional if `total_actual_weight` is provided.";
                                                };
                                                readonly origin_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly origin_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Customs value of the item";
                                                };
                                                readonly declared_currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                                readonly declared_customs_value: {
                                                    readonly type: "number";
                                                    readonly description: "Item customs value, must be greater than 0 unless category is `documents`. Please note that this value refers to the unit rather than the total.";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly total_customs_value: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly description: "Sum of the value assigned to all shipment line items";
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "Sum of the specified weights of all *parcels* in the shipment (`parcel.actual_weight`), as measured on a scale in units specified by `company.weight_unit`.";
                        };
                        readonly shipment_state: {
                            readonly type: "string";
                            readonly description: "The state of the shipment record within the Easyship system\n\n`created` `draft` `calculating` `cancelling` `cancelled` `discarded` `deleted`";
                            readonly default: "created";
                            readonly enum: readonly ["created", "draft", "calculating", "cancelling", "cancelled", "discarded", "deleted"];
                        };
                        readonly pickup_state: {
                            readonly type: "string";
                            readonly default: "not_requested";
                            readonly description: "The state of the hand-over from shipper to courier. `pending_handover` applies only to eFulfillment companies.";
                        };
                        readonly delivery_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the hand-over from courier to receiver.\n\n`not_created` `pending` `info_received` `in_transit_to_customer` `out_for_delivery` `delivered` `failed_attempt` `exception` `expired` `lost_by_courier` `returned_to_shipper`";
                            readonly enum: readonly ["not_created", "pending", "info_received", "in_transit_to_customer", "out_for_delivery", "delivered", "failed_attempt", "exception", "expired", "lost_by_courier", "returned_to_shipper"];
                        };
                        readonly label_state: {
                            readonly type: "string";
                            readonly default: "not_created";
                            readonly description: "The state of the label(s) meant to be printed and attached to this shipment's parcels\n\n`not_created` `pending` `generating` `generated` `printed` `failed` `technical_failed` `reported` `voided` `void_failed`";
                            readonly enum: readonly ["not_created", "pending", "generating", "generated", "printed", "failed", "technical_failed", "reported", "voided", "void_failed"];
                        };
                        readonly warehouse_state: {
                            readonly type: "string";
                            readonly default: "none";
                            readonly description: "The state of the fulfillment process within the warehouse\n\n`none` `pending` `created` `failed` `packed` `cancelled` `cancelled_no_stock` `backorder_no_stock` `shipped` `returned` `awaiting_dispatch`";
                            readonly enum: readonly ["none", "pending", "created", "failed", "packed", "cancelled", "cancelled_no_stock", "backorder_no_stock", "shipped", "returned", "awaiting_dispatch"];
                        };
                        readonly warehouse_code: {
                            readonly type: "string";
                            readonly description: "Warehouse code (warehouse/eFulfilment only)";
                        };
                        readonly original_easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly trackings: {
                            readonly type: "array";
                            readonly description: "Sources of tracking data for this shipment";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "A source of tracking data for the shipment's journey";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Reference provided by the courier for this leg";
                                    };
                                    readonly local_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Local tracking number provided by DHL eCommerce";
                                    };
                                    readonly alternate_tracking_number: {
                                        readonly type: "string";
                                        readonly description: "Alternate tracking number provided by DHL eCommerce";
                                    };
                                    readonly leg_number: {
                                        readonly type: "integer";
                                        readonly minimum: 1;
                                        readonly description: "Sequential index of the different portions of the shipment's journey. If a shipment is passed to a new courier, it begins a new leg.";
                                    };
                                    readonly handler: {
                                        readonly type: "string";
                                        readonly description: "The service that is handling the tracking process";
                                    };
                                    readonly tracking_state: {
                                        readonly type: "string";
                                        readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                                        readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                    };
                                };
                            };
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly description: "Tracking page URL";
                        };
                        readonly shipping_documents: {
                            readonly type: "array";
                            readonly description: "Shipping documents";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category: {
                                        readonly type: "string";
                                        readonly description: "Document category";
                                    };
                                    readonly required: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the document is required";
                                    };
                                    readonly format: {
                                        readonly type: "string";
                                        readonly description: "Document format";
                                    };
                                    readonly page_size: {
                                        readonly type: "string";
                                        readonly description: "Page size";
                                    };
                                    readonly base64_encoded_strings: {
                                        readonly type: "array";
                                        readonly description: "Base64 encoded strings";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "byte";
                                        };
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "URL of the document";
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly description: "Indicates that Easyship's [Rates at Checkout feature](https://www.easyship.com/rates-at-checkout) was active\nduring order checkout on the e-commerce store and that the buyer selected this courier service for this shipment";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly courier_id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The courier ID that the current courier service is associated with";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service.";
                                };
                                readonly easyship_courier_service: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                };
                            };
                        };
                        readonly rates: {
                            readonly type: "array";
                            readonly description: "Array of available courier services for this shipment, along with the rates charged. Courier services are excluded if the shipment's contents or destination do not meet each service's eligibility requirements.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Result of a quote request, including shipping & tax costs for a specific courier service.";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly courier_service: {
                                        readonly type: "object";
                                        readonly description: "Courier Service for Rate";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "unique identifier for a courier service";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier service used in this rate.";
                                            };
                                            readonly courier_id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "The courier ID that the current courier service is associated with";
                                            };
                                            readonly umbrella_name: {
                                                readonly type: "string";
                                                readonly description: "Human-readable name for the courier company that offers this service.";
                                            };
                                            readonly logo: {
                                                readonly type: "string";
                                                readonly description: "Logo of the courier. Deprecated in favor of `courier_logo_url`.";
                                                readonly deprecated: true;
                                            };
                                            readonly easyship_courier_service: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the Courier Service belongs to Easyship or not.";
                                            };
                                        };
                                    };
                                    readonly min_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The fastest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly max_delivery_time: {
                                        readonly type: "integer";
                                        readonly description: "The slowest estimate of delivery time for this courier service, in days.";
                                    };
                                    readonly value_for_money_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options. 1 indicates the best value for money.";
                                    };
                                    readonly delivery_time_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in minimum delivery time estimate; 1 indicates the fastest option.";
                                    };
                                    readonly cost_rank: {
                                        readonly type: "number";
                                        readonly description: "Where this courier service ranks among the other offered options, in total price; 1 indicates the best value for money.";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                    readonly shipment_charge: {
                                        readonly type: "number";
                                        readonly description: "Base cost of the courier service";
                                    };
                                    readonly fuel_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when fuel costs are high";
                                    };
                                    readonly remote_area_surcharge: {
                                        readonly type: "number";
                                        readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                    };
                                    readonly remote_area_surcharges: {
                                        readonly description: "Origin and destination remote area surcharges";
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly origin: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Pickup Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                            readonly destination: {
                                                readonly type: "object";
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["Delivery Area Surcharge"];
                                                    };
                                                    readonly base: {
                                                        readonly type: "number";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly other_surcharges: {
                                        readonly type: "object";
                                        readonly description: "Other surcharges";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly total_fee: {
                                                readonly type: "number";
                                                readonly description: "Sum of the surcharge fees, in the currency specified for the shipment";
                                            };
                                            readonly details: {
                                                readonly type: "array";
                                                readonly description: "An array of individual surcharges being applied";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: false;
                                                    readonly properties: {
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Surcharge name, in English, to be displayed to user";
                                                            readonly examples: readonly ["Peak Surcharge"];
                                                        };
                                                        readonly fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment";
                                                        };
                                                        readonly origin_fee: {
                                                            readonly type: "number";
                                                            readonly description: "Surcharge fee in the currency of the shipment's origin country";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly oversized_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                    };
                                    readonly additional_services_surcharge: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                    };
                                    readonly residential_full_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly residential_discounted_fee: {
                                        readonly type: "number";
                                        readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                    };
                                    readonly shipment_charge_total: {
                                        readonly type: "number";
                                        readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                    };
                                    readonly warehouse_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                    };
                                    readonly insurance_fee: {
                                        readonly type: "number";
                                        readonly description: "The cost of the insurance policy purchased for this shipment";
                                    };
                                    readonly sales_tax: {
                                        readonly type: "number";
                                        readonly description: "National government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly provincial_sales_tax: {
                                        readonly type: "number";
                                        readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                    };
                                    readonly ddp_handling_fee: {
                                        readonly type: "number";
                                        readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_charge: {
                                        readonly type: "number";
                                        readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_tax_non_chargeable: {
                                        readonly type: "number";
                                        readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly import_duty_charge: {
                                        readonly type: "number";
                                        readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly total_charge: {
                                        readonly type: "number";
                                        readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                    };
                                    readonly is_above_threshold: {
                                        readonly type: "boolean";
                                        readonly description: "True if the purchase price exceeds the threshold set by the import country for customs charges. If `false`, `import_tax_charge`, `import_duty_charge`, `estimated_import_tax`, and `estimated_import_duty` should be zero.";
                                    };
                                    readonly incoterms: {
                                        readonly description: "Terms of Sale\n\n`DDU` `DDP`";
                                        readonly type: "string";
                                        readonly enum: readonly ["DDU", "DDP", any];
                                        readonly default: "DDU";
                                    };
                                    readonly estimated_import_tax: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly estimated_import_duty: {
                                        readonly type: "number";
                                        readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                    };
                                    readonly minimum_pickup_fee: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                    };
                                    readonly available_handover_options: {
                                        readonly type: "array";
                                        readonly description: "A list of one or more of `dropoff`, `free_pickup`, and `paid_pickup`";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly tracking_rating: {
                                        readonly type: "number";
                                        readonly description: "A characterization of the level of detail provided by the courier's tracking data.\n  * -1 - No tracking number\n  * 0 - Infrequent tracking events\n  * 1 - Infrequent tracking events\n  * 2 - Tracking main milestones with delivery confirmation\n  * 3 - Tracking all steps of transit with delivery confirmation\n";
                                        readonly minimum: -1;
                                        readonly maximum: 3;
                                    };
                                    readonly easyship_rating: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 5;
                                        readonly description: "Average of customer ratings of this courier service; provided by Easyship users and their buyers.";
                                    };
                                    readonly courier_remarks: {
                                        readonly type: "string";
                                        readonly description: "Additional details relevant to choosing the appropriate courier service";
                                    };
                                    readonly payment_recipient: {
                                        readonly type: "string";
                                        readonly description: "Who collects payment for this shipment (and when)\n\n`Easyship` `EasyshipPayOnScan` `Courier`";
                                        readonly enum: readonly ["Easyship", "EasyshipPayOnScan", "Courier"];
                                    };
                                    readonly discount: {
                                        readonly type: "object";
                                        readonly description: "A discount applied to the rate. Amount and percentage should not both be defined at the same time";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly amount: {
                                                readonly type: "number";
                                                readonly description: "A fixed amount to discount from the price";
                                            };
                                            readonly origin_amount: {
                                                readonly type: "number";
                                                readonly description: "Discount origin amount";
                                            };
                                        };
                                    };
                                    readonly rates_in_origin_currency: {
                                        readonly type: "object";
                                        readonly description: "Rates in origin currency";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                readonly examples: readonly ["USD"];
                                            };
                                            readonly shipment_charge: {
                                                readonly type: "number";
                                                readonly description: "Base cost of the courier service";
                                            };
                                            readonly fuel_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when fuel costs are high";
                                            };
                                            readonly remote_area_surcharge: {
                                                readonly type: "number";
                                                readonly description: "Sum of the origin and destination base fees listed in `remote_area_surcharges`";
                                            };
                                            readonly additional_services_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when additional services are added (e.g. delivery confirmation)";
                                            };
                                            readonly oversized_surcharge: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when parcels exceed a specified threshold size or weight";
                                            };
                                            readonly shipment_charge_total: {
                                                readonly type: "number";
                                                readonly description: "Subtotal of `shipment_charge`, `fuel_surcharge`, `residential_*_fee`, `remote_area_surcharge`, `additional_services_surcharge`, & `oversized_surcharge`";
                                            };
                                            readonly warehouse_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the fulfillment service for managing warehouse operations";
                                            };
                                            readonly insurance_fee: {
                                                readonly type: "number";
                                                readonly description: "The cost of the insurance policy purchased for this shipment";
                                            };
                                            readonly ddp_handling_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when they pay import taxes and duties on the sender's behalf. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_charge: {
                                                readonly type: "number";
                                                readonly description: "Import tax charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_tax_non_chargeable: {
                                                readonly type: "number";
                                                readonly description: "Import tax non-chargeable. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly import_duty_charge: {
                                                readonly type: "number";
                                                readonly description: "Import duty charge. Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly residential_discounted_fee: {
                                                readonly type: "number";
                                                readonly description: "A discounted fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly residential_full_fee: {
                                                readonly type: "number";
                                                readonly description: "A fee added by the courier when the receiver is at a residential address";
                                            };
                                            readonly total_charge: {
                                                readonly type: "number";
                                                readonly description: "The sum of shipping_charge and all applicable fees for this shipment";
                                            };
                                            readonly estimated_import_tax: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import taxes that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly estimated_import_duty: {
                                                readonly type: "number";
                                                readonly description: "An estimate of import duty that will be charged to the buyer when the shipment clears customs (only applicable for DDU incoterms). Null is returned when there is an insufficient subscription tier for feature taxes and duties.";
                                            };
                                            readonly sales_tax: {
                                                readonly type: "number";
                                                readonly description: "National government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly provincial_sales_tax: {
                                                readonly type: "number";
                                                readonly description: "State, province, or local government taxes, calculated as a portion of the purchase price";
                                            };
                                            readonly minimum_pickup_fee: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly description: "The minimum fee applied for `paid_pickup` options, for this courier service";
                                            };
                                        };
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                        readonly description: "Details that the user should know when preparing to hand over the shipment to the courier (e.g. pick-up or drop-off)";
                                    };
                                    readonly full_description: {
                                        readonly type: "string";
                                        readonly description: "Full description";
                                    };
                                };
                            };
                        };
                        readonly shipping_settings: {
                            readonly type: "object";
                            readonly description: "Shipping settings";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly b13a_filing: {
                                    readonly type: "object";
                                    readonly description: "B13A filing (currently available only for FedEx)";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly option: {
                                            readonly type: "string";
                                            readonly enum: readonly ["not_required", "fedex_to_stamp", "filed_electronically", "manually_attached", "summary_reporting"];
                                            readonly description: "`not_required` `fedex_to_stamp` `filed_electronically` `manually_attached` `summary_reporting`";
                                        };
                                        readonly option_export_compliance_statement: {
                                            readonly type: "string";
                                            readonly description: "Export compliance statement";
                                        };
                                        readonly permit_number: {
                                            readonly type: "string";
                                            readonly description: "Permit number";
                                        };
                                    };
                                };
                                readonly label_customization_fields: {
                                    readonly anyOf: readonly [{
                                        readonly description: "Label customization fields for the shipment. This is only applicable for specific couriers. For detailed explanation, please refer to [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["value"];
                                            readonly properties: {
                                                readonly code: {
                                                    readonly description: "Courier accepted code, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "string";
                                                    readonly description: "Content to display on the label, see [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                                readonly convert_to_barcode: {
                                                    readonly description: "Identifying for converting value to barcode, specific application logic applies. See [Label Customization Messages](https://developers.easyship.com/page/label-customization-messages).";
                                                };
                                            };
                                        };
                                    }, {
                                        readonly type: "array";
                                        readonly minItems: 0;
                                        readonly items: {};
                                    }];
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unavailable_couriers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "unique identifier for a courier service";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Unavailable courier name";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly description: "Unavailable reason";
                                    };
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleActionCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Never add specific courier services";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["add_never_courier_service"];
                    readonly examples: readonly ["add_preferred_courier_service"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["never_courier_service_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly never_courier_service_ids: {
                            readonly type: "array";
                            readonly description: "List of courier service IDs based on Courier Service API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Use preferred courier services";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["add_preferred_courier_service"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["preferred_courier_service_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly preferred_courier_service_ids: {
                            readonly type: "array";
                            readonly description: "List of courier service IDs based on Courier Service API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Taxes & duties";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_incoterms"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["incoterms"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly incoterms: {
                            readonly type: "string";
                            readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n";
                            readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_sort_by"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["sort_by"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly sort_by: {
                            readonly type: "string";
                            readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n";
                            readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Force applying insurance";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_insurance"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["insured"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly insured: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_tracking_rating"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["force_tracking_rating"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly force_tracking_rating: {
                            readonly type: "array";
                            readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "integer";
                                readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n";
                                readonly enum: readonly [0, 1, 2, 3];
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Use package";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_package"];
                };
                readonly options: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["force_box_id"];
                        readonly properties: {
                            readonly force_box_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Box ID based on Box API. Box type is 'box'.";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["force_flat_rate_box_id"];
                        readonly properties: {
                            readonly force_flat_rate_box_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                            };
                        };
                    }];
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Exclude specified boxes";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["reject_packages"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["never_package_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly never_package_ids: {
                            readonly type: "array";
                            readonly description: "Box IDs based on Box API.";
                            readonly minItems: 1;
                            readonly items: {
                                readonly format: "uuid";
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Declare destination address as residential.";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_residential_surcharge"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["set_as_residential"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly set_as_residential: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Ship From";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_ship_from"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["origin_address_id"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly origin_address_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Address ID based on Address API.";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Return labels for domestic shipments";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_automated_return_requested"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["force_automated_return_requested"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly force_automated_return_requested: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Restrict courier services based on delivery time";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["add_forced_delivery_time"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "value"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)";
                            readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                        };
                        readonly value: {
                            readonly type: "integer";
                            readonly description: "How many days";
                        };
                    };
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourierCreate";
                readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourierCreate";
                readonly force_incoterms: "#/components/schemas/ActionForceIncotermsCreate";
                readonly force_sort_by: "#/components/schemas/ActionForceSortByCreate";
                readonly force_insurance: "#/components/schemas/ActionForceInsuranceCreate";
                readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRatingCreate";
                readonly force_package: "#/components/schemas/ActionForcePackageCreate";
                readonly reject_packages: "#/components/schemas/ActionRejectPackagesCreate";
                readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurchargeCreate";
                readonly force_ship_from: "#/components/schemas/ActionForceShipFromCreate";
                readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequestedCreate";
                readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTimeCreate";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Shipping Rule Action detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly action: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Never add specific courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_never_courier_service"];
                                readonly description: "`add_never_courier_service`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use preferred courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_preferred_courier_service"];
                                readonly description: "`add_preferred_courier_service`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["preferred_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly preferred_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Taxes & duties";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_incoterms"];
                                readonly description: "`force_incoterms`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["incoterms"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly incoterms: {
                                        readonly type: "string";
                                        readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                        readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_sort_by"];
                                readonly description: "`force_sort_by`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["sort_by"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly sort_by: {
                                        readonly type: "string";
                                        readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                        readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Force applying insurance";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_insurance"];
                                readonly description: "`force_insurance`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["insured"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly insured: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_tracking_rating"];
                                readonly description: "`force_tracking_rating`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_tracking_rating"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_tracking_rating: {
                                        readonly type: "array";
                                        readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                            readonly enum: readonly [0, 1, 2, 3];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "string";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use package";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_package"];
                                readonly description: "`force_package`";
                            };
                            readonly options: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["force_box_id"];
                                    readonly properties: {
                                        readonly force_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'box'.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["force_flat_rate_box_id"];
                                    readonly properties: {
                                        readonly force_flat_rate_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                        };
                                    };
                                }];
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Exclude specified boxes";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["reject_packages"];
                                readonly description: "`reject_packages`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_package_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_package_ids: {
                                        readonly type: "array";
                                        readonly description: "Box IDs based on Box API.";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly format: "uuid";
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Declare destination address as residential.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_residential_surcharge"];
                                readonly description: "`force_residential_surcharge`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["set_as_residential"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly set_as_residential: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Ship From";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_ship_from"];
                                readonly description: "`force_ship_from`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["origin_address_id"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly origin_address_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Address ID based on Address API.";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Return labels for domestic shipments";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_automated_return_requested"];
                                readonly description: "`force_automated_return_requested`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_automated_return_requested"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_automated_return_requested: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Restrict courier services based on delivery time";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_forced_delivery_time"];
                                readonly description: "`add_forced_delivery_time`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                        readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                    };
                                    readonly value: {
                                        readonly type: "integer";
                                        readonly description: "How many days";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                            readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                            readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                            readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                            readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                            readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                            readonly force_package: "#/components/schemas/ActionForcePackage";
                            readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                            readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                            readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                            readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                            readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleActionDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
                readonly action_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Action ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id", "action_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleActionIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of shipping rule actions";
            readonly additionalProperties: false;
            readonly properties: {
                readonly actions: {
                    readonly type: "array";
                    readonly items: {
                        readonly oneOf: readonly [{
                            readonly type: "object";
                            readonly description: "Never add specific courier services";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["add_never_courier_service"];
                                    readonly description: "`add_never_courier_service`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["never_courier_service_ids"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly never_courier_service_ids: {
                                            readonly type: "array";
                                            readonly description: "List of courier service IDs based on Courier Service API";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Use preferred courier services";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["add_preferred_courier_service"];
                                    readonly description: "`add_preferred_courier_service`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["preferred_courier_service_ids"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly preferred_courier_service_ids: {
                                            readonly type: "array";
                                            readonly description: "List of courier service IDs based on Courier Service API";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Taxes & duties";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_incoterms"];
                                    readonly description: "`force_incoterms`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["incoterms"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly incoterms: {
                                            readonly type: "string";
                                            readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                            readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_sort_by"];
                                    readonly description: "`force_sort_by`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["sort_by"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly sort_by: {
                                            readonly type: "string";
                                            readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                            readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Force applying insurance";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_insurance"];
                                    readonly description: "`force_insurance`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["insured"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly insured: {
                                            readonly type: "boolean";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_tracking_rating"];
                                    readonly description: "`force_tracking_rating`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["force_tracking_rating"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly force_tracking_rating: {
                                            readonly type: "array";
                                            readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "integer";
                                                readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                                readonly enum: readonly [0, 1, 2, 3];
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "string";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Use package";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_package"];
                                    readonly description: "`force_package`";
                                };
                                readonly options: {
                                    readonly oneOf: readonly [{
                                        readonly type: "object";
                                        readonly required: readonly ["force_box_id"];
                                        readonly properties: {
                                            readonly force_box_id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Box ID based on Box API. Box type is 'box'.";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly required: readonly ["force_flat_rate_box_id"];
                                        readonly properties: {
                                            readonly force_flat_rate_box_id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                            };
                                        };
                                    }];
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Exclude specified boxes";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["reject_packages"];
                                    readonly description: "`reject_packages`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["never_package_ids"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly never_package_ids: {
                                            readonly type: "array";
                                            readonly description: "Box IDs based on Box API.";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly format: "uuid";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Declare destination address as residential.";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_residential_surcharge"];
                                    readonly description: "`force_residential_surcharge`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["set_as_residential"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly set_as_residential: {
                                            readonly type: "boolean";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Ship From";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_ship_from"];
                                    readonly description: "`force_ship_from`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["origin_address_id"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly origin_address_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Address ID based on Address API.";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Return labels for domestic shipments";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["force_automated_return_requested"];
                                    readonly description: "`force_automated_return_requested`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["force_automated_return_requested"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly force_automated_return_requested: {
                                            readonly type: "boolean";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Restrict courier services based on delivery time";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["add_forced_delivery_time"];
                                    readonly description: "`add_forced_delivery_time`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["operator", "value"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly operator: {
                                            readonly type: "string";
                                            readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                            readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                        };
                                        readonly value: {
                                            readonly type: "integer";
                                            readonly description: "How many days";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }];
                        readonly discriminator: {
                            readonly propertyName: "type";
                            readonly mapping: {
                                readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                                readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                                readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                                readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                                readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                                readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                                readonly force_package: "#/components/schemas/ActionForcePackage";
                                readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                                readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                                readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                                readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                                readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleActionUpdate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Never add specific courier services";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["add_never_courier_service"];
                    readonly examples: readonly ["force_insurance"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["never_courier_service_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly never_courier_service_ids: {
                            readonly type: "array";
                            readonly description: "List of courier service IDs based on Courier Service API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Use preferred courier services";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["add_preferred_courier_service"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["preferred_courier_service_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly preferred_courier_service_ids: {
                            readonly type: "array";
                            readonly description: "List of courier service IDs based on Courier Service API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Taxes & duties";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_incoterms"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["incoterms"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly incoterms: {
                            readonly type: "string";
                            readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n";
                            readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_sort_by"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["sort_by"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly sort_by: {
                            readonly type: "string";
                            readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n";
                            readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Force applying insurance";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_insurance"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["insured"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly insured: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_tracking_rating"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["force_tracking_rating"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly force_tracking_rating: {
                            readonly type: "array";
                            readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "integer";
                                readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n";
                                readonly enum: readonly [0, 1, 2, 3];
                            };
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "string";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Use package";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_package"];
                };
                readonly options: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["force_box_id"];
                        readonly properties: {
                            readonly force_box_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Box ID based on Box API. Box type is 'box'.";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["force_flat_rate_box_id"];
                        readonly properties: {
                            readonly force_flat_rate_box_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                            };
                        };
                    }];
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Exclude specified boxes";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["reject_packages"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["never_package_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly never_package_ids: {
                            readonly type: "array";
                            readonly description: "Box IDs based on Box API.";
                            readonly minItems: 1;
                            readonly items: {
                                readonly format: "uuid";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Declare destination address as residential.";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_residential_surcharge"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["set_as_residential"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly set_as_residential: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Ship From";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_ship_from"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["origin_address_id"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly origin_address_id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Address ID based on Address API.";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Return labels for domestic shipments";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["force_automated_return_requested"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["force_automated_return_requested"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly force_automated_return_requested: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Restrict courier services based on delivery time";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["add_forced_delivery_time"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "value"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)";
                            readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                        };
                        readonly value: {
                            readonly type: "integer";
                            readonly description: "How many days";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                readonly force_package: "#/components/schemas/ActionForcePackage";
                readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
                readonly action_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Action ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id", "action_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Shipping Rule Action detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly action: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Never add specific courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_never_courier_service"];
                                readonly description: "`add_never_courier_service`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use preferred courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_preferred_courier_service"];
                                readonly description: "`add_preferred_courier_service`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["preferred_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly preferred_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Taxes & duties";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_incoterms"];
                                readonly description: "`force_incoterms`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["incoterms"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly incoterms: {
                                        readonly type: "string";
                                        readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                        readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_sort_by"];
                                readonly description: "`force_sort_by`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["sort_by"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly sort_by: {
                                        readonly type: "string";
                                        readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                        readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Force applying insurance";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_insurance"];
                                readonly description: "`force_insurance`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["insured"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly insured: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_tracking_rating"];
                                readonly description: "`force_tracking_rating`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_tracking_rating"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_tracking_rating: {
                                        readonly type: "array";
                                        readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                            readonly enum: readonly [0, 1, 2, 3];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "string";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use package";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_package"];
                                readonly description: "`force_package`";
                            };
                            readonly options: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["force_box_id"];
                                    readonly properties: {
                                        readonly force_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'box'.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["force_flat_rate_box_id"];
                                    readonly properties: {
                                        readonly force_flat_rate_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                        };
                                    };
                                }];
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Exclude specified boxes";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["reject_packages"];
                                readonly description: "`reject_packages`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_package_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_package_ids: {
                                        readonly type: "array";
                                        readonly description: "Box IDs based on Box API.";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly format: "uuid";
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Declare destination address as residential.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_residential_surcharge"];
                                readonly description: "`force_residential_surcharge`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["set_as_residential"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly set_as_residential: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Ship From";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_ship_from"];
                                readonly description: "`force_ship_from`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["origin_address_id"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly origin_address_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Address ID based on Address API.";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Return labels for domestic shipments";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_automated_return_requested"];
                                readonly description: "`force_automated_return_requested`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_automated_return_requested"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_automated_return_requested: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Restrict courier services based on delivery time";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_forced_delivery_time"];
                                readonly description: "`add_forced_delivery_time`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                        readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                    };
                                    readonly value: {
                                        readonly type: "integer";
                                        readonly description: "How many days";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                            readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                            readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                            readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                            readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                            readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                            readonly force_package: "#/components/schemas/ActionForcePackage";
                            readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                            readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                            readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                            readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                            readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleActivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Shipping Rule detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipping_rule: {
                    readonly type: "object";
                    readonly description: "Shipping Rules";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Shipping Rule name";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Shipping Rule description";
                        };
                        readonly priority: {
                            readonly type: "integer";
                            readonly description: "The smaller value represent the higher priority. High priority shipping rule would be execute first.";
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Turn on or turn off this shipping rule";
                        };
                        readonly accessible: {
                            readonly type: "boolean";
                            readonly description: "Based on current subscription plan. Return false if current subscription do not own shipping rule features.";
                        };
                        readonly checkout_restrictive: {
                            readonly type: "boolean";
                        };
                        readonly conditions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly match_country: "#/components/schemas/ConditionMatchCountry";
                                        readonly match_all: "#/components/schemas/ConditionMatchAll";
                                        readonly match_category: "#/components/schemas/ConditionMatchCategory";
                                        readonly match_state: "#/components/schemas/ConditionMatchState";
                                        readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                                        readonly match_sku: "#/components/schemas/ConditionMatchSku";
                                        readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                                        readonly match_store: "#/components/schemas/ConditionMatchStore";
                                        readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                                        readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                                        readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                                        readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                                        readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                                    };
                                };
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination country of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_country"];
                                            readonly description: "`match_country`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["country_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly country_ids: {
                                                    readonly type: "array";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                                        readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches all orders";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_all"];
                                            readonly description: "`match_all`";
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches orders containing specific categories";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_category"];
                                            readonly description: "`match_category`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["category_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly category_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of category IDs based on Category API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination state of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_state"];
                                            readonly description: "`match_state`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["states"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly states: {
                                                    readonly type: "array";
                                                    readonly description: "List of country ID + state abbr based on State API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["39-AB"];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination zipcode of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_zipcode"];
                                            readonly description: "`match_zipcode`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "zipcodes"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                                    readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                                };
                                                readonly zipcodes: {
                                                    readonly type: "array";
                                                    readonly description: "List of zipcodes";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches items SKU";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_sku"];
                                            readonly description: "`match_sku`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_sku"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly shipment_items_sku: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches platform";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_platform_name"];
                                            readonly description: "`match_platform_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["platform_names"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly platform_names: {
                                                    readonly type: "array";
                                                    readonly description: "List of platform name base on Shipping Rule Platform API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches store";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_store"];
                                            readonly description: "`match_store`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["store_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly store_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of store IDs base on Store API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_buyer_selected_courier_name"];
                                            readonly description: "`match_buyer_selected_courier_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly buyer_selected_courier_name: {
                                                    readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order items count";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_items_count"];
                                            readonly description: "`match_items_count`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_count"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly shipment_items_count: {
                                                    readonly type: "integer";
                                                    readonly description: "Items count";
                                                    readonly minimum: 0;
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order's selling price";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_selling_price"];
                                            readonly description: "`match_selling_price`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value", "currency"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly value: {
                                                    readonly type: "number";
                                                    readonly description: "Selling price";
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order weight";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_weight"];
                                            readonly description: "`match_weight`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "total_actual_weight"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly total_actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "LB or KG based on country setting.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order tags";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["include_order_tag_name"];
                                            readonly description: "`include_order_tag_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["order_tag_list"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly order_tag_list: {
                                                    readonly type: "array";
                                                    readonly description: "Tag names based on Tag API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                            };
                        };
                        readonly actions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Never add specific courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_never_courier_service"];
                                            readonly description: "`add_never_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use preferred courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_preferred_courier_service"];
                                            readonly description: "`add_preferred_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["preferred_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly preferred_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Taxes & duties";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_incoterms"];
                                            readonly description: "`force_incoterms`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["incoterms"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly incoterms: {
                                                    readonly type: "string";
                                                    readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                                    readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_sort_by"];
                                            readonly description: "`force_sort_by`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["sort_by"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly sort_by: {
                                                    readonly type: "string";
                                                    readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                                    readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Force applying insurance";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_insurance"];
                                            readonly description: "`force_insurance`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["insured"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly insured: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_tracking_rating"];
                                            readonly description: "`force_tracking_rating`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_tracking_rating"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_tracking_rating: {
                                                    readonly type: "array";
                                                    readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                                        readonly enum: readonly [0, 1, 2, 3];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use package";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_package"];
                                            readonly description: "`force_package`";
                                        };
                                        readonly options: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["force_box_id"];
                                                readonly properties: {
                                                    readonly force_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'box'.";
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["force_flat_rate_box_id"];
                                                readonly properties: {
                                                    readonly force_flat_rate_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Exclude specified boxes";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["reject_packages"];
                                            readonly description: "`reject_packages`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_package_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_package_ids: {
                                                    readonly type: "array";
                                                    readonly description: "Box IDs based on Box API.";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly format: "uuid";
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Declare destination address as residential.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_residential_surcharge"];
                                            readonly description: "`force_residential_surcharge`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["set_as_residential"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly set_as_residential: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Ship From";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_ship_from"];
                                            readonly description: "`force_ship_from`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["origin_address_id"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly origin_address_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "Address ID based on Address API.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Return labels for domestic shipments";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_automated_return_requested"];
                                            readonly description: "`force_automated_return_requested`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_automated_return_requested"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_automated_return_requested: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Restrict courier services based on delivery time";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_forced_delivery_time"];
                                            readonly description: "`add_forced_delivery_time`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                                    readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly description: "How many days";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                                        readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                                        readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                                        readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                                        readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                                        readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                                        readonly force_package: "#/components/schemas/ActionForcePackage";
                                        readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                                        readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                                        readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                                        readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                                        readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                                    };
                                };
                            };
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleConditionCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Condition that matches the destination country of the orders";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_country"];
                    readonly examples: readonly ["match_store"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["country_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly country_ids: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "integer";
                                readonly description: "Country ID based on Countries API";
                                readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches all orders";
            readonly required: readonly ["type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_all"];
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches orders containing specific categories";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_category"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["category_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly category_ids: {
                            readonly type: "array";
                            readonly description: "List of category IDs based on Category API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches the destination state of the orders";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_state"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["states"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly states: {
                            readonly type: "array";
                            readonly description: "List of country ID + state abbr based on State API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly examples: readonly ["39-AB"];
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches the destination zipcode of the orders";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_zipcode"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "zipcodes"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                        };
                        readonly zipcodes: {
                            readonly type: "array";
                            readonly description: "List of zipcodes";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches items SKU";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_sku"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "shipment_items_sku"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing items SKU";
                            readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                        };
                        readonly shipment_items_sku: {
                            readonly type: "string";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches platform";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_platform_name"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["platform_names"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly platform_names: {
                            readonly type: "array";
                            readonly description: "List of platform name base on Shipping Rule Platform API.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches store";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_store"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["store_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly store_ids: {
                            readonly type: "array";
                            readonly description: "List of store IDs base on Store API.";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_buyer_selected_courier_name"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "buyer_selected_courier_name"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "operator for filtering couriers";
                            readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                        };
                        readonly buyer_selected_courier_name: {
                            readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                            readonly type: "string";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order items count";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_items_count"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "shipment_items_count"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing items count";
                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                        };
                        readonly shipment_items_count: {
                            readonly type: "integer";
                            readonly description: "Items count";
                            readonly minimum: 0;
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order's selling price";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_selling_price"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "value", "currency"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing order's selling price";
                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                        };
                        readonly value: {
                            readonly type: "number";
                            readonly description: "Selling price";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                            readonly examples: readonly ["USD"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order weight";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_weight"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "total_actual_weight"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing order weight";
                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "LB or KG based on country setting.";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order tags";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["include_order_tag_name"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["order_tag_list"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly order_tag_list: {
                            readonly type: "array";
                            readonly description: "Tag names based on Tag API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly match_country: "#/components/schemas/ConditionMatchCountryCreate";
                readonly match_all: "#/components/schemas/ConditionMatchAllCreate";
                readonly match_category: "#/components/schemas/ConditionMatchCategoryCreate";
                readonly match_state: "#/components/schemas/ConditionMatchStateCreate";
                readonly match_zipcode: "#/components/schemas/ConditionMatchZipcodeCreate";
                readonly match_sku: "#/components/schemas/ConditionMatchSkuCreate";
                readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformNameCreate";
                readonly match_store: "#/components/schemas/ConditionMatchStoreCreate";
                readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierNameCreate";
                readonly match_items_count: "#/components/schemas/ConditionMatchItemsCountCreate";
                readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPriceCreate";
                readonly match_weight: "#/components/schemas/ConditionMatchWeightCreate";
                readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagNameCreate";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Shipping Rrule Condition detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly condition: {
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly match_country: "#/components/schemas/ConditionMatchCountry";
                            readonly match_all: "#/components/schemas/ConditionMatchAll";
                            readonly match_category: "#/components/schemas/ConditionMatchCategory";
                            readonly match_state: "#/components/schemas/ConditionMatchState";
                            readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                            readonly match_sku: "#/components/schemas/ConditionMatchSku";
                            readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                            readonly match_store: "#/components/schemas/ConditionMatchStore";
                            readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                            readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                            readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                            readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                            readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                        };
                    };
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Condition that matches the destination country of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_country"];
                                readonly description: "`match_country`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["country_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly country_ids: {
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                            readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches all orders";
                        readonly required: readonly ["type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_all"];
                                readonly description: "`match_all`";
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches orders containing specific categories";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_category"];
                                readonly description: "`match_category`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["category_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category_ids: {
                                        readonly type: "array";
                                        readonly description: "List of category IDs based on Category API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination state of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_state"];
                                readonly description: "`match_state`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["states"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly states: {
                                        readonly type: "array";
                                        readonly description: "List of country ID + state abbr based on State API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly examples: readonly ["39-AB"];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination zipcode of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_zipcode"];
                                readonly description: "`match_zipcode`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "zipcodes"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                        readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                    };
                                    readonly zipcodes: {
                                        readonly type: "array";
                                        readonly description: "List of zipcodes";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches items SKU";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_sku"];
                                readonly description: "`match_sku`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_sku"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly shipment_items_sku: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches platform";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_platform_name"];
                                readonly description: "`match_platform_name`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["platform_names"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly platform_names: {
                                        readonly type: "array";
                                        readonly description: "List of platform name base on Shipping Rule Platform API.";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches store";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_store"];
                                readonly description: "`match_store`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["store_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly store_ids: {
                                        readonly type: "array";
                                        readonly description: "List of store IDs base on Store API.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_buyer_selected_courier_name"];
                                readonly description: "`match_buyer_selected_courier_name`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly buyer_selected_courier_name: {
                                        readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order items count";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_items_count"];
                                readonly description: "`match_items_count`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_count"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly shipment_items_count: {
                                        readonly type: "integer";
                                        readonly description: "Items count";
                                        readonly minimum: 0;
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order's selling price";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_selling_price"];
                                readonly description: "`match_selling_price`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value", "currency"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly value: {
                                        readonly type: "number";
                                        readonly description: "Selling price";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order weight";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_weight"];
                                readonly description: "`match_weight`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "total_actual_weight"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "LB or KG based on country setting.";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order tags";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["include_order_tag_name"];
                                readonly description: "`include_order_tag_name`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["order_tag_list"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly order_tag_list: {
                                        readonly type: "array";
                                        readonly description: "Tag names based on Tag API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleConditionDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
                readonly condition_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Condition ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id", "condition_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleConditionIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of shipping rule conditions";
            readonly additionalProperties: false;
            readonly properties: {
                readonly conditions: {
                    readonly type: "array";
                    readonly items: {
                        readonly discriminator: {
                            readonly propertyName: "type";
                            readonly mapping: {
                                readonly match_country: "#/components/schemas/ConditionMatchCountry";
                                readonly match_all: "#/components/schemas/ConditionMatchAll";
                                readonly match_category: "#/components/schemas/ConditionMatchCategory";
                                readonly match_state: "#/components/schemas/ConditionMatchState";
                                readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                                readonly match_sku: "#/components/schemas/ConditionMatchSku";
                                readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                                readonly match_store: "#/components/schemas/ConditionMatchStore";
                                readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                                readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                                readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                                readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                                readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                            };
                        };
                        readonly oneOf: readonly [{
                            readonly type: "object";
                            readonly description: "Condition that matches the destination country of the orders";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_country"];
                                    readonly description: "`match_country`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["country_ids"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly country_ids: {
                                            readonly type: "array";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "integer";
                                                readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                                readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches all orders";
                            readonly required: readonly ["type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_all"];
                                    readonly description: "`match_all`";
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches orders containing specific categories";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_category"];
                                    readonly description: "`match_category`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["category_ids"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly category_ids: {
                                            readonly type: "array";
                                            readonly description: "List of category IDs based on Category API";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches the destination state of the orders";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_state"];
                                    readonly description: "`match_state`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["states"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly states: {
                                            readonly type: "array";
                                            readonly description: "List of country ID + state abbr based on State API";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "string";
                                                readonly examples: readonly ["39-AB"];
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches the destination zipcode of the orders";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_zipcode"];
                                    readonly description: "`match_zipcode`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["operator", "zipcodes"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly operator: {
                                            readonly type: "string";
                                            readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                            readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                        };
                                        readonly zipcodes: {
                                            readonly type: "array";
                                            readonly description: "List of zipcodes";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches items SKU";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_sku"];
                                    readonly description: "`match_sku`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["operator", "shipment_items_sku"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly operator: {
                                            readonly type: "string";
                                            readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                            readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                        };
                                        readonly shipment_items_sku: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches platform";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_platform_name"];
                                    readonly description: "`match_platform_name`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["platform_names"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly platform_names: {
                                            readonly type: "array";
                                            readonly description: "List of platform name base on Shipping Rule Platform API.";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches store";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_store"];
                                    readonly description: "`match_store`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["store_ids"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly store_ids: {
                                            readonly type: "array";
                                            readonly description: "List of store IDs base on Store API.";
                                            readonly items: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_buyer_selected_courier_name"];
                                    readonly description: "`match_buyer_selected_courier_name`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly operator: {
                                            readonly type: "string";
                                            readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                            readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                        };
                                        readonly buyer_selected_courier_name: {
                                            readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches order items count";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_items_count"];
                                    readonly description: "`match_items_count`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["operator", "shipment_items_count"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly operator: {
                                            readonly type: "string";
                                            readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                        };
                                        readonly shipment_items_count: {
                                            readonly type: "integer";
                                            readonly description: "Items count";
                                            readonly minimum: 0;
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches order's selling price";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_selling_price"];
                                    readonly description: "`match_selling_price`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["operator", "value", "currency"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly operator: {
                                            readonly type: "string";
                                            readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                        };
                                        readonly value: {
                                            readonly type: "number";
                                            readonly description: "Selling price";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                            readonly examples: readonly ["USD"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches order weight";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["match_weight"];
                                    readonly description: "`match_weight`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["operator", "total_actual_weight"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly operator: {
                                            readonly type: "string";
                                            readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                        };
                                        readonly total_actual_weight: {
                                            readonly type: "number";
                                            readonly description: "LB or KG based on country setting.";
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "Condition that matches order tags";
                            readonly required: readonly ["type", "options"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["include_order_tag_name"];
                                    readonly description: "`include_order_tag_name`";
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly required: readonly ["order_tag_list"];
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly order_tag_list: {
                                            readonly type: "array";
                                            readonly description: "Tag names based on Tag API";
                                            readonly minItems: 1;
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                };
                            };
                        }];
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleConditionUpdate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Condition that matches the destination country of the orders";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_country"];
                    readonly examples: readonly ["match_platform_name"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["country_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly country_ids: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "integer";
                                readonly description: "Country ID based on Countries API";
                                readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches all orders";
            readonly required: readonly ["type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_all"];
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches orders containing specific categories";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_category"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["category_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly category_ids: {
                            readonly type: "array";
                            readonly description: "List of category IDs based on Category API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches the destination state of the orders";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_state"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["states"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly states: {
                            readonly type: "array";
                            readonly description: "List of country ID + state abbr based on State API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly examples: readonly ["39-AB"];
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches the destination zipcode of the orders";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_zipcode"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "zipcodes"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                        };
                        readonly zipcodes: {
                            readonly type: "array";
                            readonly description: "List of zipcodes";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches items SKU";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_sku"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "shipment_items_sku"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing items SKU";
                            readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                        };
                        readonly shipment_items_sku: {
                            readonly type: "string";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches platform";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_platform_name"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["platform_names"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly platform_names: {
                            readonly type: "array";
                            readonly description: "List of platform name base on Shipping Rule Platform API.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches store";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_store"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["store_ids"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly store_ids: {
                            readonly type: "array";
                            readonly description: "List of store IDs base on Store API.";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_buyer_selected_courier_name"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "buyer_selected_courier_name"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "operator for filtering couriers";
                            readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                        };
                        readonly buyer_selected_courier_name: {
                            readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                            readonly type: "string";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order items count";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_items_count"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "shipment_items_count"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing items count";
                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                        };
                        readonly shipment_items_count: {
                            readonly type: "integer";
                            readonly description: "Items count";
                            readonly minimum: 0;
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order's selling price";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_selling_price"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "value", "currency"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing order's selling price";
                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                        };
                        readonly value: {
                            readonly type: "number";
                            readonly description: "Selling price";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                            readonly examples: readonly ["USD"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order weight";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["match_weight"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["operator", "total_actual_weight"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Operator for comparing order weight";
                            readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                        };
                        readonly total_actual_weight: {
                            readonly type: "number";
                            readonly description: "LB or KG based on country setting.";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Condition that matches order tags";
            readonly required: readonly ["type", "options"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["include_order_tag_name"];
                };
                readonly options: {
                    readonly type: "object";
                    readonly required: readonly ["order_tag_list"];
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly order_tag_list: {
                            readonly type: "array";
                            readonly description: "Tag names based on Tag API";
                            readonly minItems: 1;
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly match_country: "#/components/schemas/ConditionMatchCountryCreate";
                readonly match_all: "#/components/schemas/ConditionMatchAllCreate";
                readonly match_category: "#/components/schemas/ConditionMatchCategoryCreate";
                readonly match_state: "#/components/schemas/ConditionMatchStateCreate";
                readonly match_zipcode: "#/components/schemas/ConditionMatchZipcodeCreate";
                readonly match_sku: "#/components/schemas/ConditionMatchSkuCreate";
                readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformNameCreate";
                readonly match_store: "#/components/schemas/ConditionMatchStoreCreate";
                readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierNameCreate";
                readonly match_items_count: "#/components/schemas/ConditionMatchItemsCountCreate";
                readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPriceCreate";
                readonly match_weight: "#/components/schemas/ConditionMatchWeightCreate";
                readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagNameCreate";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
                readonly condition_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Condition ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id", "condition_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Shipping Rrule Condition detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly condition: {
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly match_country: "#/components/schemas/ConditionMatchCountry";
                            readonly match_all: "#/components/schemas/ConditionMatchAll";
                            readonly match_category: "#/components/schemas/ConditionMatchCategory";
                            readonly match_state: "#/components/schemas/ConditionMatchState";
                            readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                            readonly match_sku: "#/components/schemas/ConditionMatchSku";
                            readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                            readonly match_store: "#/components/schemas/ConditionMatchStore";
                            readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                            readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                            readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                            readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                            readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                        };
                    };
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Condition that matches the destination country of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_country"];
                                readonly description: "`match_country`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["country_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly country_ids: {
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                            readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches all orders";
                        readonly required: readonly ["type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_all"];
                                readonly description: "`match_all`";
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches orders containing specific categories";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_category"];
                                readonly description: "`match_category`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["category_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category_ids: {
                                        readonly type: "array";
                                        readonly description: "List of category IDs based on Category API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination state of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_state"];
                                readonly description: "`match_state`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["states"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly states: {
                                        readonly type: "array";
                                        readonly description: "List of country ID + state abbr based on State API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly examples: readonly ["39-AB"];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination zipcode of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_zipcode"];
                                readonly description: "`match_zipcode`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "zipcodes"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                        readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                    };
                                    readonly zipcodes: {
                                        readonly type: "array";
                                        readonly description: "List of zipcodes";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches items SKU";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_sku"];
                                readonly description: "`match_sku`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_sku"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly shipment_items_sku: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches platform";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_platform_name"];
                                readonly description: "`match_platform_name`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["platform_names"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly platform_names: {
                                        readonly type: "array";
                                        readonly description: "List of platform name base on Shipping Rule Platform API.";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches store";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_store"];
                                readonly description: "`match_store`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["store_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly store_ids: {
                                        readonly type: "array";
                                        readonly description: "List of store IDs base on Store API.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_buyer_selected_courier_name"];
                                readonly description: "`match_buyer_selected_courier_name`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly buyer_selected_courier_name: {
                                        readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order items count";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_items_count"];
                                readonly description: "`match_items_count`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_count"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly shipment_items_count: {
                                        readonly type: "integer";
                                        readonly description: "Items count";
                                        readonly minimum: 0;
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order's selling price";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_selling_price"];
                                readonly description: "`match_selling_price`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value", "currency"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly value: {
                                        readonly type: "number";
                                        readonly description: "Selling price";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                        readonly examples: readonly ["USD"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order weight";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_weight"];
                                readonly description: "`match_weight`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "total_actual_weight"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "LB or KG based on country setting.";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order tags";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["include_order_tag_name"];
                                readonly description: "`include_order_tag_name`";
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["order_tag_list"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly order_tag_list: {
                                        readonly type: "array";
                                        readonly description: "Tag names based on Tag API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRuleDeactivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Shipping Rule detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipping_rule: {
                    readonly type: "object";
                    readonly description: "Shipping Rules";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Shipping Rule name";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Shipping Rule description";
                        };
                        readonly priority: {
                            readonly type: "integer";
                            readonly description: "The smaller value represent the higher priority. High priority shipping rule would be execute first.";
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Turn on or turn off this shipping rule";
                        };
                        readonly accessible: {
                            readonly type: "boolean";
                            readonly description: "Based on current subscription plan. Return false if current subscription do not own shipping rule features.";
                        };
                        readonly checkout_restrictive: {
                            readonly type: "boolean";
                        };
                        readonly conditions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly match_country: "#/components/schemas/ConditionMatchCountry";
                                        readonly match_all: "#/components/schemas/ConditionMatchAll";
                                        readonly match_category: "#/components/schemas/ConditionMatchCategory";
                                        readonly match_state: "#/components/schemas/ConditionMatchState";
                                        readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                                        readonly match_sku: "#/components/schemas/ConditionMatchSku";
                                        readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                                        readonly match_store: "#/components/schemas/ConditionMatchStore";
                                        readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                                        readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                                        readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                                        readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                                        readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                                    };
                                };
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination country of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_country"];
                                            readonly description: "`match_country`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["country_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly country_ids: {
                                                    readonly type: "array";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                                        readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches all orders";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_all"];
                                            readonly description: "`match_all`";
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches orders containing specific categories";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_category"];
                                            readonly description: "`match_category`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["category_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly category_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of category IDs based on Category API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination state of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_state"];
                                            readonly description: "`match_state`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["states"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly states: {
                                                    readonly type: "array";
                                                    readonly description: "List of country ID + state abbr based on State API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["39-AB"];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination zipcode of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_zipcode"];
                                            readonly description: "`match_zipcode`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "zipcodes"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                                    readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                                };
                                                readonly zipcodes: {
                                                    readonly type: "array";
                                                    readonly description: "List of zipcodes";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches items SKU";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_sku"];
                                            readonly description: "`match_sku`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_sku"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly shipment_items_sku: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches platform";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_platform_name"];
                                            readonly description: "`match_platform_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["platform_names"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly platform_names: {
                                                    readonly type: "array";
                                                    readonly description: "List of platform name base on Shipping Rule Platform API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches store";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_store"];
                                            readonly description: "`match_store`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["store_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly store_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of store IDs base on Store API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_buyer_selected_courier_name"];
                                            readonly description: "`match_buyer_selected_courier_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly buyer_selected_courier_name: {
                                                    readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order items count";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_items_count"];
                                            readonly description: "`match_items_count`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_count"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly shipment_items_count: {
                                                    readonly type: "integer";
                                                    readonly description: "Items count";
                                                    readonly minimum: 0;
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order's selling price";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_selling_price"];
                                            readonly description: "`match_selling_price`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value", "currency"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly value: {
                                                    readonly type: "number";
                                                    readonly description: "Selling price";
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order weight";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_weight"];
                                            readonly description: "`match_weight`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "total_actual_weight"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly total_actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "LB or KG based on country setting.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order tags";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["include_order_tag_name"];
                                            readonly description: "`include_order_tag_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["order_tag_list"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly order_tag_list: {
                                                    readonly type: "array";
                                                    readonly description: "Tag names based on Tag API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                            };
                        };
                        readonly actions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Never add specific courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_never_courier_service"];
                                            readonly description: "`add_never_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use preferred courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_preferred_courier_service"];
                                            readonly description: "`add_preferred_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["preferred_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly preferred_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Taxes & duties";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_incoterms"];
                                            readonly description: "`force_incoterms`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["incoterms"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly incoterms: {
                                                    readonly type: "string";
                                                    readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                                    readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_sort_by"];
                                            readonly description: "`force_sort_by`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["sort_by"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly sort_by: {
                                                    readonly type: "string";
                                                    readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                                    readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Force applying insurance";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_insurance"];
                                            readonly description: "`force_insurance`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["insured"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly insured: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_tracking_rating"];
                                            readonly description: "`force_tracking_rating`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_tracking_rating"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_tracking_rating: {
                                                    readonly type: "array";
                                                    readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                                        readonly enum: readonly [0, 1, 2, 3];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use package";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_package"];
                                            readonly description: "`force_package`";
                                        };
                                        readonly options: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["force_box_id"];
                                                readonly properties: {
                                                    readonly force_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'box'.";
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["force_flat_rate_box_id"];
                                                readonly properties: {
                                                    readonly force_flat_rate_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Exclude specified boxes";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["reject_packages"];
                                            readonly description: "`reject_packages`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_package_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_package_ids: {
                                                    readonly type: "array";
                                                    readonly description: "Box IDs based on Box API.";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly format: "uuid";
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Declare destination address as residential.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_residential_surcharge"];
                                            readonly description: "`force_residential_surcharge`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["set_as_residential"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly set_as_residential: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Ship From";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_ship_from"];
                                            readonly description: "`force_ship_from`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["origin_address_id"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly origin_address_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "Address ID based on Address API.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Return labels for domestic shipments";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_automated_return_requested"];
                                            readonly description: "`force_automated_return_requested`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_automated_return_requested"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_automated_return_requested: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Restrict courier services based on delivery time";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_forced_delivery_time"];
                                            readonly description: "`add_forced_delivery_time`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                                    readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly description: "How many days";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                                        readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                                        readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                                        readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                                        readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                                        readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                                        readonly force_package: "#/components/schemas/ActionForcePackage";
                                        readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                                        readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                                        readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                                        readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                                        readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                                    };
                                };
                            };
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRulePlatformsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of plaforms for Shipping Rules";
            readonly additionalProperties: false;
            readonly properties: {
                readonly platforms: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Platform";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Platform name for shipping rules.";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRulesCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Shipping Rule Create Params";
        readonly additionalProperties: false;
        readonly required: readonly ["name", "description", "conditions", "actions"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Shipping Rule name";
                readonly examples: readonly ["Example Shipping Rule"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Shipping Rule description";
            };
            readonly recalculate_shipments: {
                readonly type: "boolean";
                readonly description: "Recalculate all shipments affected by this shipping rule";
            };
            readonly priority: {
                readonly type: "integer";
                readonly description: "The smaller value represent the higher priority. High priority shipping rule would be execute first.";
            };
            readonly conditions: {
                readonly type: "array";
                readonly minItems: 1;
                readonly items: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Condition that matches the destination country of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_country"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["country_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly country_ids: {
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "Country ID based on Countries API";
                                            readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches all orders";
                        readonly required: readonly ["type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_all"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches orders containing specific categories";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_category"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["category_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category_ids: {
                                        readonly type: "array";
                                        readonly description: "List of category IDs based on Category API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination state of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_state"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["states"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly states: {
                                        readonly type: "array";
                                        readonly description: "List of country ID + state abbr based on State API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly examples: readonly ["39-AB"];
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination zipcode of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_zipcode"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "zipcodes"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                    };
                                    readonly zipcodes: {
                                        readonly type: "array";
                                        readonly description: "List of zipcodes";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches items SKU";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_sku"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_sku"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items SKU";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly shipment_items_sku: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches platform";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_platform_name"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["platform_names"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly platform_names: {
                                        readonly type: "array";
                                        readonly description: "List of platform name base on Shipping Rule Platform API.";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches store";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_store"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["store_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly store_ids: {
                                        readonly type: "array";
                                        readonly description: "List of store IDs base on Store API.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_buyer_selected_courier_name"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "operator for filtering couriers";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly buyer_selected_courier_name: {
                                        readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order items count";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_items_count"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_count"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items count";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly shipment_items_count: {
                                        readonly type: "integer";
                                        readonly description: "Items count";
                                        readonly minimum: 0;
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order's selling price";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_selling_price"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value", "currency"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order's selling price";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly value: {
                                        readonly type: "number";
                                        readonly description: "Selling price";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                        readonly examples: readonly ["USD"];
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order weight";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_weight"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "total_actual_weight"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order weight";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "LB or KG based on country setting.";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order tags";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["include_order_tag_name"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["order_tag_list"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly order_tag_list: {
                                        readonly type: "array";
                                        readonly description: "Tag names based on Tag API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly match_country: "#/components/schemas/ConditionMatchCountryCreate";
                            readonly match_all: "#/components/schemas/ConditionMatchAllCreate";
                            readonly match_category: "#/components/schemas/ConditionMatchCategoryCreate";
                            readonly match_state: "#/components/schemas/ConditionMatchStateCreate";
                            readonly match_zipcode: "#/components/schemas/ConditionMatchZipcodeCreate";
                            readonly match_sku: "#/components/schemas/ConditionMatchSkuCreate";
                            readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformNameCreate";
                            readonly match_store: "#/components/schemas/ConditionMatchStoreCreate";
                            readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierNameCreate";
                            readonly match_items_count: "#/components/schemas/ConditionMatchItemsCountCreate";
                            readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPriceCreate";
                            readonly match_weight: "#/components/schemas/ConditionMatchWeightCreate";
                            readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagNameCreate";
                        };
                    };
                };
            };
            readonly actions: {
                readonly type: "array";
                readonly minItems: 1;
                readonly items: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Never add specific courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_never_courier_service"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use preferred courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_preferred_courier_service"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["preferred_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly preferred_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Taxes & duties";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_incoterms"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["incoterms"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly incoterms: {
                                        readonly type: "string";
                                        readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n";
                                        readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_sort_by"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["sort_by"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly sort_by: {
                                        readonly type: "string";
                                        readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n";
                                        readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Force applying insurance";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_insurance"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["insured"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly insured: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_tracking_rating"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_tracking_rating"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_tracking_rating: {
                                        readonly type: "array";
                                        readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n";
                                            readonly enum: readonly [0, 1, 2, 3];
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use package";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_package"];
                            };
                            readonly options: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["force_box_id"];
                                    readonly properties: {
                                        readonly force_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'box'.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["force_flat_rate_box_id"];
                                    readonly properties: {
                                        readonly force_flat_rate_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                        };
                                    };
                                }];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Exclude specified boxes";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["reject_packages"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_package_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_package_ids: {
                                        readonly type: "array";
                                        readonly description: "Box IDs based on Box API.";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly format: "uuid";
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Declare destination address as residential.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_residential_surcharge"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["set_as_residential"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly set_as_residential: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Ship From";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_ship_from"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["origin_address_id"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly origin_address_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Address ID based on Address API.";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Return labels for domestic shipments";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_automated_return_requested"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_automated_return_requested"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_automated_return_requested: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Restrict courier services based on delivery time";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_forced_delivery_time"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)";
                                        readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                    };
                                    readonly value: {
                                        readonly type: "integer";
                                        readonly description: "How many days";
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourierCreate";
                            readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourierCreate";
                            readonly force_incoterms: "#/components/schemas/ActionForceIncotermsCreate";
                            readonly force_sort_by: "#/components/schemas/ActionForceSortByCreate";
                            readonly force_insurance: "#/components/schemas/ActionForceInsuranceCreate";
                            readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRatingCreate";
                            readonly force_package: "#/components/schemas/ActionForcePackageCreate";
                            readonly reject_packages: "#/components/schemas/ActionRejectPackagesCreate";
                            readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurchargeCreate";
                            readonly force_ship_from: "#/components/schemas/ActionForceShipFromCreate";
                            readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequestedCreate";
                            readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTimeCreate";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Shipping Rule detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipping_rule: {
                    readonly type: "object";
                    readonly description: "Shipping Rules";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Shipping Rule name";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Shipping Rule description";
                        };
                        readonly priority: {
                            readonly type: "integer";
                            readonly description: "The smaller value represent the higher priority. High priority shipping rule would be execute first.";
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Turn on or turn off this shipping rule";
                        };
                        readonly accessible: {
                            readonly type: "boolean";
                            readonly description: "Based on current subscription plan. Return false if current subscription do not own shipping rule features.";
                        };
                        readonly checkout_restrictive: {
                            readonly type: "boolean";
                        };
                        readonly conditions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly match_country: "#/components/schemas/ConditionMatchCountry";
                                        readonly match_all: "#/components/schemas/ConditionMatchAll";
                                        readonly match_category: "#/components/schemas/ConditionMatchCategory";
                                        readonly match_state: "#/components/schemas/ConditionMatchState";
                                        readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                                        readonly match_sku: "#/components/schemas/ConditionMatchSku";
                                        readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                                        readonly match_store: "#/components/schemas/ConditionMatchStore";
                                        readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                                        readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                                        readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                                        readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                                        readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                                    };
                                };
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination country of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_country"];
                                            readonly description: "`match_country`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["country_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly country_ids: {
                                                    readonly type: "array";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                                        readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches all orders";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_all"];
                                            readonly description: "`match_all`";
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches orders containing specific categories";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_category"];
                                            readonly description: "`match_category`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["category_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly category_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of category IDs based on Category API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination state of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_state"];
                                            readonly description: "`match_state`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["states"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly states: {
                                                    readonly type: "array";
                                                    readonly description: "List of country ID + state abbr based on State API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["39-AB"];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination zipcode of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_zipcode"];
                                            readonly description: "`match_zipcode`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "zipcodes"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                                    readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                                };
                                                readonly zipcodes: {
                                                    readonly type: "array";
                                                    readonly description: "List of zipcodes";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches items SKU";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_sku"];
                                            readonly description: "`match_sku`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_sku"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly shipment_items_sku: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches platform";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_platform_name"];
                                            readonly description: "`match_platform_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["platform_names"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly platform_names: {
                                                    readonly type: "array";
                                                    readonly description: "List of platform name base on Shipping Rule Platform API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches store";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_store"];
                                            readonly description: "`match_store`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["store_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly store_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of store IDs base on Store API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_buyer_selected_courier_name"];
                                            readonly description: "`match_buyer_selected_courier_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly buyer_selected_courier_name: {
                                                    readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order items count";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_items_count"];
                                            readonly description: "`match_items_count`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_count"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly shipment_items_count: {
                                                    readonly type: "integer";
                                                    readonly description: "Items count";
                                                    readonly minimum: 0;
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order's selling price";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_selling_price"];
                                            readonly description: "`match_selling_price`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value", "currency"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly value: {
                                                    readonly type: "number";
                                                    readonly description: "Selling price";
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order weight";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_weight"];
                                            readonly description: "`match_weight`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "total_actual_weight"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly total_actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "LB or KG based on country setting.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order tags";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["include_order_tag_name"];
                                            readonly description: "`include_order_tag_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["order_tag_list"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly order_tag_list: {
                                                    readonly type: "array";
                                                    readonly description: "Tag names based on Tag API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                            };
                        };
                        readonly actions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Never add specific courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_never_courier_service"];
                                            readonly description: "`add_never_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use preferred courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_preferred_courier_service"];
                                            readonly description: "`add_preferred_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["preferred_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly preferred_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Taxes & duties";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_incoterms"];
                                            readonly description: "`force_incoterms`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["incoterms"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly incoterms: {
                                                    readonly type: "string";
                                                    readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                                    readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_sort_by"];
                                            readonly description: "`force_sort_by`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["sort_by"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly sort_by: {
                                                    readonly type: "string";
                                                    readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                                    readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Force applying insurance";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_insurance"];
                                            readonly description: "`force_insurance`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["insured"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly insured: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_tracking_rating"];
                                            readonly description: "`force_tracking_rating`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_tracking_rating"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_tracking_rating: {
                                                    readonly type: "array";
                                                    readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                                        readonly enum: readonly [0, 1, 2, 3];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use package";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_package"];
                                            readonly description: "`force_package`";
                                        };
                                        readonly options: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["force_box_id"];
                                                readonly properties: {
                                                    readonly force_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'box'.";
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["force_flat_rate_box_id"];
                                                readonly properties: {
                                                    readonly force_flat_rate_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Exclude specified boxes";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["reject_packages"];
                                            readonly description: "`reject_packages`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_package_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_package_ids: {
                                                    readonly type: "array";
                                                    readonly description: "Box IDs based on Box API.";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly format: "uuid";
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Declare destination address as residential.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_residential_surcharge"];
                                            readonly description: "`force_residential_surcharge`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["set_as_residential"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly set_as_residential: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Ship From";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_ship_from"];
                                            readonly description: "`force_ship_from`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["origin_address_id"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly origin_address_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "Address ID based on Address API.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Return labels for domestic shipments";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_automated_return_requested"];
                                            readonly description: "`force_automated_return_requested`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_automated_return_requested"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_automated_return_requested: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Restrict courier services based on delivery time";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_forced_delivery_time"];
                                            readonly description: "`add_forced_delivery_time`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                                    readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly description: "How many days";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                                        readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                                        readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                                        readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                                        readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                                        readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                                        readonly force_package: "#/components/schemas/ActionForcePackage";
                                        readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                                        readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                                        readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                                        readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                                        readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                                    };
                                };
                            };
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRulesDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRulesIndex: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of shipping rules";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipping_rules: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Shipping Rules";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Shipping Rule name";
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Shipping Rule description";
                            };
                            readonly priority: {
                                readonly type: "integer";
                                readonly description: "The smaller value represent the higher priority. High priority shipping rule would be execute first.";
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Turn on or turn off this shipping rule";
                            };
                            readonly accessible: {
                                readonly type: "boolean";
                                readonly description: "Based on current subscription plan. Return false if current subscription do not own shipping rule features.";
                            };
                            readonly checkout_restrictive: {
                                readonly type: "boolean";
                            };
                            readonly conditions: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly items: {
                                    readonly discriminator: {
                                        readonly propertyName: "type";
                                        readonly mapping: {
                                            readonly match_country: "#/components/schemas/ConditionMatchCountry";
                                            readonly match_all: "#/components/schemas/ConditionMatchAll";
                                            readonly match_category: "#/components/schemas/ConditionMatchCategory";
                                            readonly match_state: "#/components/schemas/ConditionMatchState";
                                            readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                                            readonly match_sku: "#/components/schemas/ConditionMatchSku";
                                            readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                                            readonly match_store: "#/components/schemas/ConditionMatchStore";
                                            readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                                            readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                                            readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                                            readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                                            readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                                        };
                                    };
                                    readonly oneOf: readonly [{
                                        readonly type: "object";
                                        readonly description: "Condition that matches the destination country of the orders";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_country"];
                                                readonly description: "`match_country`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["country_ids"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly country_ids: {
                                                        readonly type: "array";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "integer";
                                                            readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                                            readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches all orders";
                                        readonly required: readonly ["type"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_all"];
                                                readonly description: "`match_all`";
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches orders containing specific categories";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_category"];
                                                readonly description: "`match_category`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["category_ids"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly category_ids: {
                                                        readonly type: "array";
                                                        readonly description: "List of category IDs based on Category API";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches the destination state of the orders";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_state"];
                                                readonly description: "`match_state`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["states"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly states: {
                                                        readonly type: "array";
                                                        readonly description: "List of country ID + state abbr based on State API";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["39-AB"];
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches the destination zipcode of the orders";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_zipcode"];
                                                readonly description: "`match_zipcode`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["operator", "zipcodes"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly operator: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                                        readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                                    };
                                                    readonly zipcodes: {
                                                        readonly type: "array";
                                                        readonly description: "List of zipcodes";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches items SKU";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_sku"];
                                                readonly description: "`match_sku`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["operator", "shipment_items_sku"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly operator: {
                                                        readonly type: "string";
                                                        readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                    };
                                                    readonly shipment_items_sku: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches platform";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_platform_name"];
                                                readonly description: "`match_platform_name`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["platform_names"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly platform_names: {
                                                        readonly type: "array";
                                                        readonly description: "List of platform name base on Shipping Rule Platform API.";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches store";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_store"];
                                                readonly description: "`match_store`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["store_ids"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly store_ids: {
                                                        readonly type: "array";
                                                        readonly description: "List of store IDs base on Store API.";
                                                        readonly items: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_buyer_selected_courier_name"];
                                                readonly description: "`match_buyer_selected_courier_name`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly operator: {
                                                        readonly type: "string";
                                                        readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                    };
                                                    readonly buyer_selected_courier_name: {
                                                        readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches order items count";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_items_count"];
                                                readonly description: "`match_items_count`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["operator", "shipment_items_count"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly operator: {
                                                        readonly type: "string";
                                                        readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                    };
                                                    readonly shipment_items_count: {
                                                        readonly type: "integer";
                                                        readonly description: "Items count";
                                                        readonly minimum: 0;
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches order's selling price";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_selling_price"];
                                                readonly description: "`match_selling_price`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["operator", "value", "currency"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly operator: {
                                                        readonly type: "string";
                                                        readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                    };
                                                    readonly value: {
                                                        readonly type: "number";
                                                        readonly description: "Selling price";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                        readonly examples: readonly ["USD"];
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches order weight";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["match_weight"];
                                                readonly description: "`match_weight`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["operator", "total_actual_weight"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly operator: {
                                                        readonly type: "string";
                                                        readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                    };
                                                    readonly total_actual_weight: {
                                                        readonly type: "number";
                                                        readonly description: "LB or KG based on country setting.";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Condition that matches order tags";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["include_order_tag_name"];
                                                readonly description: "`include_order_tag_name`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["order_tag_list"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly order_tag_list: {
                                                        readonly type: "array";
                                                        readonly description: "Tag names based on Tag API";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }];
                                };
                            };
                            readonly actions: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly items: {
                                    readonly oneOf: readonly [{
                                        readonly type: "object";
                                        readonly description: "Never add specific courier services";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["add_never_courier_service"];
                                                readonly description: "`add_never_courier_service`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["never_courier_service_ids"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly never_courier_service_ids: {
                                                        readonly type: "array";
                                                        readonly description: "List of courier service IDs based on Courier Service API";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Use preferred courier services";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["add_preferred_courier_service"];
                                                readonly description: "`add_preferred_courier_service`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["preferred_courier_service_ids"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly preferred_courier_service_ids: {
                                                        readonly type: "array";
                                                        readonly description: "List of courier service IDs based on Courier Service API";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Taxes & duties";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_incoterms"];
                                                readonly description: "`force_incoterms`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["incoterms"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly incoterms: {
                                                        readonly type: "string";
                                                        readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                                        readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_sort_by"];
                                                readonly description: "`force_sort_by`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["sort_by"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly sort_by: {
                                                        readonly type: "string";
                                                        readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                                        readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Force applying insurance";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_insurance"];
                                                readonly description: "`force_insurance`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["insured"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly insured: {
                                                        readonly type: "boolean";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_tracking_rating"];
                                                readonly description: "`force_tracking_rating`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["force_tracking_rating"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly force_tracking_rating: {
                                                        readonly type: "array";
                                                        readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly type: "integer";
                                                            readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                                            readonly enum: readonly [0, 1, 2, 3];
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "string";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Use package";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_package"];
                                                readonly description: "`force_package`";
                                            };
                                            readonly options: {
                                                readonly oneOf: readonly [{
                                                    readonly type: "object";
                                                    readonly required: readonly ["force_box_id"];
                                                    readonly properties: {
                                                        readonly force_box_id: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly description: "Box ID based on Box API. Box type is 'box'.";
                                                        };
                                                    };
                                                }, {
                                                    readonly type: "object";
                                                    readonly required: readonly ["force_flat_rate_box_id"];
                                                    readonly properties: {
                                                        readonly force_flat_rate_box_id: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                                        };
                                                    };
                                                }];
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Exclude specified boxes";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["reject_packages"];
                                                readonly description: "`reject_packages`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["never_package_ids"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly never_package_ids: {
                                                        readonly type: "array";
                                                        readonly description: "Box IDs based on Box API.";
                                                        readonly minItems: 1;
                                                        readonly items: {
                                                            readonly format: "uuid";
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Declare destination address as residential.";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_residential_surcharge"];
                                                readonly description: "`force_residential_surcharge`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["set_as_residential"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly set_as_residential: {
                                                        readonly type: "boolean";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Ship From";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_ship_from"];
                                                readonly description: "`force_ship_from`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["origin_address_id"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly origin_address_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Address ID based on Address API.";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Return labels for domestic shipments";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["force_automated_return_requested"];
                                                readonly description: "`force_automated_return_requested`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["force_automated_return_requested"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly force_automated_return_requested: {
                                                        readonly type: "boolean";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }, {
                                        readonly type: "object";
                                        readonly description: "Restrict courier services based on delivery time";
                                        readonly required: readonly ["type", "options"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["add_forced_delivery_time"];
                                                readonly description: "`add_forced_delivery_time`";
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly required: readonly ["operator", "value"];
                                                readonly additionalProperties: false;
                                                readonly properties: {
                                                    readonly operator: {
                                                        readonly type: "string";
                                                        readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                                        readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                                    };
                                                    readonly value: {
                                                        readonly type: "integer";
                                                        readonly description: "How many days";
                                                    };
                                                };
                                            };
                                            readonly id: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                            };
                                        };
                                    }];
                                    readonly discriminator: {
                                        readonly propertyName: "type";
                                        readonly mapping: {
                                            readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                                            readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                                            readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                                            readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                                            readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                                            readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                                            readonly force_package: "#/components/schemas/ActionForcePackage";
                                            readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                                            readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                                            readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                                            readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                                            readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                                        };
                                    };
                                };
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRulesShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Shipping Rule detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipping_rule: {
                    readonly type: "object";
                    readonly description: "Shipping Rules";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Shipping Rule name";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Shipping Rule description";
                        };
                        readonly priority: {
                            readonly type: "integer";
                            readonly description: "The smaller value represent the higher priority. High priority shipping rule would be execute first.";
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Turn on or turn off this shipping rule";
                        };
                        readonly accessible: {
                            readonly type: "boolean";
                            readonly description: "Based on current subscription plan. Return false if current subscription do not own shipping rule features.";
                        };
                        readonly checkout_restrictive: {
                            readonly type: "boolean";
                        };
                        readonly conditions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly match_country: "#/components/schemas/ConditionMatchCountry";
                                        readonly match_all: "#/components/schemas/ConditionMatchAll";
                                        readonly match_category: "#/components/schemas/ConditionMatchCategory";
                                        readonly match_state: "#/components/schemas/ConditionMatchState";
                                        readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                                        readonly match_sku: "#/components/schemas/ConditionMatchSku";
                                        readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                                        readonly match_store: "#/components/schemas/ConditionMatchStore";
                                        readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                                        readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                                        readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                                        readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                                        readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                                    };
                                };
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination country of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_country"];
                                            readonly description: "`match_country`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["country_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly country_ids: {
                                                    readonly type: "array";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                                        readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches all orders";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_all"];
                                            readonly description: "`match_all`";
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches orders containing specific categories";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_category"];
                                            readonly description: "`match_category`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["category_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly category_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of category IDs based on Category API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination state of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_state"];
                                            readonly description: "`match_state`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["states"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly states: {
                                                    readonly type: "array";
                                                    readonly description: "List of country ID + state abbr based on State API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["39-AB"];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination zipcode of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_zipcode"];
                                            readonly description: "`match_zipcode`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "zipcodes"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                                    readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                                };
                                                readonly zipcodes: {
                                                    readonly type: "array";
                                                    readonly description: "List of zipcodes";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches items SKU";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_sku"];
                                            readonly description: "`match_sku`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_sku"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly shipment_items_sku: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches platform";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_platform_name"];
                                            readonly description: "`match_platform_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["platform_names"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly platform_names: {
                                                    readonly type: "array";
                                                    readonly description: "List of platform name base on Shipping Rule Platform API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches store";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_store"];
                                            readonly description: "`match_store`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["store_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly store_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of store IDs base on Store API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_buyer_selected_courier_name"];
                                            readonly description: "`match_buyer_selected_courier_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly buyer_selected_courier_name: {
                                                    readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order items count";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_items_count"];
                                            readonly description: "`match_items_count`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_count"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly shipment_items_count: {
                                                    readonly type: "integer";
                                                    readonly description: "Items count";
                                                    readonly minimum: 0;
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order's selling price";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_selling_price"];
                                            readonly description: "`match_selling_price`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value", "currency"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly value: {
                                                    readonly type: "number";
                                                    readonly description: "Selling price";
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order weight";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_weight"];
                                            readonly description: "`match_weight`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "total_actual_weight"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly total_actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "LB or KG based on country setting.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order tags";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["include_order_tag_name"];
                                            readonly description: "`include_order_tag_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["order_tag_list"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly order_tag_list: {
                                                    readonly type: "array";
                                                    readonly description: "Tag names based on Tag API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                            };
                        };
                        readonly actions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Never add specific courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_never_courier_service"];
                                            readonly description: "`add_never_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use preferred courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_preferred_courier_service"];
                                            readonly description: "`add_preferred_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["preferred_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly preferred_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Taxes & duties";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_incoterms"];
                                            readonly description: "`force_incoterms`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["incoterms"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly incoterms: {
                                                    readonly type: "string";
                                                    readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                                    readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_sort_by"];
                                            readonly description: "`force_sort_by`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["sort_by"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly sort_by: {
                                                    readonly type: "string";
                                                    readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                                    readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Force applying insurance";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_insurance"];
                                            readonly description: "`force_insurance`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["insured"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly insured: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_tracking_rating"];
                                            readonly description: "`force_tracking_rating`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_tracking_rating"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_tracking_rating: {
                                                    readonly type: "array";
                                                    readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                                        readonly enum: readonly [0, 1, 2, 3];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use package";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_package"];
                                            readonly description: "`force_package`";
                                        };
                                        readonly options: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["force_box_id"];
                                                readonly properties: {
                                                    readonly force_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'box'.";
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["force_flat_rate_box_id"];
                                                readonly properties: {
                                                    readonly force_flat_rate_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Exclude specified boxes";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["reject_packages"];
                                            readonly description: "`reject_packages`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_package_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_package_ids: {
                                                    readonly type: "array";
                                                    readonly description: "Box IDs based on Box API.";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly format: "uuid";
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Declare destination address as residential.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_residential_surcharge"];
                                            readonly description: "`force_residential_surcharge`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["set_as_residential"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly set_as_residential: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Ship From";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_ship_from"];
                                            readonly description: "`force_ship_from`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["origin_address_id"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly origin_address_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "Address ID based on Address API.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Return labels for domestic shipments";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_automated_return_requested"];
                                            readonly description: "`force_automated_return_requested`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_automated_return_requested"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_automated_return_requested: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Restrict courier services based on delivery time";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_forced_delivery_time"];
                                            readonly description: "`add_forced_delivery_time`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                                    readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly description: "How many days";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                                        readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                                        readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                                        readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                                        readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                                        readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                                        readonly force_package: "#/components/schemas/ActionForcePackage";
                                        readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                                        readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                                        readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                                        readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                                        readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                                    };
                                };
                            };
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShippingRulesUpdate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Shipping Rule Update Params";
        readonly additionalProperties: false;
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Shipping Rule name";
                readonly examples: readonly ["Updated Shipping Rule"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Shipping Rule description";
            };
            readonly recalculate_shipments: {
                readonly type: "boolean";
                readonly description: "Recalculate all shipments affected by this shipping rule";
            };
            readonly priority: {
                readonly type: "integer";
                readonly description: "A smaller value represent higher priority. High priority shipping rule would be execute first.";
            };
            readonly conditions: {
                readonly type: "array";
                readonly minItems: 1;
                readonly items: {
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly match_country: "#/components/schemas/ConditionMatchCountry";
                            readonly match_all: "#/components/schemas/ConditionMatchAll";
                            readonly match_category: "#/components/schemas/ConditionMatchCategory";
                            readonly match_state: "#/components/schemas/ConditionMatchState";
                            readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                            readonly match_sku: "#/components/schemas/ConditionMatchSku";
                            readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                            readonly match_store: "#/components/schemas/ConditionMatchStore";
                            readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                            readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                            readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                            readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                            readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                        };
                    };
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Condition that matches the destination country of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_country"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["country_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly country_ids: {
                                        readonly type: "array";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "Country ID based on Countries API";
                                            readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches all orders";
                        readonly required: readonly ["type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_all"];
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches orders containing specific categories";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_category"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["category_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly category_ids: {
                                        readonly type: "array";
                                        readonly description: "List of category IDs based on Category API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination state of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_state"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["states"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly states: {
                                        readonly type: "array";
                                        readonly description: "List of country ID + state abbr based on State API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly examples: readonly ["39-AB"];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches the destination zipcode of the orders";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_zipcode"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "zipcodes"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                    };
                                    readonly zipcodes: {
                                        readonly type: "array";
                                        readonly description: "List of zipcodes";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches items SKU";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_sku"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_sku"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items SKU";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly shipment_items_sku: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches platform";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_platform_name"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["platform_names"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly platform_names: {
                                        readonly type: "array";
                                        readonly description: "List of platform name base on Shipping Rule Platform API.";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches store";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_store"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["store_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly store_ids: {
                                        readonly type: "array";
                                        readonly description: "List of store IDs base on Store API.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_buyer_selected_courier_name"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "operator for filtering couriers";
                                        readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                    };
                                    readonly buyer_selected_courier_name: {
                                        readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order items count";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_items_count"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "shipment_items_count"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing items count";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly shipment_items_count: {
                                        readonly type: "integer";
                                        readonly description: "Items count";
                                        readonly minimum: 0;
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order's selling price";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_selling_price"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value", "currency"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order's selling price";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly value: {
                                        readonly type: "number";
                                        readonly description: "Selling price";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                        readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                                        readonly examples: readonly ["USD"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order weight";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["match_weight"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "total_actual_weight"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operator for comparing order weight";
                                        readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                    };
                                    readonly total_actual_weight: {
                                        readonly type: "number";
                                        readonly description: "LB or KG based on country setting.";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Condition that matches order tags";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["include_order_tag_name"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["order_tag_list"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly order_tag_list: {
                                        readonly type: "array";
                                        readonly description: "Tag names based on Tag API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }];
                };
            };
            readonly actions: {
                readonly type: "array";
                readonly minItems: 1;
                readonly items: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Never add specific courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_never_courier_service"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use preferred courier services";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_preferred_courier_service"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["preferred_courier_service_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly preferred_courier_service_ids: {
                                        readonly type: "array";
                                        readonly description: "List of courier service IDs based on Courier Service API";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Taxes & duties";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_incoterms"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["incoterms"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly incoterms: {
                                        readonly type: "string";
                                        readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n";
                                        readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_sort_by"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["sort_by"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly sort_by: {
                                        readonly type: "string";
                                        readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n";
                                        readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Force applying insurance";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_insurance"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["insured"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly insured: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_tracking_rating"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_tracking_rating"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_tracking_rating: {
                                        readonly type: "array";
                                        readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly type: "integer";
                                            readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n";
                                            readonly enum: readonly [0, 1, 2, 3];
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "string";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Use package";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_package"];
                            };
                            readonly options: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["force_box_id"];
                                    readonly properties: {
                                        readonly force_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'box'.";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["force_flat_rate_box_id"];
                                    readonly properties: {
                                        readonly force_flat_rate_box_id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                        };
                                    };
                                }];
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Exclude specified boxes";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["reject_packages"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["never_package_ids"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly never_package_ids: {
                                        readonly type: "array";
                                        readonly description: "Box IDs based on Box API.";
                                        readonly minItems: 1;
                                        readonly items: {
                                            readonly format: "uuid";
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Declare destination address as residential.";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_residential_surcharge"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["set_as_residential"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly set_as_residential: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Ship From";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_ship_from"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["origin_address_id"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly origin_address_id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Address ID based on Address API.";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Return labels for domestic shipments";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["force_automated_return_requested"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["force_automated_return_requested"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly force_automated_return_requested: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Restrict courier services based on delivery time";
                        readonly required: readonly ["type", "options"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["add_forced_delivery_time"];
                            };
                            readonly options: {
                                readonly type: "object";
                                readonly required: readonly ["operator", "value"];
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)";
                                        readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                    };
                                    readonly value: {
                                        readonly type: "integer";
                                        readonly description: "How many days";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                            readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                            readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                            readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                            readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                            readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                            readonly force_package: "#/components/schemas/ActionForcePackage";
                            readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                            readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                            readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                            readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                            readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shipping_rule_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shipping Rule ID provided when creating";
                };
            };
            readonly required: readonly ["shipping_rule_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Shipping Rule detail";
            readonly additionalProperties: false;
            readonly properties: {
                readonly shipping_rule: {
                    readonly type: "object";
                    readonly description: "Shipping Rules";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Shipping Rule name";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Shipping Rule description";
                        };
                        readonly priority: {
                            readonly type: "integer";
                            readonly description: "The smaller value represent the higher priority. High priority shipping rule would be execute first.";
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Turn on or turn off this shipping rule";
                        };
                        readonly accessible: {
                            readonly type: "boolean";
                            readonly description: "Based on current subscription plan. Return false if current subscription do not own shipping rule features.";
                        };
                        readonly checkout_restrictive: {
                            readonly type: "boolean";
                        };
                        readonly conditions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly match_country: "#/components/schemas/ConditionMatchCountry";
                                        readonly match_all: "#/components/schemas/ConditionMatchAll";
                                        readonly match_category: "#/components/schemas/ConditionMatchCategory";
                                        readonly match_state: "#/components/schemas/ConditionMatchState";
                                        readonly match_zipcode: "#/components/schemas/ConditionMatchZipcode";
                                        readonly match_sku: "#/components/schemas/ConditionMatchSku";
                                        readonly match_platform_name: "#/components/schemas/ConditionMatchPlatformName";
                                        readonly match_store: "#/components/schemas/ConditionMatchStore";
                                        readonly match_buyer_selected_courier_name: "#/components/schemas/ConditionMatchBuyerSelectedCourierName";
                                        readonly match_items_count: "#/components/schemas/ConditionMatchItemsCount";
                                        readonly match_selling_price: "#/components/schemas/ConditionMatchSellingPrice";
                                        readonly match_weight: "#/components/schemas/ConditionMatchWeight";
                                        readonly include_order_tag_name: "#/components/schemas/ConditionIncludeOrderTagName";
                                    };
                                };
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination country of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_country"];
                                            readonly description: "`match_country`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["country_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly country_ids: {
                                                    readonly type: "array";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                                        readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches all orders";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_all"];
                                            readonly description: "`match_all`";
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches orders containing specific categories";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_category"];
                                            readonly description: "`match_category`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["category_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly category_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of category IDs based on Category API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination state of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_state"];
                                            readonly description: "`match_state`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["states"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly states: {
                                                    readonly type: "array";
                                                    readonly description: "List of country ID + state abbr based on State API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["39-AB"];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches the destination zipcode of the orders";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_zipcode"];
                                            readonly description: "`match_zipcode`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "zipcodes"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["is_any_of", "is_none_of", "starts_with"];
                                                    readonly description: "`is_any_of` `is_none_of` `starts_with`";
                                                };
                                                readonly zipcodes: {
                                                    readonly type: "array";
                                                    readonly description: "List of zipcodes";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches items SKU";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_sku"];
                                            readonly description: "`match_sku`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_sku"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items SKU\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly shipment_items_sku: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches platform";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_platform_name"];
                                            readonly description: "`match_platform_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["platform_names"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly platform_names: {
                                                    readonly type: "array";
                                                    readonly description: "List of platform name base on Shipping Rule Platform API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches store";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_store"];
                                            readonly description: "`match_store`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["store_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly store_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of store IDs base on Store API.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches input courier name. This text is compared to the shipping solution options offered to buyers by your e-commerce store. This condition will not apply if you have setup our Checkout plugin in your store.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_buyer_selected_courier_name"];
                                            readonly description: "`match_buyer_selected_courier_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "buyer_selected_courier_name"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "operator for filtering couriers\n\n`contains` `does_not_contain` `is_exactly`";
                                                    readonly enum: readonly ["contains", "does_not_contain", "is_exactly"];
                                                };
                                                readonly buyer_selected_courier_name: {
                                                    readonly description: "The courier name is determined and set in your e-commerce store before syncing the order to EasyShip.";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order items count";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_items_count"];
                                            readonly description: "`match_items_count`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "shipment_items_count"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing items count\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly shipment_items_count: {
                                                    readonly type: "integer";
                                                    readonly description: "Items count";
                                                    readonly minimum: 0;
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order's selling price";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_selling_price"];
                                            readonly description: "`match_selling_price`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value", "currency"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order's selling price\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly value: {
                                                    readonly type: "number";
                                                    readonly description: "Selling price";
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                                                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                                                    readonly examples: readonly ["USD"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order weight";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["match_weight"];
                                            readonly description: "`match_weight`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "total_actual_weight"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operator for comparing order weight\n\n`greater_than` `greater_than_or_equal_to` `less_than` `less_than_or_equal_to` `equal_to`";
                                                    readonly enum: readonly ["greater_than", "greater_than_or_equal_to", "less_than", "less_than_or_equal_to", "equal_to"];
                                                };
                                                readonly total_actual_weight: {
                                                    readonly type: "number";
                                                    readonly description: "LB or KG based on country setting.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Condition that matches order tags";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["include_order_tag_name"];
                                            readonly description: "`include_order_tag_name`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["order_tag_list"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly order_tag_list: {
                                                    readonly type: "array";
                                                    readonly description: "Tag names based on Tag API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                            };
                        };
                        readonly actions: {
                            readonly type: "array";
                            readonly minItems: 1;
                            readonly items: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Never add specific courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_never_courier_service"];
                                            readonly description: "`add_never_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use preferred courier services";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_preferred_courier_service"];
                                            readonly description: "`add_preferred_courier_service`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["preferred_courier_service_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly preferred_courier_service_ids: {
                                                    readonly type: "array";
                                                    readonly description: "List of courier service IDs based on Courier Service API";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Taxes & duties";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_incoterms"];
                                            readonly description: "`force_incoterms`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["incoterms"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly incoterms: {
                                                    readonly type: "string";
                                                    readonly description: "\"DDP\": \"Pre-paid (included in shipping cost)\"<br>\n\"DDU\": \"Post-paid (not included in shipping cost)\"<br>\n\"DDU_and_Best_DDP\": \"Offer 3 post-paid and 1 pre-paid shipping options (for checkout only)\"<br>\n\"DDP_and_Best_DDU\": \"Offer 1 post-paid and 3 pre-paid shipping options\n\n\n`DDP` `DDU` `DDU_and_Best_DDP` `DDP_and_Best_DDU`";
                                                    readonly enum: readonly ["DDP", "DDU", "DDU_and_Best_DDP", "DDP_and_Best_DDU"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Sort couriers by total_charge, delivery_time_rank or value_for_money_rank";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_sort_by"];
                                            readonly description: "`force_sort_by`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["sort_by"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly sort_by: {
                                                    readonly type: "string";
                                                    readonly description: "total_charge: Cheapest\ndelivery_time_rank: Fastest\nvalue_for_money_rank: Best value for money\n\n\n`total_charge` `delivery_time_rank` `value_for_money_rank`";
                                                    readonly enum: readonly ["total_charge", "delivery_time_rank", "value_for_money_rank"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Force applying insurance";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_insurance"];
                                            readonly description: "`force_insurance`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["insured"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly insured: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Filter couriers by tracking quality\n\n**Note:** this option is very restrictive and you may not see rates. Please make sure to verify the items selected.\n";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_tracking_rating"];
                                            readonly description: "`force_tracking_rating`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_tracking_rating"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_tracking_rating: {
                                                    readonly type: "array";
                                                    readonly description: "List of tracking ratings to use\n\nFor example: to filter out couriers with `limited` or `basic` tracking you'd set `force_tracking_rating` to `[2, 3]`\n";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly type: "integer";
                                                        readonly description: "0: limited \n1: basic \n2: regular \n3: excellent\n\n\n`1` `2` `3`";
                                                        readonly enum: readonly [0, 1, 2, 3];
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Use package";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_package"];
                                            readonly description: "`force_package`";
                                        };
                                        readonly options: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["force_box_id"];
                                                readonly properties: {
                                                    readonly force_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'box'.";
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["force_flat_rate_box_id"];
                                                readonly properties: {
                                                    readonly force_flat_rate_box_id: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Box ID based on Box API. Box type is 'flat_rate_box'.";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Exclude specified boxes";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["reject_packages"];
                                            readonly description: "`reject_packages`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["never_package_ids"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly never_package_ids: {
                                                    readonly type: "array";
                                                    readonly description: "Box IDs based on Box API.";
                                                    readonly minItems: 1;
                                                    readonly items: {
                                                        readonly format: "uuid";
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Declare destination address as residential.";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_residential_surcharge"];
                                            readonly description: "`force_residential_surcharge`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["set_as_residential"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly set_as_residential: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Ship From";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_ship_from"];
                                            readonly description: "`force_ship_from`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["origin_address_id"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly origin_address_id: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly description: "Address ID based on Address API.";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Return labels for domestic shipments";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["force_automated_return_requested"];
                                            readonly description: "`force_automated_return_requested`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["force_automated_return_requested"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly force_automated_return_requested: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Restrict courier services based on delivery time";
                                    readonly required: readonly ["type", "options"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["add_forced_delivery_time"];
                                            readonly description: "`add_forced_delivery_time`";
                                        };
                                        readonly options: {
                                            readonly type: "object";
                                            readonly required: readonly ["operator", "value"];
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly operator: {
                                                    readonly type: "string";
                                                    readonly description: "Operators for comparison include less than (<), less than or equal to (<=), greater than or equal to (>=), and greater than (>)\n\n`less_than` `less_than_or_equal_to` `greater_than_or_equal_to` `greater_than`";
                                                    readonly enum: readonly ["less_than", "less_than_or_equal_to", "greater_than_or_equal_to", "greater_than"];
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly description: "How many days";
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly add_never_courier_service: "#/components/schemas/ActionAddNeverCourier";
                                        readonly add_preferred_courier_service: "#/components/schemas/ActionAddPreferredCourier";
                                        readonly force_incoterms: "#/components/schemas/ActionForceIncoterms";
                                        readonly force_sort_by: "#/components/schemas/ActionForceSortBy";
                                        readonly force_insurance: "#/components/schemas/ActionForceInsurance";
                                        readonly force_tracking_rating: "#/components/schemas/ActionForceTrackingRating";
                                        readonly force_package: "#/components/schemas/ActionForcePackage";
                                        readonly reject_packages: "#/components/schemas/ActionRejectPackages";
                                        readonly force_residential_surcharge: "#/components/schemas/ActionForceResidentialSurcharge";
                                        readonly force_ship_from: "#/components/schemas/ActionForceShipFrom";
                                        readonly force_automated_return_requested: "#/components/schemas/ActionForceAutomatedReturnRequested";
                                        readonly add_forced_delivery_time: "#/components/schemas/ActionAddForcedDeliveryTime";
                                    };
                                };
                            };
                        };
                        readonly created_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly updated_at: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const StatesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of states";
            readonly additionalProperties: false;
            readonly properties: {
                readonly states: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "State";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "State ID";
                                readonly examples: readonly [1];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "State name";
                                readonly examples: readonly ["Alabama"];
                            };
                            readonly abbr: {
                                readonly type: "string";
                                readonly description: "2 letter abbreviations state name";
                                readonly examples: readonly ["AL"];
                            };
                            readonly country_id: {
                                readonly type: "integer";
                                readonly description: "Country ID based on Countries API\n\n`1` `2` `3` `4` `5` `6` `7` `8` `9` `10` `11` `12` `13` `14` `15` `16` `17` `18` `19` `20` `21` `22` `23` `24` `25` `26` `27` `28` `29` `30` `31` `32` `33` `34` `35` `36` `37` `38` `39` `40` `41` `42` `43` `44` `45` `46` `47` `48` `49` `50` `51` `52` `53` `54` `55` `56` `57` `58` `59` `60` `61` `62` `63` `64` `65` `66` `67` `68` `69` `70` `71` `72` `73` `74` `75` `76` `77` `78` `79` `80` `81` `82` `83` `84` `85` `86` `87` `88` `89` `90` `91` `92` `93` `94` `95` `96` `97` `98` `99` `100` `101` `102` `103` `104` `105` `106` `107` `108` `109` `110` `111` `112` `113` `114` `115` `116` `117` `118` `119` `120` `121` `122` `123` `124` `125` `126` `127` `128` `129` `130` `131` `132` `133` `134` `135` `136` `137` `138` `139` `140` `141` `142` `143` `144` `145` `146` `147` `148` `149` `150` `151` `152` `153` `154` `155` `156` `157` `158` `159` `160` `161` `162` `163` `164` `165` `166` `167` `168` `169` `170` `171` `172` `173` `174` `175` `176` `177` `178` `179` `180` `181` `182` `183` `184` `185` `186` `187` `188` `189` `190` `191` `192` `193` `194` `195` `196` `197` `198` `199` `200` `201` `202` `203` `204` `205` `206` `207` `208` `209` `210` `211` `212` `213` `214` `215` `216` `217` `218` `219` `220` `221` `222` `223` `224` `225` `226` `227` `228` `229` `230` `231` `232` `233` `234` `235` `236` `237` `238` `239` `240` `241` `242` `243` `244` `245` `246` `247` `248` `249` `250`";
                                readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const StoresIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of stores";
            readonly additionalProperties: false;
            readonly properties: {
                readonly stores: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Store";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Store ID";
                            };
                            readonly company_id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Company ID";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Store name";
                            };
                            readonly platform: {
                                readonly type: "object";
                                readonly description: "Platform";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Platform name";
                                    };
                                };
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly default: true;
                            };
                            readonly last_synced_at: {
                                readonly type: "string";
                            };
                            readonly created_at: {
                                readonly type: "string";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const StripesShow: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Stripe public api key";
            readonly additionalProperties: false;
            readonly properties: {
                readonly stripe: {
                    readonly type: "object";
                    readonly description: "Easyship Stripe public information";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly public_key: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TagsCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Tags";
        readonly additionalProperties: false;
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Tag name";
                readonly examples: readonly ["test"];
            };
        };
        readonly required: readonly ["name"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Single tag";
            readonly additionalProperties: false;
            readonly properties: {
                readonly tag: {
                    readonly type: "object";
                    readonly description: "Tags";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Tag name";
                        };
                    };
                    readonly required: readonly ["name"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TagsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly keyword: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by keywords. Return tag name include keyword.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of tags";
            readonly additionalProperties: false;
            readonly properties: {
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Tags";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Tag name";
                            };
                        };
                        readonly required: readonly ["name"];
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxesAndDutiesCalculate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Tax and duty calculation request with Country IDs (based on Countries API)";
            readonly additionalProperties: false;
            readonly required: readonly ["destination_country_id", "origin_country_id", "insurance_fee", "shipment_charge", "items"];
            readonly properties: {
                readonly destination_country_id: {
                    readonly type: "integer";
                    readonly description: "Country ID based on Countries API";
                    readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                };
                readonly origin_country_id: {
                    readonly type: "integer";
                    readonly description: "Country ID based on Countries API";
                    readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                };
                readonly insurance_fee: {
                    readonly type: "number";
                    readonly description: "Insurance fee of a shipment";
                };
                readonly shipment_charge: {
                    readonly type: "number";
                    readonly description: "Delivery fee of a shipment";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                    readonly examples: readonly ["USD"];
                };
                readonly items: {
                    readonly type: "array";
                    readonly description: "Every element represents a collection of items grouped by HS code";
                    readonly minItems: 1;
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly required: readonly ["duty_origin_country_id", "hs_code", "customs_value"];
                        readonly properties: {
                            readonly duty_origin_country_id: {
                                readonly type: "integer";
                                readonly description: "Country ID based on Countries API";
                                readonly enum: readonly [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
                            };
                            readonly hs_code: {
                                readonly type: "string";
                                readonly description: "Eight-digit WTO HS code with last two digits as `00` (e.g. `42029100`).";
                                readonly pattern: "^\\d{8}$";
                            };
                            readonly customs_value: {
                                readonly type: "number";
                                readonly description: "Total value of this HS code group";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Tax and duty calculation request with country alpha2 codes";
            readonly additionalProperties: false;
            readonly required: readonly ["destination_country_alpha2", "origin_country_alpha2", "insurance_fee", "shipment_charge", "items"];
            readonly properties: {
                readonly destination_country_alpha2: {
                    readonly type: "string";
                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                };
                readonly origin_country_alpha2: {
                    readonly type: "string";
                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                };
                readonly insurance_fee: {
                    readonly type: "number";
                    readonly description: "Insurance fee of a shipment";
                };
                readonly shipment_charge: {
                    readonly type: "number";
                    readonly description: "Delivery fee of a shipment";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                    readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)";
                    readonly examples: readonly ["USD"];
                };
                readonly items: {
                    readonly type: "array";
                    readonly description: "Every element represents a collection of items grouped by HS code";
                    readonly minItems: 1;
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: false;
                        readonly required: readonly ["duty_origin_country_alpha2", "hs_code", "customs_value"];
                        readonly properties: {
                            readonly duty_origin_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly hs_code: {
                                readonly type: "string";
                                readonly description: "Eight-digit WTO HS code with last two digits as `00` (e.g. `42029100`).";
                                readonly pattern: "^\\d{8}$";
                            };
                            readonly customs_value: {
                                readonly type: "number";
                                readonly description: "Total value of this HS code group";
                            };
                        };
                    };
                };
            };
        }];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly tax_and_duty: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly required: readonly ["tax", "duty", "currency"];
                    readonly properties: {
                        readonly tax: {
                            readonly type: "number";
                            readonly description: "Taxes or other fees that are applied to the item being purchased.";
                        };
                        readonly duty: {
                            readonly type: "number";
                            readonly description: "Tariffs or fees applied to an imported or exported item.";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "BTC", "JEP", "EEK", "GHC", "MTL", "TMM", "YEN", "ZWD", "ZWL", "ZWN", "ZWR"];
                            readonly description: "ISO-4217 three-letter alphabetic currency code (e.g. USD, EUR, GBP)\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SKK` `SLL` `SOS` `SRD` `SSP` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMW` `BTC` `JEP` `EEK` `GHC` `MTL` `TMM` `YEN` `ZWD` `ZWL` `ZWN` `ZWR`";
                            readonly examples: readonly ["USD"];
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TrackingsCreate: {
    readonly body: {
        readonly type: "object";
        readonly description: "Tracking Create params";
        readonly required: readonly ["tracking_number"];
        readonly properties: {
            readonly tracking_number: {
                readonly type: "string";
                readonly examples: readonly ["13213213"];
            };
            readonly courier_service_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "unique identifier for a courier service";
            };
            readonly courier_service_name: {
                readonly type: "string";
                readonly description: "Name of the courier service. Required if `courier_service_id` is not provided.\nFor courier services that Easyship doesn't support label generation, please retrieve the name using `GET /trackings/external_courier_services`\n";
            };
            readonly platform_order_number: {
                readonly type: "string";
                readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                readonly maximum: 200;
            };
            readonly origin_address_id: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "ID of origin address. Required if the `origin_address` object is not provided.";
            };
            readonly origin_address: {
                readonly type: "object";
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                        readonly maximum: 200;
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Leave it null or 0 if the country does not have postal codes. Mandatory for these countries: AD, AF, AI, AL, AM, AQ, AR, AS, AT, AU, AX, AZ, BA, BB, BD, BE, BG, BL, BM, BN, BQ, BR, BT, BV, BY, CA, CC, CH, CL, CN, CO, CR, CU, CV, CX, CY, CZ, DE, DK, DO, DZ, EC, EE, EG, EH, ES, ET, FI, FK, FM, FO, FR, GA, GB, GE, GF, GG, GI, GL, GP, GR, GS, GT, GU, GW, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JO, JP, KG, KH, KR, KW, KY, KZ, LA, LB, LI, LK, LR, LS, LT, LU, LV, MA, MC, MD, ME, MF, MG, MH, MK, MM, MN, MP, MQ, MT, MV, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NZ, OM, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, RE, RO, RS, RU, SD, SE, SG, SH, SI, SJ, SK, SM, SN, SS, SV, SX, SZ, TC, TD, TH, TJ, TM, TN, TR, TW, UA, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, WF, WS, YT, ZA, ZM.";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 27;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 22;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name\"";
                        readonly maximum: 50;
                    };
                };
            };
            readonly destination_address: {
                readonly type: "object";
                readonly required: readonly ["line_1", "state", "city", "postal_code", "contact_name", "contact_email", "contact_phone"];
                readonly additionalProperties: false;
                readonly properties: {
                    readonly line_1: {
                        readonly type: "string";
                        readonly description: "First line of the street address";
                        readonly maximum: 35;
                    };
                    readonly line_2: {
                        readonly type: "string";
                        readonly description: "Second line of the street address";
                        readonly maximum: 35;
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly maximum: 200;
                        readonly description: "State, Province, or other top-level administrative region. Mandatory for these countries: AU, CA, CN, ID, MX, MY, TH, US, VN. Use abbreviations for naming the state if possible (2 letters for the US/CA, 2 or 3 letters for AU). For countries using provinces, use the full province names.";
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "City or Suburb";
                        readonly maximum: 200;
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "Postal code. Mandatory for most countries (if not applicable, for example Hong Kong, leave null or 0)";
                    };
                    readonly country_alpha2: {
                        readonly type: "string";
                        readonly description: "Country Code in Alpha-2 format (ISO 3166-1)";
                        readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                    };
                    readonly company_name: {
                        readonly type: "string";
                        readonly description: "The company or organization at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "The full name of a person at the address";
                        readonly maximum: 50;
                    };
                    readonly contact_phone: {
                        readonly type: "string";
                        readonly description: "Phone number used to reach the person in contact_name (may or may not be SMS-ready)";
                        readonly maximum: 20;
                    };
                    readonly contact_email: {
                        readonly type: "string";
                        readonly format: "email";
                        readonly description: "Email address used to reach the person in `contact_name`";
                        readonly maximum: 50;
                    };
                    readonly delivery_instructions: {
                        readonly type: "string";
                        readonly description: "Delivery instructions for the address, see [Delivery Instructions](https://developers.easyship.com/page/delivery-instructions).";
                        readonly maximum: 200;
                    };
                };
            };
            readonly items: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly required: readonly ["description"];
                    readonly properties: {
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly quantity: {
                            readonly type: "number";
                            readonly description: "Quantity of the item. It will be set to 1 if not provided.";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Single tracking with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly tracking: {
                    readonly type: "object";
                    readonly description: "Tracking details";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly tracking_number: {
                            readonly type: "string";
                            readonly description: "Reference provided by the courier for this leg";
                        };
                        readonly source: {
                            readonly type: "string";
                            readonly enum: readonly ["easyship", "external"];
                            readonly description: "`easyship` `external`";
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service";
                                };
                            };
                        };
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly platform_order_number: {
                            readonly type: "string";
                            readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                            readonly maximum: 200;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly destination_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly tracking_state: {
                            readonly type: "string";
                            readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                            readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The latest event status\n\n`Created` `Cancelled by Company` `Cancelled by Easyship` `Awaiting Pickup at Seller` `Assigned Pickup` `Picked Up at Seller` `Received at Fulfillment Center` `Verified` `Packed` `Pending Tracking Event` `Tracking Info Received` `In Transit to Customer` `Out for Delivery` `Failed Delivery Attempt` `Delivered` `Exception` `No Recent Tracking Updates` `Shipped (No Tracking Provided)` `In Transit to Consolidation Center` `Arrived at Consolidation Center` `Processing at Consolidation Center` `Delivery Expected (End of Updates)` `Shipped` `Incomplete` `Lost by Courier` `To be returned` `Archived` `Draft` `Cancelled` `Label Pending` `Label Ready` `Label Printed` `Pickup Scheduled` `Pickup Complete` `Cancelled (No Stock)` `Handed Over to Courier` `Label Rejected` `Drop-off Complete` `Dispatched from Sorting Hub` `Received at Local Fulfilment Center` `Awaiting Pickup Confirmation by Courier` `Pickup Request Failed` `Uncancelled` `Discarded Draft` `Liquidated` `Awaiting Confirmation by Warehouse` `Order Failed to Create at Warehouse` `Order Received by Warehouse` `Order Packed` `Order Collected` `Backorder (No Stock)` `Awaiting Dispatch by Warehouse` `Cancellation Requested` `Cancellation Request Failed`";
                            readonly enum: readonly ["Created", "Cancelled by Company", "Cancelled by Easyship", "Awaiting Pickup at Seller", "Assigned Pickup", "Picked Up at Seller", "Received at Fulfillment Center", "Verified", "Packed", "Pending Tracking Event", "Tracking Info Received", "In Transit to Customer", "Out for Delivery", "Failed Delivery Attempt", "Delivered", "Exception", "No Recent Tracking Updates", "Shipped (No Tracking Provided)", "In Transit to Consolidation Center", "Arrived at Consolidation Center", "Processing at Consolidation Center", "Delivery Expected (End of Updates)", "Shipped", "Incomplete", "Lost by Courier", "To be returned", "Archived", "Draft", "Cancelled", "Label Pending", "Label Ready", "Label Printed", "Pickup Scheduled", "Pickup Complete", "Cancelled (No Stock)", "Handed Over to Courier", "Label Rejected", "Drop-off Complete", "Dispatched from Sorting Hub", "Received at Local Fulfilment Center", "Awaiting Pickup Confirmation by Courier", "Pickup Request Failed", "Uncancelled", "Discarded Draft", "Liquidated", "Awaiting Confirmation by Warehouse", "Order Failed to Create at Warehouse", "Order Received by Warehouse", "Order Packed", "Order Collected", "Backorder (No Stock)", "Awaiting Dispatch by Warehouse", "Cancellation Requested", "Cancellation Request Failed"];
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "Tracking page URL. If certain condition is met, it will be empty.";
                        };
                        readonly eta_date: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TrackingsDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly tracking_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Tracking ID";
                };
            };
            readonly required: readonly ["tracking_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TrackingsExternalCourierServicesIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly origin_country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by origin country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly name: {
                    readonly type: "string";
                    readonly examples: readonly ["DHL eCommerce"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by courier service name";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of External Courier Services";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier_services: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Tracking only Courier Service";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Human-readable name of the courier";
                            };
                            readonly slug: {
                                readonly type: "string";
                                readonly description: "Identifier for tracking service";
                            };
                            readonly origin_country_alpha2: {
                                readonly type: "array";
                                readonly minItems: 0;
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                    readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                                };
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TrackingsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly origin_country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["HK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by origin country using alpha2 format";
                };
                readonly destination_country_alpha2: {
                    readonly type: "string";
                    readonly examples: readonly ["UK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by destination country using alpha2 format";
                };
                readonly source: {
                    readonly type: "string";
                    readonly examples: readonly ["easyship"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by the source of record. Only \"easyship\" and \"external\" that are acceptable";
                };
                readonly tracking_state: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                    readonly examples: readonly ["active"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by the state of the tracking.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of third party trackings";
            readonly additionalProperties: false;
            readonly properties: {
                readonly trackings: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Tracking details";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                            };
                            readonly tracking_number: {
                                readonly type: "string";
                                readonly description: "Reference provided by the courier for this leg";
                            };
                            readonly source: {
                                readonly type: "string";
                                readonly enum: readonly ["easyship", "external"];
                                readonly description: "`easyship` `external`";
                            };
                            readonly courier_service: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly umbrella_name: {
                                        readonly type: "string";
                                        readonly description: "Human-readable name for the courier company that offers this service";
                                    };
                                };
                            };
                            readonly easyship_shipment_id: {
                                readonly type: "string";
                                readonly pattern: "^ES\\w{2}\\d{7,}$";
                                readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                            };
                            readonly platform_order_number: {
                                readonly type: "string";
                                readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                                readonly maximum: 200;
                            };
                            readonly origin_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly destination_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                            readonly tracking_state: {
                                readonly type: "string";
                                readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                                readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The latest event status\n\n`Created` `Cancelled by Company` `Cancelled by Easyship` `Awaiting Pickup at Seller` `Assigned Pickup` `Picked Up at Seller` `Received at Fulfillment Center` `Verified` `Packed` `Pending Tracking Event` `Tracking Info Received` `In Transit to Customer` `Out for Delivery` `Failed Delivery Attempt` `Delivered` `Exception` `No Recent Tracking Updates` `Shipped (No Tracking Provided)` `In Transit to Consolidation Center` `Arrived at Consolidation Center` `Processing at Consolidation Center` `Delivery Expected (End of Updates)` `Shipped` `Incomplete` `Lost by Courier` `To be returned` `Archived` `Draft` `Cancelled` `Label Pending` `Label Ready` `Label Printed` `Pickup Scheduled` `Pickup Complete` `Cancelled (No Stock)` `Handed Over to Courier` `Label Rejected` `Drop-off Complete` `Dispatched from Sorting Hub` `Received at Local Fulfilment Center` `Awaiting Pickup Confirmation by Courier` `Pickup Request Failed` `Uncancelled` `Discarded Draft` `Liquidated` `Awaiting Confirmation by Warehouse` `Order Failed to Create at Warehouse` `Order Received by Warehouse` `Order Packed` `Order Collected` `Backorder (No Stock)` `Awaiting Dispatch by Warehouse` `Cancellation Requested` `Cancellation Request Failed`";
                                readonly enum: readonly ["Created", "Cancelled by Company", "Cancelled by Easyship", "Awaiting Pickup at Seller", "Assigned Pickup", "Picked Up at Seller", "Received at Fulfillment Center", "Verified", "Packed", "Pending Tracking Event", "Tracking Info Received", "In Transit to Customer", "Out for Delivery", "Failed Delivery Attempt", "Delivered", "Exception", "No Recent Tracking Updates", "Shipped (No Tracking Provided)", "In Transit to Consolidation Center", "Arrived at Consolidation Center", "Processing at Consolidation Center", "Delivery Expected (End of Updates)", "Shipped", "Incomplete", "Lost by Courier", "To be returned", "Archived", "Draft", "Cancelled", "Label Pending", "Label Ready", "Label Printed", "Pickup Scheduled", "Pickup Complete", "Cancelled (No Stock)", "Handed Over to Courier", "Label Rejected", "Drop-off Complete", "Dispatched from Sorting Hub", "Received at Local Fulfilment Center", "Awaiting Pickup Confirmation by Courier", "Pickup Request Failed", "Uncancelled", "Discarded Draft", "Liquidated", "Awaiting Confirmation by Warehouse", "Order Failed to Create at Warehouse", "Order Received by Warehouse", "Order Packed", "Order Collected", "Backorder (No Stock)", "Awaiting Dispatch by Warehouse", "Cancellation Requested", "Cancellation Request Failed"];
                            };
                            readonly tracking_page_url: {
                                readonly type: "string";
                                readonly format: "uri";
                                readonly description: "Tracking page URL. If certain condition is met, it will be empty.";
                            };
                            readonly eta_date: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TrackingsListSupportedCouriers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly origin_country_alpha2: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["US", "UK"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by origin country code: Alpha-2 format (ISO 3166-1).";
                };
                readonly umbrella_name: {
                    readonly type: "string";
                    readonly examples: readonly ["DHL"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter records by courier umbrella name";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Supported Courier Services";
            readonly additionalProperties: false;
            readonly properties: {
                readonly courier_services: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Tracking Courier Service";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name of the courier service";
                            };
                            readonly umbrella_name: {
                                readonly type: "string";
                                readonly description: "Human-readable name for the courier company that offers this service.";
                            };
                            readonly origin_country_alpha2: {
                                readonly type: "string";
                                readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TrackingsShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly tracking_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Tracking ID";
                };
            };
            readonly required: readonly ["tracking_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Single tracking with all its details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly tracking: {
                    readonly type: "object";
                    readonly description: "Tracking details";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                        };
                        readonly tracking_number: {
                            readonly type: "string";
                            readonly description: "Reference provided by the courier for this leg";
                        };
                        readonly source: {
                            readonly type: "string";
                            readonly enum: readonly ["easyship", "external"];
                            readonly description: "`easyship` `external`";
                        };
                        readonly courier_service: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly umbrella_name: {
                                    readonly type: "string";
                                    readonly description: "Human-readable name for the courier company that offers this service";
                                };
                            };
                        };
                        readonly easyship_shipment_id: {
                            readonly type: "string";
                            readonly pattern: "^ES\\w{2}\\d{7,}$";
                            readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                        };
                        readonly platform_order_number: {
                            readonly type: "string";
                            readonly description: "Order number that was either copied from an order synced from an ecommerce platform or manually edited in Easyship's order from";
                            readonly maximum: 200;
                        };
                        readonly origin_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly destination_country_alpha2: {
                            readonly type: "string";
                            readonly description: "Country Code in Alpha-2 format (ISO 3166-1)\n\n`AD` `AE` `AF` `AG` `AI` `AL` `AM` `AN` `AO` `AQ` `AR` `AS` `AT` `AU` `AW` `AX` `AZ` `BA` `BB` `BD` `BE` `BF` `BG` `BH` `BI` `BJ` `BL` `BM` `BN` `BO` `BQ` `BR` `BS` `BT` `BV` `BW` `BY` `BZ` `CA` `CC` `CD` `CF` `CG` `CH` `CI` `CK` `CL` `CM` `CN` `CO` `CR` `CU` `CV` `CW` `CX` `CY` `CZ` `DE` `DJ` `DK` `DM` `DO` `DZ` `EC` `EE` `EG` `EH` `ER` `ES` `ET` `FI` `FJ` `FK` `FM` `FO` `FR` `GA` `GB` `GD` `GE` `GF` `GG` `GH` `GI` `GL` `GM` `GN` `GP` `GQ` `GR` `GS` `GT` `GU` `GW` `GY` `HK` `HM` `HN` `HR` `HT` `HU` `ID` `IE` `IL` `IM` `IN` `IO` `IQ` `IR` `IS` `IT` `JE` `JM` `JO` `JP` `KE` `KG` `KH` `KI` `KM` `KN` `KP` `KR` `KW` `KY` `KZ` `LA` `LB` `LC` `LI` `LK` `LR` `LS` `LT` `LU` `LV` `LY` `MA` `MC` `MD` `ME` `MF` `MG` `MH` `MK` `ML` `MM` `MN` `MO` `MP` `MQ` `MR` `MS` `MT` `MU` `MV` `MW` `MX` `MY` `MZ` `NA` `NC` `NE` `NF` `NG` `NI` `NL` `NO` `NP` `NR` `NU` `NZ` `OM` `PA` `PE` `PF` `PG` `PH` `PK` `PL` `PM` `PN` `PR` `PS` `PT` `PW` `PY` `QA` `RE` `RO` `RS` `RU` `RW` `SA` `SB` `SC` `SD` `SE` `SG` `SH` `SI` `SJ` `SK` `SL` `SM` `SN` `SO` `SR` `SS` `ST` `SV` `SX` `SY` `SZ` `TC` `TD` `TF` `TG` `TH` `TJ` `TK` `TL` `TM` `TN` `TO` `TR` `TT` `TV` `TW` `TZ` `UA` `UG` `UM` `US` `UY` `UZ` `VA` `VC` `VE` `VG` `VI` `VN` `VU` `WF` `WS` `YE` `YT` `ZA` `ZM` `ZW`";
                            readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                        };
                        readonly tracking_state: {
                            readonly type: "string";
                            readonly enum: readonly ["created", "active", "pending", "completed", "overwritten_by_admin"];
                            readonly description: "The current state of the tracking\n\n`created` `active` `pending` `completed` `overwritten_by_admin`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The latest event status\n\n`Created` `Cancelled by Company` `Cancelled by Easyship` `Awaiting Pickup at Seller` `Assigned Pickup` `Picked Up at Seller` `Received at Fulfillment Center` `Verified` `Packed` `Pending Tracking Event` `Tracking Info Received` `In Transit to Customer` `Out for Delivery` `Failed Delivery Attempt` `Delivered` `Exception` `No Recent Tracking Updates` `Shipped (No Tracking Provided)` `In Transit to Consolidation Center` `Arrived at Consolidation Center` `Processing at Consolidation Center` `Delivery Expected (End of Updates)` `Shipped` `Incomplete` `Lost by Courier` `To be returned` `Archived` `Draft` `Cancelled` `Label Pending` `Label Ready` `Label Printed` `Pickup Scheduled` `Pickup Complete` `Cancelled (No Stock)` `Handed Over to Courier` `Label Rejected` `Drop-off Complete` `Dispatched from Sorting Hub` `Received at Local Fulfilment Center` `Awaiting Pickup Confirmation by Courier` `Pickup Request Failed` `Uncancelled` `Discarded Draft` `Liquidated` `Awaiting Confirmation by Warehouse` `Order Failed to Create at Warehouse` `Order Received by Warehouse` `Order Packed` `Order Collected` `Backorder (No Stock)` `Awaiting Dispatch by Warehouse` `Cancellation Requested` `Cancellation Request Failed`";
                            readonly enum: readonly ["Created", "Cancelled by Company", "Cancelled by Easyship", "Awaiting Pickup at Seller", "Assigned Pickup", "Picked Up at Seller", "Received at Fulfillment Center", "Verified", "Packed", "Pending Tracking Event", "Tracking Info Received", "In Transit to Customer", "Out for Delivery", "Failed Delivery Attempt", "Delivered", "Exception", "No Recent Tracking Updates", "Shipped (No Tracking Provided)", "In Transit to Consolidation Center", "Arrived at Consolidation Center", "Processing at Consolidation Center", "Delivery Expected (End of Updates)", "Shipped", "Incomplete", "Lost by Courier", "To be returned", "Archived", "Draft", "Cancelled", "Label Pending", "Label Ready", "Label Printed", "Pickup Scheduled", "Pickup Complete", "Cancelled (No Stock)", "Handed Over to Courier", "Label Rejected", "Drop-off Complete", "Dispatched from Sorting Hub", "Received at Local Fulfilment Center", "Awaiting Pickup Confirmation by Courier", "Pickup Request Failed", "Uncancelled", "Discarded Draft", "Liquidated", "Awaiting Confirmation by Warehouse", "Order Failed to Create at Warehouse", "Order Received by Warehouse", "Order Packed", "Order Collected", "Backorder (No Stock)", "Awaiting Dispatch by Warehouse", "Cancellation Requested", "Cancellation Request Failed"];
                        };
                        readonly tracking_page_url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "Tracking page URL. If certain condition is met, it will be empty.";
                        };
                        readonly eta_date: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TransactionsIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
                readonly from_date: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Beginning of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly to_date: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly examples: readonly ["2023-02-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End of date. Only accept `YYYY-MM-DD` format.";
                };
                readonly days_from_now: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [7];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of days until current date.";
                };
                readonly easyship_shipment_id: {
                    readonly type: "string";
                    readonly pattern: "^ES\\w{2}\\d{7,}$";
                    readonly description: "Easyship Shipment ID";
                    readonly examples: readonly ["ESSG10006001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly adjustment: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Whether the transaction record is an adjustment or not";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["shipment", "pickup", "claim", "policy", "payment"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Type of transaction record";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly description: "List of Transaction Records";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly transaction_records: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "Transaction Record";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly adjustment_type: {
                                    readonly type: "string";
                                    readonly description: "Type of adjustment\n\n`Refund after Cancellation` `Remote Area Surcharge (ODA Reconciliation)` `Declared Value Revaluation (Tax Reconciliation)` `Adjustment based on Weight (Weight Reconciliation)` `Payment of Tax & Duty on behalf of Consignee` `Return Fees` `Declared Value Revaluation` `Address Correction Fee` `Refund (100%)` `Residential Area Surcharge` `Charge After Refund` `Warehouse Handling Fee` `Refund for Fixed Shipment` `Charge for Fixed Shipment` `Refund (50%)` `Oversized Surcharge` `Refund - Damaged` `Refund - Lost` `Pay On Scan` `Account Consolidation` `Others`";
                                    readonly enum: readonly ["Refund after Cancellation", "Remote Area Surcharge (ODA Reconciliation)", "Declared Value Revaluation (Tax Reconciliation)", "Adjustment based on Weight (Weight Reconciliation)", "Payment of Tax & Duty on behalf of Consignee", "Return Fees", "Declared Value Revaluation", "Address Correction Fee", "Refund (100%)", "Residential Area Surcharge", "Charge After Refund", "Warehouse Handling Fee", "Refund for Fixed Shipment", "Charge for Fixed Shipment", "Refund (50%)", "Oversized Surcharge", "Refund - Damaged", "Refund - Lost", "Pay On Scan", "Account Consolidation", "Others"];
                                };
                                readonly amount: {
                                    readonly type: "number";
                                    readonly description: "Amount of adjustment";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "Description of adjustment";
                                };
                                readonly payment_recipient: {
                                    readonly type: "string";
                                    readonly description: "Recipient of payment";
                                };
                                readonly settled_at: {
                                    readonly type: "string";
                                    readonly description: "Date and time of settlement";
                                    readonly format: "date-time";
                                };
                                readonly easyship_shipment_id: {
                                    readonly type: "string";
                                    readonly pattern: "^ES\\w{2}\\d{7,}$";
                                    readonly description: "Readable identifier prefixed with ES (Easyship) and destination country code";
                                };
                            };
                        };
                    };
                    readonly meta: {
                        readonly type: "object";
                        readonly properties: {
                            readonly pagination: {
                                readonly type: "object";
                                readonly description: "Pagination";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly next: {
                                        readonly type: "integer";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                    };
                                    readonly page: {
                                        readonly type: "integer";
                                        readonly description: "Current page";
                                    };
                                };
                            };
                            readonly request_id: {
                                readonly type: "string";
                                readonly description: "An unique ID represent the request.";
                            };
                        };
                    };
                };
            }, {
                readonly type: "string";
                readonly description: "Transaction Records in CSV format";
            }];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksActivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Create v2023_01 Webhook";
            readonly additionalProperties: false;
            readonly required: readonly ["endpoint", "event_types"];
            readonly properties: {
                readonly configuration: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly credit_balance_low: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly credit_balance_limit: {
                                    readonly type: "number";
                                    readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                };
                            };
                        };
                    };
                };
                readonly endpoint: {
                    readonly type: "string";
                    readonly format: "URI";
                };
                readonly event_types: {
                    readonly type: "array";
                    readonly minItems: 1;
                    readonly maxItems: 12;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_account_state_changed", "external_shipment_insured"];
                        readonly description: "Allowed event types";
                    };
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.";
                    readonly default: "2023-01";
                    readonly enum: readonly ["2023-01"];
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Create v2024_09 Webhook";
            readonly additionalProperties: false;
            readonly required: readonly ["endpoint", "event_types"];
            readonly properties: {
                readonly configuration: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly credit_balance_low: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly credit_balance_limit: {
                                    readonly type: "number";
                                    readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                };
                            };
                        };
                    };
                };
                readonly endpoint: {
                    readonly type: "string";
                    readonly format: "URI";
                };
                readonly event_types: {
                    readonly type: "array";
                    readonly minItems: 1;
                    readonly maxItems: 12;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_state_changed", "external_shipment_insured"];
                        readonly description: "Allowed event types";
                    };
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.";
                    readonly default: "2024-09";
                    readonly enum: readonly ["2024-09"];
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "version";
            readonly mapping: {
                readonly "2023-01": "#/components/schemas/WebhookCreate2023_01";
                readonly "2024-09": "#/components/schemas/WebhookCreate2024_09";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "Webhook details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly webhook: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "v2023_01 Webhook";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Webhook ID";
                            };
                            readonly endpoint: {
                                readonly type: "string";
                                readonly format: "URI";
                            };
                            readonly configuration: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly credit_balance_low: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly credit_balance_limit: {
                                                readonly type: "number";
                                                readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly event_types: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly maxItems: 12;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_account_state_changed", "external_shipment_insured"];
                                    readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_account_state_changed` `external_shipment_insured`";
                                };
                            };
                            readonly version: {
                                readonly type: "string";
                                readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2023-01`";
                                readonly default: "2023-01";
                                readonly enum: readonly ["2023-01"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                readonly enum: readonly ["active", "inactive", "failed"];
                            };
                            readonly secret_token: {
                                readonly type: "string";
                                readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was most recently modified";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was created in the Easyship system recently";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "v2024_09 Webhook";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Webhook ID";
                            };
                            readonly endpoint: {
                                readonly type: "string";
                                readonly format: "URI";
                            };
                            readonly configuration: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly credit_balance_low: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly credit_balance_limit: {
                                                readonly type: "number";
                                                readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly event_types: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly maxItems: 12;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_state_changed", "external_shipment_insured"];
                                    readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_state_changed` `external_shipment_insured`";
                                };
                            };
                            readonly version: {
                                readonly type: "string";
                                readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2024-09`";
                                readonly default: "2024-09";
                                readonly enum: readonly ["2024-09"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                readonly enum: readonly ["active", "inactive", "failed"];
                            };
                            readonly secret_token: {
                                readonly type: "string";
                                readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was most recently modified";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was created in the Easyship system recently";
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "version";
                        readonly mapping: {
                            readonly "2023-01": "#/components/schemas/Webhook2023_01";
                            readonly "2024-09": "#/components/schemas/Webhook2024_09";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksDeactivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number to fetch, default: `1`";
                };
                readonly per_page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of records per page to fetch, default: `20`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "List of Webhooks";
            readonly additionalProperties: false;
            readonly properties: {
                readonly webhooks: {
                    readonly type: "array";
                    readonly items: {
                        readonly oneOf: readonly [{
                            readonly type: "object";
                            readonly description: "v2023_01 Webhook";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Webhook ID";
                                };
                                readonly endpoint: {
                                    readonly type: "string";
                                    readonly format: "URI";
                                };
                                readonly configuration: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly credit_balance_low: {
                                            readonly type: "object";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly credit_balance_limit: {
                                                    readonly type: "number";
                                                    readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly event_types: {
                                    readonly type: "array";
                                    readonly minItems: 1;
                                    readonly maxItems: 12;
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_account_state_changed", "external_shipment_insured"];
                                        readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_account_state_changed` `external_shipment_insured`";
                                    };
                                };
                                readonly version: {
                                    readonly type: "string";
                                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2023-01`";
                                    readonly default: "2023-01";
                                    readonly enum: readonly ["2023-01"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                    readonly enum: readonly ["active", "inactive", "failed"];
                                };
                                readonly secret_token: {
                                    readonly type: "string";
                                    readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                                };
                                readonly updated_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the webhook was most recently modified";
                                };
                                readonly created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the webhook was created in the Easyship system recently";
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly description: "v2024_09 Webhook";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Webhook ID";
                                };
                                readonly endpoint: {
                                    readonly type: "string";
                                    readonly format: "URI";
                                };
                                readonly configuration: {
                                    readonly type: "object";
                                    readonly additionalProperties: false;
                                    readonly properties: {
                                        readonly credit_balance_low: {
                                            readonly type: "object";
                                            readonly additionalProperties: false;
                                            readonly properties: {
                                                readonly credit_balance_limit: {
                                                    readonly type: "number";
                                                    readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly event_types: {
                                    readonly type: "array";
                                    readonly minItems: 1;
                                    readonly maxItems: 12;
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_state_changed", "external_shipment_insured"];
                                        readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_state_changed` `external_shipment_insured`";
                                    };
                                };
                                readonly version: {
                                    readonly type: "string";
                                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2024-09`";
                                    readonly default: "2024-09";
                                    readonly enum: readonly ["2024-09"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                    readonly enum: readonly ["active", "inactive", "failed"];
                                };
                                readonly secret_token: {
                                    readonly type: "string";
                                    readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                                };
                                readonly updated_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the webhook was most recently modified";
                                };
                                readonly created_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "When the webhook was created in the Easyship system recently";
                                };
                            };
                        }];
                        readonly discriminator: {
                            readonly propertyName: "version";
                            readonly mapping: {
                                readonly "2023-01": "#/components/schemas/Webhook2023_01";
                                readonly "2024-09": "#/components/schemas/Webhook2024_09";
                            };
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly pagination: {
                            readonly type: "object";
                            readonly description: "Pagination";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly next: {
                                    readonly type: "integer";
                                };
                                readonly count: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items. The `null` value is used with countless pagination (used for faster response on large datasets, like shipments).";
                                };
                                readonly page: {
                                    readonly type: "integer";
                                    readonly description: "Current page";
                                };
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksShow: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Webhook details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly webhook: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "v2023_01 Webhook";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Webhook ID";
                            };
                            readonly endpoint: {
                                readonly type: "string";
                                readonly format: "URI";
                            };
                            readonly configuration: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly credit_balance_low: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly credit_balance_limit: {
                                                readonly type: "number";
                                                readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly event_types: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly maxItems: 12;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_account_state_changed", "external_shipment_insured"];
                                    readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_account_state_changed` `external_shipment_insured`";
                                };
                            };
                            readonly version: {
                                readonly type: "string";
                                readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2023-01`";
                                readonly default: "2023-01";
                                readonly enum: readonly ["2023-01"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                readonly enum: readonly ["active", "inactive", "failed"];
                            };
                            readonly secret_token: {
                                readonly type: "string";
                                readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was most recently modified";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was created in the Easyship system recently";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "v2024_09 Webhook";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Webhook ID";
                            };
                            readonly endpoint: {
                                readonly type: "string";
                                readonly format: "URI";
                            };
                            readonly configuration: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly credit_balance_low: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly credit_balance_limit: {
                                                readonly type: "number";
                                                readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly event_types: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly maxItems: 12;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_state_changed", "external_shipment_insured"];
                                    readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_state_changed` `external_shipment_insured`";
                                };
                            };
                            readonly version: {
                                readonly type: "string";
                                readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2024-09`";
                                readonly default: "2024-09";
                                readonly enum: readonly ["2024-09"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                readonly enum: readonly ["active", "inactive", "failed"];
                            };
                            readonly secret_token: {
                                readonly type: "string";
                                readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was most recently modified";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was created in the Easyship system recently";
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "version";
                        readonly mapping: {
                            readonly "2023-01": "#/components/schemas/Webhook2023_01";
                            readonly "2024-09": "#/components/schemas/Webhook2024_09";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksTest: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Test v2023_01 Webhook";
            readonly additionalProperties: false;
            readonly required: readonly ["event_type"];
            readonly properties: {
                readonly event_type: {
                    readonly type: "string";
                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_account_state_changed", "external_shipment_insured"];
                    readonly description: "Webhook event type";
                    readonly examples: readonly ["courier_state_changed"];
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.";
                    readonly default: "2023-01";
                    readonly enum: readonly ["2023-01"];
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Test v2024_09 Webhook";
            readonly additionalProperties: false;
            readonly required: readonly ["event_type"];
            readonly properties: {
                readonly event_type: {
                    readonly type: "string";
                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_state_changed", "external_shipment_insured"];
                    readonly description: "Webhook event type";
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.";
                    readonly default: "2024-09";
                    readonly enum: readonly ["2024-09"];
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "version";
            readonly mapping: {
                readonly "2023-01": "#/components/schemas/WebhookTestCreate2023_01";
                readonly "2024-09": "#/components/schemas/WebhookTestCreate2024_09";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "General success response";
            readonly additionalProperties: false;
            readonly properties: {
                readonly success: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhooksUpdate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Create v2023_01 Webhook";
            readonly additionalProperties: false;
            readonly required: readonly ["endpoint", "event_types"];
            readonly properties: {
                readonly configuration: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly credit_balance_low: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly credit_balance_limit: {
                                    readonly type: "number";
                                    readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                };
                            };
                        };
                    };
                };
                readonly endpoint: {
                    readonly type: "string";
                    readonly format: "URI";
                };
                readonly event_types: {
                    readonly type: "array";
                    readonly minItems: 1;
                    readonly maxItems: 12;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_account_state_changed", "external_shipment_insured"];
                        readonly description: "Allowed event types";
                    };
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.";
                    readonly default: "2023-01";
                    readonly enum: readonly ["2023-01"];
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Create v2024_09 Webhook";
            readonly additionalProperties: false;
            readonly required: readonly ["endpoint", "event_types"];
            readonly properties: {
                readonly configuration: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly credit_balance_low: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly credit_balance_limit: {
                                    readonly type: "number";
                                    readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                };
                            };
                        };
                    };
                };
                readonly endpoint: {
                    readonly type: "string";
                    readonly format: "URI";
                };
                readonly event_types: {
                    readonly type: "array";
                    readonly minItems: 1;
                    readonly maxItems: 12;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_state_changed", "external_shipment_insured"];
                        readonly description: "Allowed event types";
                    };
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.";
                    readonly default: "2024-09";
                    readonly enum: readonly ["2024-09"];
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "version";
            readonly mapping: {
                readonly "2023-01": "#/components/schemas/WebhookCreate2023_01";
                readonly "2024-09": "#/components/schemas/WebhookCreate2024_09";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Webhook details";
            readonly additionalProperties: false;
            readonly properties: {
                readonly webhook: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "v2023_01 Webhook";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Webhook ID";
                            };
                            readonly endpoint: {
                                readonly type: "string";
                                readonly format: "URI";
                            };
                            readonly configuration: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly credit_balance_low: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly credit_balance_limit: {
                                                readonly type: "number";
                                                readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly event_types: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly maxItems: 12;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_account_state_changed", "external_shipment_insured"];
                                    readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_account_state_changed` `external_shipment_insured`";
                                };
                            };
                            readonly version: {
                                readonly type: "string";
                                readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2023-01`";
                                readonly default: "2023-01";
                                readonly enum: readonly ["2023-01"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                readonly enum: readonly ["active", "inactive", "failed"];
                            };
                            readonly secret_token: {
                                readonly type: "string";
                                readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was most recently modified";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was created in the Easyship system recently";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "v2024_09 Webhook";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Webhook ID";
                            };
                            readonly endpoint: {
                                readonly type: "string";
                                readonly format: "URI";
                            };
                            readonly configuration: {
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly credit_balance_low: {
                                        readonly type: "object";
                                        readonly additionalProperties: false;
                                        readonly properties: {
                                            readonly credit_balance_limit: {
                                                readonly type: "number";
                                                readonly description: "Required only when event_types include `credit_balance_low`. The webhook would be triggered if the credit balance is lower than this limit. Please note that the webhook will only be triggered once a day and it will reset at 00:00 UTC.";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly event_types: {
                                readonly type: "array";
                                readonly minItems: 1;
                                readonly maxItems: 12;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["shipment_label_created", "shipment_tracking_checkpoints_created", "shipment_tracking_status_changed", "shipment_cancelled", "shipment_label_failed", "shipment_warehouse_state_updated", "batch_started", "batch_finished", "batch_item_finished", "credit_balance_low", "courier_state_changed", "external_shipment_insured"];
                                    readonly description: "Allowed event types\n\n`shipment_label_created` `shipment_tracking_checkpoints_created` `shipment_tracking_status_changed` `shipment_cancelled` `shipment_label_failed` `shipment_warehouse_state_updated` `batch_started` `batch_finished` `batch_item_finished` `credit_balance_low` `courier_state_changed` `external_shipment_insured`";
                                };
                            };
                            readonly version: {
                                readonly type: "string";
                                readonly description: "Webhook payload version. Refer to documentation for information regarding payload versioning.\n\n`2024-09`";
                                readonly default: "2024-09";
                                readonly enum: readonly ["2024-09"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "Webhook state either active, inactive or failed\n\n`active` `inactive` `failed`";
                                readonly enum: readonly ["active", "inactive", "failed"];
                            };
                            readonly secret_token: {
                                readonly type: "string";
                                readonly description: "Incoming webhook events are signed with `X-EASYSHIP-SIGNATURE` in their headers and contain this token as the value.";
                            };
                            readonly updated_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was most recently modified";
                            };
                            readonly created_at: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "When the webhook was created in the Easyship system recently";
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "version";
                        readonly mapping: {
                            readonly "2023-01": "#/components/schemas/Webhook2023_01";
                            readonly "2024-09": "#/components/schemas/Webhook2024_09";
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly description: "Error";
            readonly additionalProperties: false;
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "A short code that represents the error.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of error returned.\n\n`invalid_request_error` `api_error`";
                            readonly enum: readonly ["invalid_request_error", "api_error"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly description: "A human-readable message providing brief information about the error.";
                        };
                        readonly links: {
                            readonly type: "array";
                            readonly description: "Link(s) to Easyship developer resources";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of Easyship documentation";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly format: "uri";
                                        readonly description: "URL to Easyship documentation";
                                    };
                                    readonly kind: {
                                        readonly type: "string";
                                        readonly description: "The kind of easyship documentation";
                                    };
                                };
                            };
                        };
                        readonly details: {
                            readonly type: "array";
                            readonly description: "An array of human-readable messages providing detailed information about the error.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly request_id: {
                            readonly type: "string";
                            readonly description: "An unique ID represent the request.";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
export { AccountShow, AddressActivateCreate, AddressDeactivateCreate, AddressesCreate, AddressesIndex, AddressesUpdate, AddressesValidation, AnalyticsSaleChannelsIndex, AnalyticsShipmentShippedIndex, AnalyticsShipmentStatusIndex, AnalyticsShipmentsIndex, AnalyticsTopCouriersIndex, AnalyticsTopShipmentsDestinationsIndex, AppAccessCreate, AssetActivateCreate, AssetDeactivateCreate, AssetsCreate, AssetsDelete, AssetsIndex, AssetsUpdate, BatchAddressesCreate, BatchItemsIndex, BatchLabelsCreate, BatchShipmentsCreate, BatchesIndex, BatchesShow, BillingDocumentsDownload, BillingDocumentsIndex, BillingDocumentsTransactionsIndex, BoxesCreate, BoxesDelete, BoxesIndex, BoxesUpdate, CountriesIndex, CourierCourierServicesIndex, CourierLyocIndex, CourierServiceEstimatedDeliveryDatesIndex, CourierServicesIndex, CourierServicesPickupSlotsIndex, CouriersCreate, CouriersDeactivate, CouriersDelete, CouriersIndex, CouriersShow, CouriersUpdate, CreditAutoRechargeShow, CreditAutoRechargeUpdate, CreditConfrim3DsCreate, CreditRefundCreate, CreditsCreate, CreditsShow, EfulfillmentTrackingUpdate, EfulfillmentWarehouseStateUpdate, HsCodeIndex, InsurancesPoliciesCreate, InsurancesPoliciesIndex, ItemCategoriesIndex, LocationsFedexIndex, LocationsUpsIndex, LocationsUspsIndex, ManifestsCreate, ManifestsIndex, ManifestsShow, PaymentSourcesConfrim3DsCreate, PaymentSourcesCreate, PaymentSourcesDelete, PaymentSourcesIndex, PaymentSourcesUpdate, PickupsCancel, PickupsCreate, PickupsIndex, PickupsShipmentsIndex, PickupsShow, ProductsCreate, ProductsDelete, ProductsIndex, ProductsUpdate, RatesRequest, RedirectsCreate, ReturnShipmentsCreate, SandboxTrackingsUpdate, SettingsIndex, SettingsUpdate, ShipmentUnavailableCouriersIndex, ShipmentsCancel, ShipmentsCreate, ShipmentsDelete, ShipmentsDocumentsIndex, ShipmentsIndex, ShipmentsInsureCreate, ShipmentsShow, ShipmentsTrackingsIndex, ShipmentsTransactionRecordsIndex, ShipmentsUpdate, ShippingRuleActionCreate, ShippingRuleActionDelete, ShippingRuleActionIndex, ShippingRuleActionUpdate, ShippingRuleActivate, ShippingRuleConditionCreate, ShippingRuleConditionDelete, ShippingRuleConditionIndex, ShippingRuleConditionUpdate, ShippingRuleDeactivate, ShippingRulePlatformsIndex, ShippingRulesCreate, ShippingRulesDelete, ShippingRulesIndex, ShippingRulesShow, ShippingRulesUpdate, StatesIndex, StoresIndex, StripesShow, TagsCreate, TagsIndex, TaxesAndDutiesCalculate, TrackingsCreate, TrackingsDelete, TrackingsExternalCourierServicesIndex, TrackingsIndex, TrackingsListSupportedCouriers, TrackingsShow, TransactionsIndex, WebhooksActivate, WebhooksCreate, WebhooksDeactivate, WebhooksDelete, WebhooksIndex, WebhooksShow, WebhooksTest, WebhooksUpdate };
